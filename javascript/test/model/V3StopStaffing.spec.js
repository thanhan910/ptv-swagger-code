/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PtvTimetableApiVersion3);
  }
}(this, function(expect, PtvTimetableApiVersion3) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V3StopStaffing', function() {
      beforeEach(function() {
        instance = new PtvTimetableApiVersion3.V3StopStaffing();
      });

      it('should create an instance of V3StopStaffing', function() {
        // TODO: update the code to test V3StopStaffing
        expect(instance).to.be.a(PtvTimetableApiVersion3.V3StopStaffing);
      });

      it('should have the property friAmFrom (base name: "fri_am_from")', function() {
        // TODO: update the code to test the property friAmFrom
        expect(instance).to.have.property('friAmFrom');
        // expect(instance.friAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property friAmTo (base name: "fri_am_to")', function() {
        // TODO: update the code to test the property friAmTo
        expect(instance).to.have.property('friAmTo');
        // expect(instance.friAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property friPmFrom (base name: "fri_pm_from")', function() {
        // TODO: update the code to test the property friPmFrom
        expect(instance).to.have.property('friPmFrom');
        // expect(instance.friPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property friPmTo (base name: "fri_pm_to")', function() {
        // TODO: update the code to test the property friPmTo
        expect(instance).to.have.property('friPmTo');
        // expect(instance.friPmTo).to.be(expectedValueLiteral);
      });

      it('should have the property monAmFrom (base name: "mon_am_from")', function() {
        // TODO: update the code to test the property monAmFrom
        expect(instance).to.have.property('monAmFrom');
        // expect(instance.monAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property monAmTo (base name: "mon_am_to")', function() {
        // TODO: update the code to test the property monAmTo
        expect(instance).to.have.property('monAmTo');
        // expect(instance.monAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property monPmFrom (base name: "mon_pm_from")', function() {
        // TODO: update the code to test the property monPmFrom
        expect(instance).to.have.property('monPmFrom');
        // expect(instance.monPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property monPmTo (base name: "mon_pm_to")', function() {
        // TODO: update the code to test the property monPmTo
        expect(instance).to.have.property('monPmTo');
        // expect(instance.monPmTo).to.be(expectedValueLiteral);
      });

      it('should have the property phAdditionalText (base name: "ph_additional_text")', function() {
        // TODO: update the code to test the property phAdditionalText
        expect(instance).to.have.property('phAdditionalText');
        // expect(instance.phAdditionalText).to.be(expectedValueLiteral);
      });

      it('should have the property phFrom (base name: "ph_from")', function() {
        // TODO: update the code to test the property phFrom
        expect(instance).to.have.property('phFrom');
        // expect(instance.phFrom).to.be(expectedValueLiteral);
      });

      it('should have the property phTo (base name: "ph_to")', function() {
        // TODO: update the code to test the property phTo
        expect(instance).to.have.property('phTo');
        // expect(instance.phTo).to.be(expectedValueLiteral);
      });

      it('should have the property satAmFrom (base name: "sat_am_from")', function() {
        // TODO: update the code to test the property satAmFrom
        expect(instance).to.have.property('satAmFrom');
        // expect(instance.satAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property satAmTo (base name: "sat_am_to")', function() {
        // TODO: update the code to test the property satAmTo
        expect(instance).to.have.property('satAmTo');
        // expect(instance.satAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property satPmFrom (base name: "sat_pm_from")', function() {
        // TODO: update the code to test the property satPmFrom
        expect(instance).to.have.property('satPmFrom');
        // expect(instance.satPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property satPmTo (base name: "sat_pm_to")', function() {
        // TODO: update the code to test the property satPmTo
        expect(instance).to.have.property('satPmTo');
        // expect(instance.satPmTo).to.be(expectedValueLiteral);
      });

      it('should have the property sunAmFrom (base name: "sun_am_from")', function() {
        // TODO: update the code to test the property sunAmFrom
        expect(instance).to.have.property('sunAmFrom');
        // expect(instance.sunAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property sunAmTo (base name: "sun_am_to")', function() {
        // TODO: update the code to test the property sunAmTo
        expect(instance).to.have.property('sunAmTo');
        // expect(instance.sunAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property sunPmFrom (base name: "sun_pm_from")', function() {
        // TODO: update the code to test the property sunPmFrom
        expect(instance).to.have.property('sunPmFrom');
        // expect(instance.sunPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property sunPmTo (base name: "sun_pm_to")', function() {
        // TODO: update the code to test the property sunPmTo
        expect(instance).to.have.property('sunPmTo');
        // expect(instance.sunPmTo).to.be(expectedValueLiteral);
      });

      it('should have the property thuAmFrom (base name: "thu_am_from")', function() {
        // TODO: update the code to test the property thuAmFrom
        expect(instance).to.have.property('thuAmFrom');
        // expect(instance.thuAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property thuAmTo (base name: "thu_am_to")', function() {
        // TODO: update the code to test the property thuAmTo
        expect(instance).to.have.property('thuAmTo');
        // expect(instance.thuAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property thuPmFrom (base name: "thu_pm_from")', function() {
        // TODO: update the code to test the property thuPmFrom
        expect(instance).to.have.property('thuPmFrom');
        // expect(instance.thuPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property thuPmTo (base name: "thu_pm_to")', function() {
        // TODO: update the code to test the property thuPmTo
        expect(instance).to.have.property('thuPmTo');
        // expect(instance.thuPmTo).to.be(expectedValueLiteral);
      });

      it('should have the property tueAmFrom (base name: "tue_am_from")', function() {
        // TODO: update the code to test the property tueAmFrom
        expect(instance).to.have.property('tueAmFrom');
        // expect(instance.tueAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property tueAmTo (base name: "tue_am_to")', function() {
        // TODO: update the code to test the property tueAmTo
        expect(instance).to.have.property('tueAmTo');
        // expect(instance.tueAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property tuePmFrom (base name: "tue_pm_from")', function() {
        // TODO: update the code to test the property tuePmFrom
        expect(instance).to.have.property('tuePmFrom');
        // expect(instance.tuePmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property tuePmTo (base name: "tue_pm_to")', function() {
        // TODO: update the code to test the property tuePmTo
        expect(instance).to.have.property('tuePmTo');
        // expect(instance.tuePmTo).to.be(expectedValueLiteral);
      });

      it('should have the property wedAmFrom (base name: "wed_am_from")', function() {
        // TODO: update the code to test the property wedAmFrom
        expect(instance).to.have.property('wedAmFrom');
        // expect(instance.wedAmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property wedAmTo (base name: "wed_am_to")', function() {
        // TODO: update the code to test the property wedAmTo
        expect(instance).to.have.property('wedAmTo');
        // expect(instance.wedAmTo).to.be(expectedValueLiteral);
      });

      it('should have the property wedPmFrom (base name: "wed_pm_from")', function() {
        // TODO: update the code to test the property wedPmFrom
        expect(instance).to.have.property('wedPmFrom');
        // expect(instance.wedPmFrom).to.be(expectedValueLiteral);
      });

      it('should have the property wedPmTo (base name: "wed_pm_To")', function() {
        // TODO: update the code to test the property wedPmTo
        expect(instance).to.have.property('wedPmTo');
        // expect(instance.wedPmTo).to.be(expectedValueLiteral);
      });

    });
  });

}));
