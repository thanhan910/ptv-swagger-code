/**
* PTV Timetable API - Version 3
* The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
*
* OpenAPI spec version: v3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * View departures for all routes from a stop
     * 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param stopId Identifier of stop; values returned by Stops API 
     * @param platformNumbers Filter by platform number at stop (optional)
     * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
     * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
     * @param maxResults Maximum number of results returned (optional)
     * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
     * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
     * @param includeGeopath Indicates if the route geopath should be returned (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/departures/route_type/{routeType}/stop/{stopId}") class departuresGetForStop(val routeType: kotlin.Int, val stopId: kotlin.Int, val platformNumbers: kotlin.Array<kotlin.Int>, val directionId: kotlin.Int, val gtfs: kotlin.Boolean, val dateUtc: java.time.LocalDateTime, val maxResults: kotlin.Int, val includeCancelled: kotlin.Boolean, val lookBackwards: kotlin.Boolean, val expand: kotlin.Array<kotlin.String>, val includeGeopath: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View departures for a specific route from a stop
     * 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param stopId Identifier of stop; values returned by Stops API 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes 
     * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
     * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
     * @param maxResults Maximum number of results returned (optional)
     * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
     * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
     * @param includeGeopath Indicates if the route geopath should be returned (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/departures/route_type/{routeType}/stop/{stopId}/route/{routeId}") class departuresGetForStopAndRoute(val routeType: kotlin.Int, val stopId: kotlin.Int, val routeId: kotlin.String, val directionId: kotlin.Int, val gtfs: kotlin.Boolean, val dateUtc: java.time.LocalDateTime, val maxResults: kotlin.Int, val includeCancelled: kotlin.Boolean, val lookBackwards: kotlin.Boolean, val expand: kotlin.Array<kotlin.String>, val includeGeopath: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all routes for a direction of travel
     * 
     * @param directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/directions/{directionId}") class directionsForDirection(val directionId: kotlin.Int, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all routes of a particular type for a direction of travel
     * 
     * @param directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/directions/{directionId}/route_type/{routeType}") class directionsForDirectionAndType(val directionId: kotlin.Int, val routeType: kotlin.Int, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View directions that a route travels in
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/directions/route/{routeId}") class directionsForRoute(val routeId: kotlin.Int, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all disruptions for all route types
     * 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param disruptionModes Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions") class disruptionsGetAllDisruptions(val routeTypes: kotlin.Array<kotlin.Int>, val disruptionModes: kotlin.Array<kotlin.Int>, val disruptionStatus: kotlin.String, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View a specific disruption
     * 
     * @param disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions/{disruptionId}") class disruptionsGetDisruptionById(val disruptionId: kotlin.Long, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * Get all disruption modes
     * 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions/modes") class disruptionsGetDisruptionModes(val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all disruptions for a particular route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes 
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions/route/{routeId}") class disruptionsGetDisruptionsByRoute(val routeId: kotlin.Int, val disruptionStatus: kotlin.String, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all disruptions for a particular route and stop
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes 
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops 
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions/route/{routeId}/stop/{stopId}") class disruptionsGetDisruptionsByRouteAndStop(val routeId: kotlin.Int, val stopId: kotlin.Int, val disruptionStatus: kotlin.String, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all disruptions for a particular stop
     * 
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops 
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/disruptions/stop/{stopId}") class disruptionsGetDisruptionsByStop(val stopId: kotlin.Int, val disruptionStatus: kotlin.String, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * Estimate a fare by zone
     * 
     * @param minZone Minimum Zone travelled through ie. 1 
     * @param maxZone Maximum Zone travelled through id. 6 
     * @param journeyTouchOnUtc JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53). (optional)
     * @param journeyTouchOffUtc JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53). (optional)
     * @param isJourneyInFreeTramZone  (optional)
     * @param travelledRouteTypes  (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}") class fareEstimateGetFareEstimateByZone(val minZone: kotlin.Int, val maxZone: kotlin.Int, val journeyTouchOnUtc: java.time.LocalDateTime, val journeyTouchOffUtc: java.time.LocalDateTime, val isJourneyInFreeTramZone: kotlin.Boolean, val travelledRouteTypes: kotlin.Array<kotlin.Int>, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * List all ticket outlets
     * 
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/outlets") class outletsGetAllOutlets(val maxResults: kotlin.Int, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * List ticket outlets near a specific location
     * 
     * @param latitude Geographic coordinate of latitude 
     * @param longitude Geographic coordinate of longitude 
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/outlets/location/{latitude},{longitude}") class outletsGetOutletsByGeolocation(val latitude: kotlin.Float, val longitude: kotlin.Float, val maxDistance: kotlin.Double, val maxResults: kotlin.Int, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View the stopping pattern for a specific trip/service run
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. 
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/pattern/run/{runRef}/route_type/{routeType}") class patternsGetPatternByRun(val runRef: kotlin.String, val routeType: kotlin.Int, val expand: kotlin.Array<kotlin.String>, val stopId: kotlin.Int, val dateUtc: java.time.LocalDateTime, val includeSkippedStops: kotlin.Boolean, val includeGeopath: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all route types and their names
     * 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/route_types") class routeTypesGetRouteTypes(val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View route names and numbers for all routes
     * 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param routeName Filter by name  of route (accepts partial route name matches) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/routes") class routesOneOrMoreRoutes(val routeTypes: kotlin.Array<kotlin.Int>, val routeName: kotlin.String, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View route name and number for specific route ID
     * 
     * @param routeId Identifier of route; values returned by Departures, Directions and Disruptions APIs 
     * @param includeGeopath Indicates kif geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/routes/{routeId}") class routesRouteFromId(val routeId: kotlin.Int, val includeGeopath: kotlin.Boolean, val geopathUtc: java.time.LocalDateTime, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all trip/service runs for a specific route ID
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes. 
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)
     * @param dateUtc Date of the request. (optional - defaults to now) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/runs/route/{routeId}") class runsForRoute(val routeId: kotlin.Int, val expand: kotlin.Array<kotlin.String>, val dateUtc: java.time.LocalDateTime, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all trip/service runs for a specific route ID and route type
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes. 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All. 
     * @param dateUtc Date of the request. (optional - defaults to now) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/runs/route/{routeId}/route_type/{routeType}") class runsForRouteAndRouteType(val routeId: kotlin.Int, val routeType: kotlin.Int, val expand: kotlin.Array<kotlin.String>, val dateUtc: java.time.LocalDateTime, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all trip/service runs for a specific run_ref
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. 
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. 
     * @param dateUtc Date of the request. (optional - defaults to now) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/runs/{runRef}") class runsForRun(val runRef: kotlin.String, val expand: kotlin.Array<kotlin.String>, val dateUtc: java.time.LocalDateTime, val includeGeopath: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View the trip/service run for a specific run_ref and route type
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. 
     * @param dateUtc Date of the request. (optional - defaults to now) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/runs/{runRef}/route_type/{routeType}") class runsForRunAndRouteType(val runRef: kotlin.String, val routeType: kotlin.Int, val expand: kotlin.Array<kotlin.String>, val dateUtc: java.time.LocalDateTime, val includeGeopath: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View stops, routes and myki ticket outlets that match the search term
     * 
     * @param searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param latitude Filter by geographic coordinate of latitude (optional)
     * @param longitude Filter by geographic coordinate of longitude (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param includeAddresses Placeholder for future development; currently unavailable (optional)
     * @param includeOutlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param matchStopBySuburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param matchRouteBySuburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param matchStopByGtfsStopId Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/search/{searchTerm}") class searchSearch(val searchTerm: kotlin.String, val routeTypes: kotlin.Array<kotlin.Int>, val latitude: kotlin.Float, val longitude: kotlin.Float, val maxDistance: kotlin.Float, val includeAddresses: kotlin.Boolean, val includeOutlets: kotlin.Boolean, val matchStopBySuburb: kotlin.Boolean, val matchRouteBySuburb: kotlin.Boolean, val matchStopByGtfsStopId: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View facilities at a specific stop (Metro and V/Line stations only)
     * 
     * @param stopId Identifier of stop; values returned by Stops API 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/stops/{stopId}/route_type/{routeType}") class stopsStopDetails(val stopId: kotlin.Int, val routeType: kotlin.Int, val stopLocation: kotlin.Boolean, val stopAmenities: kotlin.Boolean, val stopAccessibility: kotlin.Boolean, val stopContact: kotlin.Boolean, val stopTicket: kotlin.Boolean, val gtfs: kotlin.Boolean, val stopStaffing: kotlin.Boolean, val stopDisruptions: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all stops near a specific location
     * 
     * @param latitude Geographic coordinate of latitude 
     * @param longitude Geographic coordinate of longitude 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/stops/location/{latitude},{longitude}") class stopsStopsByGeolocation(val latitude: kotlin.Float, val longitude: kotlin.Float, val routeTypes: kotlin.Array<kotlin.Int>, val maxResults: kotlin.Int, val maxDistance: kotlin.Double, val stopDisruptions: kotlin.Boolean, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

    /**
     * View all stops on a specific route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes 
     * @param routeType Number identifying transport mode; values returned via RouteTypes API 
     * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     */
    @Location("/v3/stops/route/{routeId}/route_type/{routeType}") class stopsStopsForRoute(val routeId: kotlin.Int, val routeType: kotlin.Int, val directionId: kotlin.Int, val stopDisruptions: kotlin.Boolean, val includeGeopath: kotlin.Boolean, val geopathUtc: java.time.LocalDateTime, val token: kotlin.String, val devid: kotlin.String, val signature: kotlin.String)

}
