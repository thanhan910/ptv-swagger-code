/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3ErrorResponse } from '../models';
import { V3OutletGeolocationResponse } from '../models';
import { V3OutletResponse } from '../models';
/**
 * OutletsApi - axios parameter creator
 * @export
 */
export const OutletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all ticket outlets
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outletsGetAllOutlets: async (maxResults?: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/outlets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List ticket outlets near a specific location
         * @param {number} latitude Geographic coordinate of latitude
         * @param {number} longitude Geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300)
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outletsGetOutletsByGeolocation: async (latitude: number, longitude: number, maxDistance?: number, maxResults?: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            if (latitude === null || latitude === undefined) {
                throw new RequiredError('latitude','Required parameter latitude was null or undefined when calling outletsGetOutletsByGeolocation.');
            }
            // verify required parameter 'longitude' is not null or undefined
            if (longitude === null || longitude === undefined) {
                throw new RequiredError('longitude','Required parameter longitude was null or undefined when calling outletsGetOutletsByGeolocation.');
            }
            const localVarPath = `/v3/outlets/location/{latitude},{longitude}`
                .replace(`{${"latitude"}}`, encodeURIComponent(String(latitude)))
                .replace(`{${"longitude"}}`, encodeURIComponent(String(longitude)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxDistance !== undefined) {
                localVarQueryParameter['max_distance'] = maxDistance;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutletsApi - functional programming interface
 * @export
 */
export const OutletsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all ticket outlets
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outletsGetAllOutlets(maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3OutletResponse>>> {
            const localVarAxiosArgs = await OutletsApiAxiosParamCreator(configuration).outletsGetAllOutlets(maxResults, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List ticket outlets near a specific location
         * @param {number} latitude Geographic coordinate of latitude
         * @param {number} longitude Geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300)
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outletsGetOutletsByGeolocation(latitude: number, longitude: number, maxDistance?: number, maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3OutletGeolocationResponse>>> {
            const localVarAxiosArgs = await OutletsApiAxiosParamCreator(configuration).outletsGetOutletsByGeolocation(latitude, longitude, maxDistance, maxResults, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OutletsApi - factory interface
 * @export
 */
export const OutletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary List all ticket outlets
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outletsGetAllOutlets(maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3OutletResponse>> {
            return OutletsApiFp(configuration).outletsGetAllOutlets(maxResults, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List ticket outlets near a specific location
         * @param {number} latitude Geographic coordinate of latitude
         * @param {number} longitude Geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300)
         * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outletsGetOutletsByGeolocation(latitude: number, longitude: number, maxDistance?: number, maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3OutletGeolocationResponse>> {
            return OutletsApiFp(configuration).outletsGetOutletsByGeolocation(latitude, longitude, maxDistance, maxResults, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OutletsApi - object-oriented interface
 * @export
 * @class OutletsApi
 * @extends {BaseAPI}
 */
export class OutletsApi extends BaseAPI {
    /**
     * 
     * @summary List all ticket outlets
     * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutletsApi
     */
    public async outletsGetAllOutlets(maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3OutletResponse>> {
        return OutletsApiFp(this.configuration).outletsGetAllOutlets(maxResults, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List ticket outlets near a specific location
     * @param {number} latitude Geographic coordinate of latitude
     * @param {number} longitude Geographic coordinate of longitude
     * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300)
     * @param {number} [maxResults] Maximum number of results returned (default &#x3D; 30)
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutletsApi
     */
    public async outletsGetOutletsByGeolocation(latitude: number, longitude: number, maxDistance?: number, maxResults?: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3OutletGeolocationResponse>> {
        return OutletsApiFp(this.configuration).outletsGetOutletsByGeolocation(latitude, longitude, maxDistance, maxResults, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
