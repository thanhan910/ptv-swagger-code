/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3DisruptionModesResponse } from '../models';
import { V3DisruptionResponse } from '../models';
import { V3DisruptionsResponse } from '../models';
import { V3ErrorResponse } from '../models';
/**
 * DisruptionsApi - axios parameter creator
 * @export
 */
export const DisruptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View all disruptions for all route types
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API
         * @param {Array<number>} [disruptionModes] Filter by disruption_mode; values returned via v3/disruptions/modes API
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetAllDisruptions: async (routeTypes?: Array<number>, disruptionModes?: Array<number>, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/disruptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (routeTypes) {
                localVarQueryParameter['route_types'] = routeTypes;
            }

            if (disruptionModes) {
                localVarQueryParameter['disruption_modes'] = disruptionModes;
            }

            if (disruptionStatus !== undefined) {
                localVarQueryParameter['disruption_status'] = disruptionStatus;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View a specific disruption
         * @param {number} disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetDisruptionById: async (disruptionId: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'disruptionId' is not null or undefined
            if (disruptionId === null || disruptionId === undefined) {
                throw new RequiredError('disruptionId','Required parameter disruptionId was null or undefined when calling disruptionsGetDisruptionById.');
            }
            const localVarPath = `/v3/disruptions/{disruption_id}`
                .replace(`{${"disruption_id"}}`, encodeURIComponent(String(disruptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all disruption modes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetDisruptionModes: async (token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/disruptions/modes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular route
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetDisruptionsByRoute: async (routeId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling disruptionsGetDisruptionsByRoute.');
            }
            const localVarPath = `/v3/disruptions/route/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (disruptionStatus !== undefined) {
                localVarQueryParameter['disruption_status'] = disruptionStatus;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular route and stop
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetDisruptionsByRouteAndStop: async (routeId: number, stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling disruptionsGetDisruptionsByRouteAndStop.');
            }
            // verify required parameter 'stopId' is not null or undefined
            if (stopId === null || stopId === undefined) {
                throw new RequiredError('stopId','Required parameter stopId was null or undefined when calling disruptionsGetDisruptionsByRouteAndStop.');
            }
            const localVarPath = `/v3/disruptions/route/{route_id}/stop/{stop_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"stop_id"}}`, encodeURIComponent(String(stopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (disruptionStatus !== undefined) {
                localVarQueryParameter['disruption_status'] = disruptionStatus;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular stop
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disruptionsGetDisruptionsByStop: async (stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stopId' is not null or undefined
            if (stopId === null || stopId === undefined) {
                throw new RequiredError('stopId','Required parameter stopId was null or undefined when calling disruptionsGetDisruptionsByStop.');
            }
            const localVarPath = `/v3/disruptions/stop/{stop_id}`
                .replace(`{${"stop_id"}}`, encodeURIComponent(String(stopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (disruptionStatus !== undefined) {
                localVarQueryParameter['disruption_status'] = disruptionStatus;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisruptionsApi - functional programming interface
 * @export
 */
export const DisruptionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View all disruptions for all route types
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API
         * @param {Array<number>} [disruptionModes] Filter by disruption_mode; values returned via v3/disruptions/modes API
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetAllDisruptions(routeTypes?: Array<number>, disruptionModes?: Array<number>, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionsResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetAllDisruptions(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View a specific disruption
         * @param {number} disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionById(disruptionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetDisruptionById(disruptionId, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all disruption modes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionModes(token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionModesResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetDisruptionModes(token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular route
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByRoute(routeId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionsResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetDisruptionsByRoute(routeId, disruptionStatus, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular route and stop
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByRouteAndStop(routeId: number, stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionsResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetDisruptionsByRouteAndStop(routeId, stopId, disruptionStatus, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View all disruptions for a particular stop
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByStop(stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DisruptionsResponse>>> {
            const localVarAxiosArgs = await DisruptionsApiAxiosParamCreator(configuration).disruptionsGetDisruptionsByStop(stopId, disruptionStatus, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DisruptionsApi - factory interface
 * @export
 */
export const DisruptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary View all disruptions for all route types
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API
         * @param {Array<number>} [disruptionModes] Filter by disruption_mode; values returned via v3/disruptions/modes API
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetAllDisruptions(routeTypes?: Array<number>, disruptionModes?: Array<number>, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionsResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetAllDisruptions(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View a specific disruption
         * @param {number} disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionById(disruptionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetDisruptionById(disruptionId, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all disruption modes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionModes(token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionModesResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetDisruptionModes(token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all disruptions for a particular route
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByRoute(routeId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionsResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetDisruptionsByRoute(routeId, disruptionStatus, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all disruptions for a particular route and stop
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByRouteAndStop(routeId: number, stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionsResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetDisruptionsByRouteAndStop(routeId, stopId, disruptionStatus, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all disruptions for a particular stop
         * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
         * @param {string} [disruptionStatus] Filter by status of disruption
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disruptionsGetDisruptionsByStop(stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DisruptionsResponse>> {
            return DisruptionsApiFp(configuration).disruptionsGetDisruptionsByStop(stopId, disruptionStatus, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DisruptionsApi - object-oriented interface
 * @export
 * @class DisruptionsApi
 * @extends {BaseAPI}
 */
export class DisruptionsApi extends BaseAPI {
    /**
     * 
     * @summary View all disruptions for all route types
     * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API
     * @param {Array<number>} [disruptionModes] Filter by disruption_mode; values returned via v3/disruptions/modes API
     * @param {string} [disruptionStatus] Filter by status of disruption
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetAllDisruptions(routeTypes?: Array<number>, disruptionModes?: Array<number>, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionsResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetAllDisruptions(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View a specific disruption
     * @param {number} disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetDisruptionById(disruptionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetDisruptionById(disruptionId, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all disruption modes
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetDisruptionModes(token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionModesResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetDisruptionModes(token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View all disruptions for a particular route
     * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
     * @param {string} [disruptionStatus] Filter by status of disruption
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetDisruptionsByRoute(routeId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionsResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetDisruptionsByRoute(routeId, disruptionStatus, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View all disruptions for a particular route and stop
     * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
     * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
     * @param {string} [disruptionStatus] Filter by status of disruption
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetDisruptionsByRouteAndStop(routeId: number, stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionsResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetDisruptionsByRouteAndStop(routeId, stopId, disruptionStatus, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View all disruptions for a particular stop
     * @param {number} stopId Identifier of stop; values returned by Stops API - v3/stops
     * @param {string} [disruptionStatus] Filter by status of disruption
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisruptionsApi
     */
    public async disruptionsGetDisruptionsByStop(stopId: number, disruptionStatus?: string, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DisruptionsResponse>> {
        return DisruptionsApiFp(this.configuration).disruptionsGetDisruptionsByStop(stopId, disruptionStatus, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
