/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3DirectionsResponse } from '../models';
import { V3ErrorResponse } from '../models';
/**
 * DirectionsApi - axios parameter creator
 * @export
 */
export const DirectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View all routes for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directionsForDirection: async (directionId: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directionId' is not null or undefined
            if (directionId === null || directionId === undefined) {
                throw new RequiredError('directionId','Required parameter directionId was null or undefined when calling directionsForDirection.');
            }
            const localVarPath = `/v3/directions/{direction_id}`
                .replace(`{${"direction_id"}}`, encodeURIComponent(String(directionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all routes of a particular type for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directionsForDirectionAndType: async (directionId: number, routeType: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directionId' is not null or undefined
            if (directionId === null || directionId === undefined) {
                throw new RequiredError('directionId','Required parameter directionId was null or undefined when calling directionsForDirectionAndType.');
            }
            // verify required parameter 'routeType' is not null or undefined
            if (routeType === null || routeType === undefined) {
                throw new RequiredError('routeType','Required parameter routeType was null or undefined when calling directionsForDirectionAndType.');
            }
            const localVarPath = `/v3/directions/{direction_id}/route_type/{route_type}`
                .replace(`{${"direction_id"}}`, encodeURIComponent(String(directionId)))
                .replace(`{${"route_type"}}`, encodeURIComponent(String(routeType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View directions that a route travels in
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directionsForRoute: async (routeId: number, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling directionsForRoute.');
            }
            const localVarPath = `/v3/directions/route/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectionsApi - functional programming interface
 * @export
 */
export const DirectionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View all routes for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForDirection(directionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DirectionsResponse>>> {
            const localVarAxiosArgs = await DirectionsApiAxiosParamCreator(configuration).directionsForDirection(directionId, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View all routes of a particular type for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForDirectionAndType(directionId: number, routeType: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DirectionsResponse>>> {
            const localVarAxiosArgs = await DirectionsApiAxiosParamCreator(configuration).directionsForDirectionAndType(directionId, routeType, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View directions that a route travels in
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForRoute(routeId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DirectionsResponse>>> {
            const localVarAxiosArgs = await DirectionsApiAxiosParamCreator(configuration).directionsForRoute(routeId, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DirectionsApi - factory interface
 * @export
 */
export const DirectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary View all routes for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForDirection(directionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DirectionsResponse>> {
            return DirectionsApiFp(configuration).directionsForDirection(directionId, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all routes of a particular type for a direction of travel
         * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForDirectionAndType(directionId: number, routeType: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DirectionsResponse>> {
            return DirectionsApiFp(configuration).directionsForDirectionAndType(directionId, routeType, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View directions that a route travels in
         * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directionsForRoute(routeId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DirectionsResponse>> {
            return DirectionsApiFp(configuration).directionsForRoute(routeId, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectionsApi - object-oriented interface
 * @export
 * @class DirectionsApi
 * @extends {BaseAPI}
 */
export class DirectionsApi extends BaseAPI {
    /**
     * 
     * @summary View all routes for a direction of travel
     * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectionsApi
     */
    public async directionsForDirection(directionId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DirectionsResponse>> {
        return DirectionsApiFp(this.configuration).directionsForDirection(directionId, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View all routes of a particular type for a direction of travel
     * @param {number} directionId Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
     * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectionsApi
     */
    public async directionsForDirectionAndType(directionId: number, routeType: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DirectionsResponse>> {
        return DirectionsApiFp(this.configuration).directionsForDirectionAndType(directionId, routeType, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View directions that a route travels in
     * @param {number} routeId Identifier of route; values returned by Routes API - v3/routes
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectionsApi
     */
    public async directionsForRoute(routeId: number, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DirectionsResponse>> {
        return DirectionsApiFp(this.configuration).directionsForRoute(routeId, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
