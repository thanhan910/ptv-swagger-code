/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3ErrorResponse } from '../models';
import { V3SearchResult } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View stops, routes and myki ticket outlets that match the search term
         * @param {string} searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
         * @param {number} [latitude] Filter by geographic coordinate of latitude
         * @param {number} [longitude] Filter by geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
         * @param {boolean} [includeAddresses] Placeholder for future development; currently unavailable
         * @param {boolean} [includeOutlets] Indicates if outlets will be returned in response (default &#x3D; true)
         * @param {boolean} [matchStopBySuburb] Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchRouteBySuburb] Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchStopByGtfsStopId] Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearch: async (searchTerm: string, routeTypes?: Array<number>, latitude?: number, longitude?: number, maxDistance?: number, includeAddresses?: boolean, includeOutlets?: boolean, matchStopBySuburb?: boolean, matchRouteBySuburb?: boolean, matchStopByGtfsStopId?: boolean, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling searchSearch.');
            }
            const localVarPath = `/v3/search/{search_term}`
                .replace(`{${"search_term"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (routeTypes) {
                localVarQueryParameter['route_types'] = routeTypes;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (maxDistance !== undefined) {
                localVarQueryParameter['max_distance'] = maxDistance;
            }

            if (includeAddresses !== undefined) {
                localVarQueryParameter['include_addresses'] = includeAddresses;
            }

            if (includeOutlets !== undefined) {
                localVarQueryParameter['include_outlets'] = includeOutlets;
            }

            if (matchStopBySuburb !== undefined) {
                localVarQueryParameter['match_stop_by_suburb'] = matchStopBySuburb;
            }

            if (matchRouteBySuburb !== undefined) {
                localVarQueryParameter['match_route_by_suburb'] = matchRouteBySuburb;
            }

            if (matchStopByGtfsStopId !== undefined) {
                localVarQueryParameter['match_stop_by_gtfs_stop_id'] = matchStopByGtfsStopId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View stops, routes and myki ticket outlets that match the search term
         * @param {string} searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
         * @param {number} [latitude] Filter by geographic coordinate of latitude
         * @param {number} [longitude] Filter by geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
         * @param {boolean} [includeAddresses] Placeholder for future development; currently unavailable
         * @param {boolean} [includeOutlets] Indicates if outlets will be returned in response (default &#x3D; true)
         * @param {boolean} [matchStopBySuburb] Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchRouteBySuburb] Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchStopByGtfsStopId] Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSearch(searchTerm: string, routeTypes?: Array<number>, latitude?: number, longitude?: number, maxDistance?: number, includeAddresses?: boolean, includeOutlets?: boolean, matchStopBySuburb?: boolean, matchRouteBySuburb?: boolean, matchStopByGtfsStopId?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3SearchResult>>> {
            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchSearch(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary View stops, routes and myki ticket outlets that match the search term
         * @param {string} searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
         * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
         * @param {number} [latitude] Filter by geographic coordinate of latitude
         * @param {number} [longitude] Filter by geographic coordinate of longitude
         * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
         * @param {boolean} [includeAddresses] Placeholder for future development; currently unavailable
         * @param {boolean} [includeOutlets] Indicates if outlets will be returned in response (default &#x3D; true)
         * @param {boolean} [matchStopBySuburb] Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchRouteBySuburb] Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
         * @param {boolean} [matchStopByGtfsStopId] Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSearch(searchTerm: string, routeTypes?: Array<number>, latitude?: number, longitude?: number, maxDistance?: number, includeAddresses?: boolean, includeOutlets?: boolean, matchStopBySuburb?: boolean, matchRouteBySuburb?: boolean, matchStopByGtfsStopId?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3SearchResult>> {
            return SearchApiFp(configuration).searchSearch(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary View stops, routes and myki ticket outlets that match the search term
     * @param {string} searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
     * @param {Array<number>} [routeTypes] Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
     * @param {number} [latitude] Filter by geographic coordinate of latitude
     * @param {number} [longitude] Filter by geographic coordinate of longitude
     * @param {number} [maxDistance] Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
     * @param {boolean} [includeAddresses] Placeholder for future development; currently unavailable
     * @param {boolean} [includeOutlets] Indicates if outlets will be returned in response (default &#x3D; true)
     * @param {boolean} [matchStopBySuburb] Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
     * @param {boolean} [matchRouteBySuburb] Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
     * @param {boolean} [matchStopByGtfsStopId] Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public async searchSearch(searchTerm: string, routeTypes?: Array<number>, latitude?: number, longitude?: number, maxDistance?: number, includeAddresses?: boolean, includeOutlets?: boolean, matchStopBySuburb?: boolean, matchRouteBySuburb?: boolean, matchStopByGtfsStopId?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3SearchResult>> {
        return SearchApiFp(this.configuration).searchSearch(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
