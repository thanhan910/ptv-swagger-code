/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3ErrorResponse } from '../models';
import { V3StoppingPattern } from '../models';
/**
 * PatternsApi - axios parameter creator
 * @export
 */
export const PatternsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View the stopping pattern for a specific trip/service run
         * @param {string} runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {Array<string>} expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {number} [stopId] Filter by stop_id; values returned by Stops API
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format)
         * @param {boolean} [includeSkippedStops] Include any skipped stops in a stopping pattern. Defaults to false.
         * @param {boolean} [includeGeopath] Indicates if geopath data will be returned (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patternsGetPatternByRun: async (runRef: string, routeType: number, expand: Array<string>, stopId?: number, dateUtc?: Date, includeSkippedStops?: boolean, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runRef' is not null or undefined
            if (runRef === null || runRef === undefined) {
                throw new RequiredError('runRef','Required parameter runRef was null or undefined when calling patternsGetPatternByRun.');
            }
            // verify required parameter 'routeType' is not null or undefined
            if (routeType === null || routeType === undefined) {
                throw new RequiredError('routeType','Required parameter routeType was null or undefined when calling patternsGetPatternByRun.');
            }
            // verify required parameter 'expand' is not null or undefined
            if (expand === null || expand === undefined) {
                throw new RequiredError('expand','Required parameter expand was null or undefined when calling patternsGetPatternByRun.');
            }
            const localVarPath = `/v3/pattern/run/{run_ref}/route_type/{route_type}`
                .replace(`{${"run_ref"}}`, encodeURIComponent(String(runRef)))
                .replace(`{${"route_type"}}`, encodeURIComponent(String(routeType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (stopId !== undefined) {
                localVarQueryParameter['stop_id'] = stopId;
            }

            if (dateUtc !== undefined) {
                localVarQueryParameter['date_utc'] = (dateUtc as any instanceof Date) ?
                    (dateUtc as any).toISOString() :
                    dateUtc;
            }

            if (includeSkippedStops !== undefined) {
                localVarQueryParameter['include_skipped_stops'] = includeSkippedStops;
            }

            if (includeGeopath !== undefined) {
                localVarQueryParameter['include_geopath'] = includeGeopath;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatternsApi - functional programming interface
 * @export
 */
export const PatternsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View the stopping pattern for a specific trip/service run
         * @param {string} runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {Array<string>} expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {number} [stopId] Filter by stop_id; values returned by Stops API
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format)
         * @param {boolean} [includeSkippedStops] Include any skipped stops in a stopping pattern. Defaults to false.
         * @param {boolean} [includeGeopath] Indicates if geopath data will be returned (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patternsGetPatternByRun(runRef: string, routeType: number, expand: Array<string>, stopId?: number, dateUtc?: Date, includeSkippedStops?: boolean, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3StoppingPattern>>> {
            const localVarAxiosArgs = await PatternsApiAxiosParamCreator(configuration).patternsGetPatternByRun(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatternsApi - factory interface
 * @export
 */
export const PatternsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary View the stopping pattern for a specific trip/service run
         * @param {string} runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {Array<string>} expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {number} [stopId] Filter by stop_id; values returned by Stops API
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format)
         * @param {boolean} [includeSkippedStops] Include any skipped stops in a stopping pattern. Defaults to false.
         * @param {boolean} [includeGeopath] Indicates if geopath data will be returned (default &#x3D; false)
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patternsGetPatternByRun(runRef: string, routeType: number, expand: Array<string>, stopId?: number, dateUtc?: Date, includeSkippedStops?: boolean, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3StoppingPattern>> {
            return PatternsApiFp(configuration).patternsGetPatternByRun(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatternsApi - object-oriented interface
 * @export
 * @class PatternsApi
 * @extends {BaseAPI}
 */
export class PatternsApi extends BaseAPI {
    /**
     * 
     * @summary View the stopping pattern for a specific trip/service run
     * @param {string} runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
     * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
     * @param {Array<string>} expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
     * @param {number} [stopId] Filter by stop_id; values returned by Stops API
     * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format)
     * @param {boolean} [includeSkippedStops] Include any skipped stops in a stopping pattern. Defaults to false.
     * @param {boolean} [includeGeopath] Indicates if geopath data will be returned (default &#x3D; false)
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatternsApi
     */
    public async patternsGetPatternByRun(runRef: string, routeType: number, expand: Array<string>, stopId?: number, dateUtc?: Date, includeSkippedStops?: boolean, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3StoppingPattern>> {
        return PatternsApiFp(this.configuration).patternsGetPatternByRun(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
