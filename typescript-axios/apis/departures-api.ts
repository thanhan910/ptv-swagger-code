/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { V3DeparturesResponse } from '../models';
import { V3ErrorResponse } from '../models';
/**
 * DeparturesApi - axios parameter creator
 * @export
 */
export const DeparturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View departures for all routes from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {Array<number>} [platformNumbers] Filter by platform number at stop
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departuresGetForStop: async (routeType: number, stopId: number, platformNumbers?: Array<number>, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeType' is not null or undefined
            if (routeType === null || routeType === undefined) {
                throw new RequiredError('routeType','Required parameter routeType was null or undefined when calling departuresGetForStop.');
            }
            // verify required parameter 'stopId' is not null or undefined
            if (stopId === null || stopId === undefined) {
                throw new RequiredError('stopId','Required parameter stopId was null or undefined when calling departuresGetForStop.');
            }
            const localVarPath = `/v3/departures/route_type/{route_type}/stop/{stop_id}`
                .replace(`{${"route_type"}}`, encodeURIComponent(String(routeType)))
                .replace(`{${"stop_id"}}`, encodeURIComponent(String(stopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (platformNumbers) {
                localVarQueryParameter['platform_numbers'] = platformNumbers;
            }

            if (directionId !== undefined) {
                localVarQueryParameter['direction_id'] = directionId;
            }

            if (gtfs !== undefined) {
                localVarQueryParameter['gtfs'] = gtfs;
            }

            if (dateUtc !== undefined) {
                localVarQueryParameter['date_utc'] = (dateUtc as any instanceof Date) ?
                    (dateUtc as any).toISOString() :
                    dateUtc;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (includeCancelled !== undefined) {
                localVarQueryParameter['include_cancelled'] = includeCancelled;
            }

            if (lookBackwards !== undefined) {
                localVarQueryParameter['look_backwards'] = lookBackwards;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (includeGeopath !== undefined) {
                localVarQueryParameter['include_geopath'] = includeGeopath;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View departures for a specific route from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {string} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departuresGetForStopAndRoute: async (routeType: number, stopId: number, routeId: string, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeType' is not null or undefined
            if (routeType === null || routeType === undefined) {
                throw new RequiredError('routeType','Required parameter routeType was null or undefined when calling departuresGetForStopAndRoute.');
            }
            // verify required parameter 'stopId' is not null or undefined
            if (stopId === null || stopId === undefined) {
                throw new RequiredError('stopId','Required parameter stopId was null or undefined when calling departuresGetForStopAndRoute.');
            }
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling departuresGetForStopAndRoute.');
            }
            const localVarPath = `/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}`
                .replace(`{${"route_type"}}`, encodeURIComponent(String(routeType)))
                .replace(`{${"stop_id"}}`, encodeURIComponent(String(stopId)))
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directionId !== undefined) {
                localVarQueryParameter['direction_id'] = directionId;
            }

            if (gtfs !== undefined) {
                localVarQueryParameter['gtfs'] = gtfs;
            }

            if (dateUtc !== undefined) {
                localVarQueryParameter['date_utc'] = (dateUtc as any instanceof Date) ?
                    (dateUtc as any).toISOString() :
                    dateUtc;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (includeCancelled !== undefined) {
                localVarQueryParameter['include_cancelled'] = includeCancelled;
            }

            if (lookBackwards !== undefined) {
                localVarQueryParameter['look_backwards'] = lookBackwards;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (includeGeopath !== undefined) {
                localVarQueryParameter['include_geopath'] = includeGeopath;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (devid !== undefined) {
                localVarQueryParameter['devid'] = devid;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeparturesApi - functional programming interface
 * @export
 */
export const DeparturesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary View departures for all routes from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {Array<number>} [platformNumbers] Filter by platform number at stop
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departuresGetForStop(routeType: number, stopId: number, platformNumbers?: Array<number>, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DeparturesResponse>>> {
            const localVarAxiosArgs = await DeparturesApiAxiosParamCreator(configuration).departuresGetForStop(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View departures for a specific route from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {string} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departuresGetForStopAndRoute(routeType: number, stopId: number, routeId: string, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V3DeparturesResponse>>> {
            const localVarAxiosArgs = await DeparturesApiAxiosParamCreator(configuration).departuresGetForStopAndRoute(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeparturesApi - factory interface
 * @export
 */
export const DeparturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary View departures for all routes from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {Array<number>} [platformNumbers] Filter by platform number at stop
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departuresGetForStop(routeType: number, stopId: number, platformNumbers?: Array<number>, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DeparturesResponse>> {
            return DeparturesApiFp(configuration).departuresGetForStop(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View departures for a specific route from a stop
         * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
         * @param {number} stopId Identifier of stop; values returned by Stops API
         * @param {string} routeId Identifier of route; values returned by Routes API - v3/routes
         * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
         * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
         * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
         * @param {number} [maxResults] Maximum number of results returned
         * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
         * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
         * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
         * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
         * @param {string} [token] Please ignore
         * @param {string} [devid] Your developer id
         * @param {string} [signature] Authentication signature for request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departuresGetForStopAndRoute(routeType: number, stopId: number, routeId: string, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V3DeparturesResponse>> {
            return DeparturesApiFp(configuration).departuresGetForStopAndRoute(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeparturesApi - object-oriented interface
 * @export
 * @class DeparturesApi
 * @extends {BaseAPI}
 */
export class DeparturesApi extends BaseAPI {
    /**
     * 
     * @summary View departures for all routes from a stop
     * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
     * @param {number} stopId Identifier of stop; values returned by Stops API
     * @param {Array<number>} [platformNumbers] Filter by platform number at stop
     * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
     * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
     * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
     * @param {number} [maxResults] Maximum number of results returned
     * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
     * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
     * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
     * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeparturesApi
     */
    public async departuresGetForStop(routeType: number, stopId: number, platformNumbers?: Array<number>, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DeparturesResponse>> {
        return DeparturesApiFp(this.configuration).departuresGetForStop(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View departures for a specific route from a stop
     * @param {number} routeType Number identifying transport mode; values returned via RouteTypes API
     * @param {number} stopId Identifier of stop; values returned by Stops API
     * @param {string} routeId Identifier of route; values returned by Routes API - v3/routes
     * @param {number} [directionId] Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}
     * @param {boolean} [gtfs] Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data
     * @param {Date} [dateUtc] Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time)
     * @param {number} [maxResults] Maximum number of results returned
     * @param {boolean} [includeCancelled] Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only
     * @param {boolean} [lookBackwards] Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0.
     * @param {Array<string>} [expand] List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
     * @param {boolean} [includeGeopath] Indicates if the route geopath should be returned
     * @param {string} [token] Please ignore
     * @param {string} [devid] Your developer id
     * @param {string} [signature] Authentication signature for request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeparturesApi
     */
    public async departuresGetForStopAndRoute(routeType: number, stopId: number, routeId: string, directionId?: number, gtfs?: boolean, dateUtc?: Date, maxResults?: number, includeCancelled?: boolean, lookBackwards?: boolean, expand?: Array<string>, includeGeopath?: boolean, token?: string, devid?: string, signature?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V3DeparturesResponse>> {
        return DeparturesApiFp(this.configuration).departuresGetForStopAndRoute(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, options).then((request) => request(this.axios, this.basePath));
    }
}
