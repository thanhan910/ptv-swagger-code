/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.api;

import io.swagger.model.V3DisruptionModesResponse;
import io.swagger.model.V3DisruptionResponse;
import io.swagger.model.V3DisruptionsResponse;
import io.swagger.model.V3ErrorResponse;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * PTV Timetable API - Version 3
 *
 * <p>The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * API tests for DisruptionsApi 
 */
public class DisruptionsApiTest {


    private DisruptionsApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://timetableapi.ptv.vic.gov.au/", DisruptionsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * View all disruptions for all route types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetAllDisruptionsTest() {
        List<Integer> routeTypes = null;
        List<Integer> disruptionModes = null;
        String disruptionStatus = null;
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionsResponse response = api.disruptionsGetAllDisruptions(routeTypes, disruptionModes, disruptionStatus, token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * View a specific disruption
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetDisruptionByIdTest() {
        Long disruptionId = null;
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionResponse response = api.disruptionsGetDisruptionById(disruptionId, token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Get all disruption modes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetDisruptionModesTest() {
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionModesResponse response = api.disruptionsGetDisruptionModes(token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * View all disruptions for a particular route
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetDisruptionsByRouteTest() {
        Integer routeId = null;
        String disruptionStatus = null;
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionsResponse response = api.disruptionsGetDisruptionsByRoute(routeId, disruptionStatus, token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * View all disruptions for a particular route and stop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetDisruptionsByRouteAndStopTest() {
        Integer routeId = null;
        Integer stopId = null;
        String disruptionStatus = null;
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionsResponse response = api.disruptionsGetDisruptionsByRouteAndStop(routeId, stopId, disruptionStatus, token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * View all disruptions for a particular stop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disruptionsGetDisruptionsByStopTest() {
        Integer stopId = null;
        String disruptionStatus = null;
        String token = null;
        String devid = null;
        String signature = null;
        //V3DisruptionsResponse response = api.disruptionsGetDisruptionsByStop(stopId, disruptionStatus, token, devid, signature);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
