/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import java.util.Date
import io.swagger.client.model.V3.ErrorResponse
import io.swagger.client.model.V3.StopResponse
import io.swagger.client.model.V3.StopsByDistanceResponse
import io.swagger.client.model.V3.StopsOnRouteResponse
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class StopsApi(
  val defBasePath: String = "https://timetableapi.ptv.vic.gov.au/",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new StopsApiAsyncHelper(client, config)

  /**
   * View facilities at a specific stop (Metro and V/Line stations only)
   * 
   *
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
   * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
   * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
   * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
   * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
   * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
   * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return V3.StopResponse
   */
  def stopsStopDetails(stopId: Integer, routeType: Integer, stopLocation: Option[Boolean] = None, stopAmenities: Option[Boolean] = None, stopAccessibility: Option[Boolean] = None, stopContact: Option[Boolean] = None, stopTicket: Option[Boolean] = None, gtfs: Option[Boolean] = None, stopStaffing: Option[Boolean] = None, stopDisruptions: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Option[V3.StopResponse] = {
    val await = Try(Await.result(stopsStopDetailsAsync(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View facilities at a specific stop (Metro and V/Line stations only) asynchronously
   * 
   *
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
   * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
   * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
   * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
   * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
   * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
   * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return Future(V3.StopResponse)
   */
  def stopsStopDetailsAsync(stopId: Integer, routeType: Integer, stopLocation: Option[Boolean] = None, stopAmenities: Option[Boolean] = None, stopAccessibility: Option[Boolean] = None, stopContact: Option[Boolean] = None, stopTicket: Option[Boolean] = None, gtfs: Option[Boolean] = None, stopStaffing: Option[Boolean] = None, stopDisruptions: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Future[V3.StopResponse] = {
      helper.stopsStopDetails(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature)
  }

  /**
   * View all stops near a specific location
   * 
   *
   * @param latitude Geographic coordinate of latitude 
   * @param longitude Geographic coordinate of longitude 
   * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
   * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
   * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return V3.StopsByDistanceResponse
   */
  def stopsStopsByGeolocation(latitude: Float, longitude: Float, routeTypes: Option[List[Integer]] = None, maxResults: Option[Integer] = None, maxDistance: Option[Double] = None, stopDisruptions: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Option[V3.StopsByDistanceResponse] = {
    val await = Try(Await.result(stopsStopsByGeolocationAsync(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View all stops near a specific location asynchronously
   * 
   *
   * @param latitude Geographic coordinate of latitude 
   * @param longitude Geographic coordinate of longitude 
   * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
   * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
   * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return Future(V3.StopsByDistanceResponse)
   */
  def stopsStopsByGeolocationAsync(latitude: Float, longitude: Float, routeTypes: Option[List[Integer]] = None, maxResults: Option[Integer] = None, maxDistance: Option[Double] = None, stopDisruptions: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Future[V3.StopsByDistanceResponse] = {
      helper.stopsStopsByGeolocation(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature)
  }

  /**
   * View all stops on a specific route
   * 
   *
   * @param routeId Identifier of route; values returned by Routes API - v3/routes 
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
   * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return V3.StopsOnRouteResponse
   */
  def stopsStopsForRoute(routeId: Integer, routeType: Integer, directionId: Option[Integer] = None, stopDisruptions: Option[Boolean] = None, includeGeopath: Option[Boolean] = None, geopathUtc: Option[Date] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Option[V3.StopsOnRouteResponse] = {
    val await = Try(Await.result(stopsStopsForRouteAsync(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View all stops on a specific route asynchronously
   * 
   *
   * @param routeId Identifier of route; values returned by Routes API - v3/routes 
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
   * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
   * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
   * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return Future(V3.StopsOnRouteResponse)
   */
  def stopsStopsForRouteAsync(routeId: Integer, routeType: Integer, directionId: Option[Integer] = None, stopDisruptions: Option[Boolean] = None, includeGeopath: Option[Boolean] = None, geopathUtc: Option[Date] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Future[V3.StopsOnRouteResponse] = {
      helper.stopsStopsForRoute(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature)
  }

}

class StopsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def stopsStopDetails(stopId: Integer,
    routeType: Integer,
    stopLocation: Option[Boolean] = None,
    stopAmenities: Option[Boolean] = None,
    stopAccessibility: Option[Boolean] = None,
    stopContact: Option[Boolean] = None,
    stopTicket: Option[Boolean] = None,
    gtfs: Option[Boolean] = None,
    stopStaffing: Option[Boolean] = None,
    stopDisruptions: Option[Boolean] = None,
    token: Option[String] = None,
    devid: Option[String] = None,
    signature: Option[String] = None
    )(implicit reader: ClientResponseReader[V3.StopResponse]): Future[V3.StopResponse] = {
    // create path and map variables
    val path = (addFmt("/v3/stops/{stop_id}/route_type/{route_type}")
      replaceAll("\\{" + "stop_id" + "\\}", stopId.toString)
      replaceAll("\\{" + "route_type" + "\\}", routeType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    stopLocation match {
      case Some(param) => queryParams += "stop_location" -> param.toString
      case _ => queryParams
    }
    stopAmenities match {
      case Some(param) => queryParams += "stop_amenities" -> param.toString
      case _ => queryParams
    }
    stopAccessibility match {
      case Some(param) => queryParams += "stop_accessibility" -> param.toString
      case _ => queryParams
    }
    stopContact match {
      case Some(param) => queryParams += "stop_contact" -> param.toString
      case _ => queryParams
    }
    stopTicket match {
      case Some(param) => queryParams += "stop_ticket" -> param.toString
      case _ => queryParams
    }
    gtfs match {
      case Some(param) => queryParams += "gtfs" -> param.toString
      case _ => queryParams
    }
    stopStaffing match {
      case Some(param) => queryParams += "stop_staffing" -> param.toString
      case _ => queryParams
    }
    stopDisruptions match {
      case Some(param) => queryParams += "stop_disruptions" -> param.toString
      case _ => queryParams
    }
    token match {
      case Some(param) => queryParams += "token" -> param.toString
      case _ => queryParams
    }
    devid match {
      case Some(param) => queryParams += "devid" -> param.toString
      case _ => queryParams
    }
    signature match {
      case Some(param) => queryParams += "signature" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def stopsStopsByGeolocation(latitude: Float,
    longitude: Float,
    routeTypes: Option[List[Integer]] = None,
    maxResults: Option[Integer] = None,
    maxDistance: Option[Double] = None,
    stopDisruptions: Option[Boolean] = None,
    token: Option[String] = None,
    devid: Option[String] = None,
    signature: Option[String] = None
    )(implicit reader: ClientResponseReader[V3.StopsByDistanceResponse]): Future[V3.StopsByDistanceResponse] = {
    // create path and map variables
    val path = (addFmt("/v3/stops/location/{latitude},{longitude}")
      replaceAll("\\{" + "latitude" + "\\}", latitude.toString)
      replaceAll("\\{" + "longitude" + "\\}", longitude.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    routeTypes match {
      case Some(param) => queryParams += "route_types" -> param.toString
      case _ => queryParams
    }
    maxResults match {
      case Some(param) => queryParams += "max_results" -> param.toString
      case _ => queryParams
    }
    maxDistance match {
      case Some(param) => queryParams += "max_distance" -> param.toString
      case _ => queryParams
    }
    stopDisruptions match {
      case Some(param) => queryParams += "stop_disruptions" -> param.toString
      case _ => queryParams
    }
    token match {
      case Some(param) => queryParams += "token" -> param.toString
      case _ => queryParams
    }
    devid match {
      case Some(param) => queryParams += "devid" -> param.toString
      case _ => queryParams
    }
    signature match {
      case Some(param) => queryParams += "signature" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def stopsStopsForRoute(routeId: Integer,
    routeType: Integer,
    directionId: Option[Integer] = None,
    stopDisruptions: Option[Boolean] = None,
    includeGeopath: Option[Boolean] = None,
    geopathUtc: Option[Date] = None,
    token: Option[String] = None,
    devid: Option[String] = None,
    signature: Option[String] = None
    )(implicit reader: ClientResponseReader[V3.StopsOnRouteResponse]): Future[V3.StopsOnRouteResponse] = {
    // create path and map variables
    val path = (addFmt("/v3/stops/route/{route_id}/route_type/{route_type}")
      replaceAll("\\{" + "route_id" + "\\}", routeId.toString)
      replaceAll("\\{" + "route_type" + "\\}", routeType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    directionId match {
      case Some(param) => queryParams += "direction_id" -> param.toString
      case _ => queryParams
    }
    stopDisruptions match {
      case Some(param) => queryParams += "stop_disruptions" -> param.toString
      case _ => queryParams
    }
    includeGeopath match {
      case Some(param) => queryParams += "include_geopath" -> param.toString
      case _ => queryParams
    }
    geopathUtc match {
      case Some(param) => queryParams += "geopath_utc" -> param.toString
      case _ => queryParams
    }
    token match {
      case Some(param) => queryParams += "token" -> param.toString
      case _ => queryParams
    }
    devid match {
      case Some(param) => queryParams += "devid" -> param.toString
      case _ => queryParams
    }
    signature match {
      case Some(param) => queryParams += "signature" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
