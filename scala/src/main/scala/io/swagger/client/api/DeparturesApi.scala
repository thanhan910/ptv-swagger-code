/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import java.util.Date
import io.swagger.client.model.V3.DeparturesResponse
import io.swagger.client.model.V3.ErrorResponse
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DeparturesApi(
  val defBasePath: String = "https://timetableapi.ptv.vic.gov.au/",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DeparturesApiAsyncHelper(client, config)

  /**
   * View departures for all routes from a stop
   * 
   *
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param platformNumbers Filter by platform number at stop (optional)
   * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
   * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
   * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
   * @param maxResults Maximum number of results returned (optional)
   * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
   * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
   * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
   * @param includeGeopath Indicates if the route geopath should be returned (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return V3.DeparturesResponse
   */
  def departuresGetForStop(routeType: Integer, stopId: Integer, platformNumbers: Option[List[Integer]] = None, directionId: Option[Integer] = None, gtfs: Option[Boolean] = None, dateUtc: Option[Date] = None, maxResults: Option[Integer] = None, includeCancelled: Option[Boolean] = None, lookBackwards: Option[Boolean] = None, expand: Option[List[String]] = None, includeGeopath: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Option[V3.DeparturesResponse] = {
    val await = Try(Await.result(departuresGetForStopAsync(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View departures for all routes from a stop asynchronously
   * 
   *
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param platformNumbers Filter by platform number at stop (optional)
   * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
   * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
   * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
   * @param maxResults Maximum number of results returned (optional)
   * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
   * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
   * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
   * @param includeGeopath Indicates if the route geopath should be returned (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return Future(V3.DeparturesResponse)
   */
  def departuresGetForStopAsync(routeType: Integer, stopId: Integer, platformNumbers: Option[List[Integer]] = None, directionId: Option[Integer] = None, gtfs: Option[Boolean] = None, dateUtc: Option[Date] = None, maxResults: Option[Integer] = None, includeCancelled: Option[Boolean] = None, lookBackwards: Option[Boolean] = None, expand: Option[List[String]] = None, includeGeopath: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Future[V3.DeparturesResponse] = {
      helper.departuresGetForStop(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature)
  }

  /**
   * View departures for a specific route from a stop
   * 
   *
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param routeId Identifier of route; values returned by Routes API - v3/routes 
   * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
   * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
   * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
   * @param maxResults Maximum number of results returned (optional)
   * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
   * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
   * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
   * @param includeGeopath Indicates if the route geopath should be returned (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return V3.DeparturesResponse
   */
  def departuresGetForStopAndRoute(routeType: Integer, stopId: Integer, routeId: String, directionId: Option[Integer] = None, gtfs: Option[Boolean] = None, dateUtc: Option[Date] = None, maxResults: Option[Integer] = None, includeCancelled: Option[Boolean] = None, lookBackwards: Option[Boolean] = None, expand: Option[List[String]] = None, includeGeopath: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Option[V3.DeparturesResponse] = {
    val await = Try(Await.result(departuresGetForStopAndRouteAsync(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * View departures for a specific route from a stop asynchronously
   * 
   *
   * @param routeType Number identifying transport mode; values returned via RouteTypes API 
   * @param stopId Identifier of stop; values returned by Stops API 
   * @param routeId Identifier of route; values returned by Routes API - v3/routes 
   * @param directionId Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)
   * @param gtfs Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)
   * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)
   * @param maxResults Maximum number of results returned (optional)
   * @param includeCancelled Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)
   * @param lookBackwards Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)
   * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)
   * @param includeGeopath Indicates if the route geopath should be returned (optional)
   * @param token Please ignore (optional)
   * @param devid Your developer id (optional)
   * @param signature Authentication signature for request (optional)
   * @return Future(V3.DeparturesResponse)
   */
  def departuresGetForStopAndRouteAsync(routeType: Integer, stopId: Integer, routeId: String, directionId: Option[Integer] = None, gtfs: Option[Boolean] = None, dateUtc: Option[Date] = None, maxResults: Option[Integer] = None, includeCancelled: Option[Boolean] = None, lookBackwards: Option[Boolean] = None, expand: Option[List[String]] = None, includeGeopath: Option[Boolean] = None, token: Option[String] = None, devid: Option[String] = None, signature: Option[String] = None): Future[V3.DeparturesResponse] = {
      helper.departuresGetForStopAndRoute(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature)
  }

}

class DeparturesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def departuresGetForStop(routeType: Integer,
    stopId: Integer,
    platformNumbers: Option[List[Integer]] = None,
    directionId: Option[Integer] = None,
    gtfs: Option[Boolean] = None,
    dateUtc: Option[Date] = None,
    maxResults: Option[Integer] = None,
    includeCancelled: Option[Boolean] = None,
    lookBackwards: Option[Boolean] = None,
    expand: Option[List[String]] = None,
    includeGeopath: Option[Boolean] = None,
    token: Option[String] = None,
    devid: Option[String] = None,
    signature: Option[String] = None
    )(implicit reader: ClientResponseReader[V3.DeparturesResponse]): Future[V3.DeparturesResponse] = {
    // create path and map variables
    val path = (addFmt("/v3/departures/route_type/{route_type}/stop/{stop_id}")
      replaceAll("\\{" + "route_type" + "\\}", routeType.toString)
      replaceAll("\\{" + "stop_id" + "\\}", stopId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    platformNumbers match {
      case Some(param) => queryParams += "platform_numbers" -> param.toString
      case _ => queryParams
    }
    directionId match {
      case Some(param) => queryParams += "direction_id" -> param.toString
      case _ => queryParams
    }
    gtfs match {
      case Some(param) => queryParams += "gtfs" -> param.toString
      case _ => queryParams
    }
    dateUtc match {
      case Some(param) => queryParams += "date_utc" -> param.toString
      case _ => queryParams
    }
    maxResults match {
      case Some(param) => queryParams += "max_results" -> param.toString
      case _ => queryParams
    }
    includeCancelled match {
      case Some(param) => queryParams += "include_cancelled" -> param.toString
      case _ => queryParams
    }
    lookBackwards match {
      case Some(param) => queryParams += "look_backwards" -> param.toString
      case _ => queryParams
    }
    expand match {
      case Some(param) => queryParams += "expand" -> param.toString
      case _ => queryParams
    }
    includeGeopath match {
      case Some(param) => queryParams += "include_geopath" -> param.toString
      case _ => queryParams
    }
    token match {
      case Some(param) => queryParams += "token" -> param.toString
      case _ => queryParams
    }
    devid match {
      case Some(param) => queryParams += "devid" -> param.toString
      case _ => queryParams
    }
    signature match {
      case Some(param) => queryParams += "signature" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def departuresGetForStopAndRoute(routeType: Integer,
    stopId: Integer,
    routeId: String,
    directionId: Option[Integer] = None,
    gtfs: Option[Boolean] = None,
    dateUtc: Option[Date] = None,
    maxResults: Option[Integer] = None,
    includeCancelled: Option[Boolean] = None,
    lookBackwards: Option[Boolean] = None,
    expand: Option[List[String]] = None,
    includeGeopath: Option[Boolean] = None,
    token: Option[String] = None,
    devid: Option[String] = None,
    signature: Option[String] = None
    )(implicit reader: ClientResponseReader[V3.DeparturesResponse]): Future[V3.DeparturesResponse] = {
    // create path and map variables
    val path = (addFmt("/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}")
      replaceAll("\\{" + "route_type" + "\\}", routeType.toString)
      replaceAll("\\{" + "stop_id" + "\\}", stopId.toString)
      replaceAll("\\{" + "route_id" + "\\}", routeId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (routeId == null) throw new Exception("Missing required parameter 'routeId' when calling DeparturesApi->departuresGetForStopAndRoute")

    directionId match {
      case Some(param) => queryParams += "direction_id" -> param.toString
      case _ => queryParams
    }
    gtfs match {
      case Some(param) => queryParams += "gtfs" -> param.toString
      case _ => queryParams
    }
    dateUtc match {
      case Some(param) => queryParams += "date_utc" -> param.toString
      case _ => queryParams
    }
    maxResults match {
      case Some(param) => queryParams += "max_results" -> param.toString
      case _ => queryParams
    }
    includeCancelled match {
      case Some(param) => queryParams += "include_cancelled" -> param.toString
      case _ => queryParams
    }
    lookBackwards match {
      case Some(param) => queryParams += "look_backwards" -> param.toString
      case _ => queryParams
    }
    expand match {
      case Some(param) => queryParams += "expand" -> param.toString
      case _ => queryParams
    }
    includeGeopath match {
      case Some(param) => queryParams += "include_geopath" -> param.toString
      case _ => queryParams
    }
    token match {
      case Some(param) => queryParams += "token" -> param.toString
      case _ => queryParams
    }
    devid match {
      case Some(param) => queryParams += "devid" -> param.toString
      case _ => queryParams
    }
    signature match {
      case Some(param) => queryParams += "signature" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
