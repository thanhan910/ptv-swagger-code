=begin
#PTV Timetable API - Version 3

#The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.52
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DisruptionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DisruptionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DisruptionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DisruptionsApi' do
    it 'should create an instance of DisruptionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DisruptionsApi)
    end
  end

  # unit tests for disruptions_get_all_disruptions
  # View all disruptions for all route types
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Integer>] :route_types Filter by route_type; values returned via RouteTypes API
  # @option opts [Array<Integer>] :disruption_modes Filter by disruption_mode; values returned via v3/disruptions/modes API
  # @option opts [String] :disruption_status Filter by status of disruption
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionsResponse]
  describe 'disruptions_get_all_disruptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disruptions_get_disruption_by_id
  # View a specific disruption
  # @param disruption_id Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionResponse]
  describe 'disruptions_get_disruption_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disruptions_get_disruption_modes
  # Get all disruption modes
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionModesResponse]
  describe 'disruptions_get_disruption_modes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disruptions_get_disruptions_by_route
  # View all disruptions for a particular route
  # @param route_id Identifier of route; values returned by Routes API - v3/routes
  # @param [Hash] opts the optional parameters
  # @option opts [String] :disruption_status Filter by status of disruption
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionsResponse]
  describe 'disruptions_get_disruptions_by_route test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disruptions_get_disruptions_by_route_and_stop
  # View all disruptions for a particular route and stop
  # @param route_id Identifier of route; values returned by Routes API - v3/routes
  # @param stop_id Identifier of stop; values returned by Stops API - v3/stops
  # @param [Hash] opts the optional parameters
  # @option opts [String] :disruption_status Filter by status of disruption
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionsResponse]
  describe 'disruptions_get_disruptions_by_route_and_stop test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disruptions_get_disruptions_by_stop
  # View all disruptions for a particular stop
  # @param stop_id Identifier of stop; values returned by Stops API - v3/stops
  # @param [Hash] opts the optional parameters
  # @option opts [String] :disruption_status Filter by status of disruption
  # @option opts [String] :token Please ignore
  # @option opts [String] :devid Your developer id
  # @option opts [String] :signature Authentication signature for request
  # @return [V3DisruptionsResponse]
  describe 'disruptions_get_disruptions_by_stop test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
