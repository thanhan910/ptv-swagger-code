=begin
#PTV Timetable API - Version 3

#The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.52
=end

module SwaggerClient
  class FareEstimateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Estimate a fare by zone
    # @param min_zone Minimum Zone travelled through ie. 1
    # @param max_zone Maximum Zone travelled through id. 6
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :journey_touch_on_utc JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
    # @option opts [DateTime] :journey_touch_off_utc JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
    # @option opts [BOOLEAN] :is_journey_in_free_tram_zone 
    # @option opts [Array<Integer>] :travelled_route_types 
    # @option opts [String] :token Please ignore
    # @option opts [String] :devid Your developer id
    # @option opts [String] :signature Authentication signature for request
    # @return [V3FareEstimateResponse]
    def fare_estimate_get_fare_estimate_by_zone(min_zone, max_zone, opts = {})
      data, _status_code, _headers = fare_estimate_get_fare_estimate_by_zone_with_http_info(min_zone, max_zone, opts)
      data
    end

    # Estimate a fare by zone
    # @param min_zone Minimum Zone travelled through ie. 1
    # @param max_zone Maximum Zone travelled through id. 6
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :journey_touch_on_utc JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
    # @option opts [DateTime] :journey_touch_off_utc JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
    # @option opts [BOOLEAN] :is_journey_in_free_tram_zone 
    # @option opts [Array<Integer>] :travelled_route_types 
    # @option opts [String] :token Please ignore
    # @option opts [String] :devid Your developer id
    # @option opts [String] :signature Authentication signature for request
    # @return [Array<(V3FareEstimateResponse, Integer, Hash)>] V3FareEstimateResponse data, response status code and response headers
    def fare_estimate_get_fare_estimate_by_zone_with_http_info(min_zone, max_zone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FareEstimateApi.fare_estimate_get_fare_estimate_by_zone ...'
      end
      # verify the required parameter 'min_zone' is set
      if @api_client.config.client_side_validation && min_zone.nil?
        fail ArgumentError, "Missing the required parameter 'min_zone' when calling FareEstimateApi.fare_estimate_get_fare_estimate_by_zone"
      end
      # verify the required parameter 'max_zone' is set
      if @api_client.config.client_side_validation && max_zone.nil?
        fail ArgumentError, "Missing the required parameter 'max_zone' when calling FareEstimateApi.fare_estimate_get_fare_estimate_by_zone"
      end
      if @api_client.config.client_side_validation && opts[:'travelled_route_types'] && !opts[:'travelled_route_types'].all? { |item| ['0', '1', '2', '3', '4'].include?(item) }
        fail ArgumentError, 'invalid value for "travelled_route_types", must include one of 0, 1, 2, 3, 4'
      end
      # resource path
      local_var_path = '/v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}'.sub('{' + 'minZone' + '}', min_zone.to_s).sub('{' + 'maxZone' + '}', max_zone.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'journey_touch_on_utc'] = opts[:'journey_touch_on_utc'] if !opts[:'journey_touch_on_utc'].nil?
      query_params[:'journey_touch_off_utc'] = opts[:'journey_touch_off_utc'] if !opts[:'journey_touch_off_utc'].nil?
      query_params[:'is_journey_in_free_tram_zone'] = opts[:'is_journey_in_free_tram_zone'] if !opts[:'is_journey_in_free_tram_zone'].nil?
      query_params[:'travelled_route_types'] = @api_client.build_collection_param(opts[:'travelled_route_types'], :multi) if !opts[:'travelled_route_types'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'devid'] = opts[:'devid'] if !opts[:'devid'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'V3FareEstimateResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FareEstimateApi#fare_estimate_get_fare_estimate_by_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
