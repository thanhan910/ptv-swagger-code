=begin
#PTV Timetable API - Version 3

#The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.52
=end

module SwaggerClient
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # View stops, routes and myki ticket outlets that match the search term
    # @param search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
    # @option opts [Float] :latitude Filter by geographic coordinate of latitude
    # @option opts [Float] :longitude Filter by geographic coordinate of longitude
    # @option opts [Float] :max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
    # @option opts [BOOLEAN] :include_addresses Placeholder for future development; currently unavailable
    # @option opts [BOOLEAN] :include_outlets Indicates if outlets will be returned in response (default &#x3D; true)
    # @option opts [BOOLEAN] :match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
    # @option opts [BOOLEAN] :match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
    # @option opts [BOOLEAN] :match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
    # @option opts [String] :token Please ignore
    # @option opts [String] :devid Your developer id
    # @option opts [String] :signature Authentication signature for request
    # @return [V3SearchResult]
    def search_search(search_term, opts = {})
      data, _status_code, _headers = search_search_with_http_info(search_term, opts)
      data
    end

    # View stops, routes and myki ticket outlets that match the search term
    # @param search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
    # @option opts [Float] :latitude Filter by geographic coordinate of latitude
    # @option opts [Float] :longitude Filter by geographic coordinate of longitude
    # @option opts [Float] :max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
    # @option opts [BOOLEAN] :include_addresses Placeholder for future development; currently unavailable
    # @option opts [BOOLEAN] :include_outlets Indicates if outlets will be returned in response (default &#x3D; true)
    # @option opts [BOOLEAN] :match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
    # @option opts [BOOLEAN] :match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
    # @option opts [BOOLEAN] :match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
    # @option opts [String] :token Please ignore
    # @option opts [String] :devid Your developer id
    # @option opts [String] :signature Authentication signature for request
    # @return [Array<(V3SearchResult, Integer, Hash)>] V3SearchResult data, response status code and response headers
    def search_search_with_http_info(search_term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search_search ...'
      end
      # verify the required parameter 'search_term' is set
      if @api_client.config.client_side_validation && search_term.nil?
        fail ArgumentError, "Missing the required parameter 'search_term' when calling SearchApi.search_search"
      end
      if @api_client.config.client_side_validation && opts[:'route_types'] && !opts[:'route_types'].all? { |item| ['0', '1', '2', '3', '4'].include?(item) }
        fail ArgumentError, 'invalid value for "route_types", must include one of 0, 1, 2, 3, 4'
      end
      # resource path
      local_var_path = '/v3/search/{search_term}'.sub('{' + 'search_term' + '}', search_term.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'route_types'] = @api_client.build_collection_param(opts[:'route_types'], :multi) if !opts[:'route_types'].nil?
      query_params[:'latitude'] = opts[:'latitude'] if !opts[:'latitude'].nil?
      query_params[:'longitude'] = opts[:'longitude'] if !opts[:'longitude'].nil?
      query_params[:'max_distance'] = opts[:'max_distance'] if !opts[:'max_distance'].nil?
      query_params[:'include_addresses'] = opts[:'include_addresses'] if !opts[:'include_addresses'].nil?
      query_params[:'include_outlets'] = opts[:'include_outlets'] if !opts[:'include_outlets'].nil?
      query_params[:'match_stop_by_suburb'] = opts[:'match_stop_by_suburb'] if !opts[:'match_stop_by_suburb'].nil?
      query_params[:'match_route_by_suburb'] = opts[:'match_route_by_suburb'] if !opts[:'match_route_by_suburb'].nil?
      query_params[:'match_stop_by_gtfs_stop_id'] = opts[:'match_stop_by_gtfs_stop_id'] if !opts[:'match_stop_by_gtfs_stop_id'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'devid'] = opts[:'devid'] if !opts[:'devid'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'V3SearchResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
