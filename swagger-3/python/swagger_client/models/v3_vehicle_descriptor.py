# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3VehicleDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'id': 'str',
        'low_floor': 'bool',
        'air_conditioned': 'bool',
        'description': 'str',
        'supplier': 'str',
        'length': 'str'
    }

    attribute_map = {
        'operator': 'operator',
        'id': 'id',
        'low_floor': 'low_floor',
        'air_conditioned': 'air_conditioned',
        'description': 'description',
        'supplier': 'supplier',
        'length': 'length'
    }

    def __init__(self, operator=None, id=None, low_floor=None, air_conditioned=None, description=None, supplier=None, length=None):  # noqa: E501
        """V3VehicleDescriptor - a model defined in Swagger"""  # noqa: E501
        self._operator = None
        self._id = None
        self._low_floor = None
        self._air_conditioned = None
        self._description = None
        self._supplier = None
        self._length = None
        self.discriminator = None
        if operator is not None:
            self.operator = operator
        if id is not None:
            self.id = id
        if low_floor is not None:
            self.low_floor = low_floor
        if air_conditioned is not None:
            self.air_conditioned = air_conditioned
        if description is not None:
            self.description = description
        if supplier is not None:
            self.supplier = supplier
        if length is not None:
            self.length = length

    @property
    def operator(self):
        """Gets the operator of this V3VehicleDescriptor.  # noqa: E501

        Operator name of the vehicle such as \"Metro Trains Melbourne\", \"Yarra Trams\", \"Ventura Bus Line\", \"CDC\" or \"Sita Bus Lines\" . May be null/empty.  Only available for train, tram, v/line and some bus runs.  # noqa: E501

        :return: The operator of this V3VehicleDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this V3VehicleDescriptor.

        Operator name of the vehicle such as \"Metro Trains Melbourne\", \"Yarra Trams\", \"Ventura Bus Line\", \"CDC\" or \"Sita Bus Lines\" . May be null/empty.  Only available for train, tram, v/line and some bus runs.  # noqa: E501

        :param operator: The operator of this V3VehicleDescriptor.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def id(self):
        """Gets the id of this V3VehicleDescriptor.  # noqa: E501

        Operator identifier of the vehicle such as \"26094\". May be null/empty. Only available for some tram and bus runs.  # noqa: E501

        :return: The id of this V3VehicleDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V3VehicleDescriptor.

        Operator identifier of the vehicle such as \"26094\". May be null/empty. Only available for some tram and bus runs.  # noqa: E501

        :param id: The id of this V3VehicleDescriptor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def low_floor(self):
        """Gets the low_floor of this V3VehicleDescriptor.  # noqa: E501

        Indicator if vehicle has a low floor. May be null. Only available for some tram runs.  # noqa: E501

        :return: The low_floor of this V3VehicleDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._low_floor

    @low_floor.setter
    def low_floor(self, low_floor):
        """Sets the low_floor of this V3VehicleDescriptor.

        Indicator if vehicle has a low floor. May be null. Only available for some tram runs.  # noqa: E501

        :param low_floor: The low_floor of this V3VehicleDescriptor.  # noqa: E501
        :type: bool
        """

        self._low_floor = low_floor

    @property
    def air_conditioned(self):
        """Gets the air_conditioned of this V3VehicleDescriptor.  # noqa: E501

        Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.  # noqa: E501

        :return: The air_conditioned of this V3VehicleDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._air_conditioned

    @air_conditioned.setter
    def air_conditioned(self, air_conditioned):
        """Sets the air_conditioned of this V3VehicleDescriptor.

        Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.  # noqa: E501

        :param air_conditioned: The air_conditioned of this V3VehicleDescriptor.  # noqa: E501
        :type: bool
        """

        self._air_conditioned = air_conditioned

    @property
    def description(self):
        """Gets the description of this V3VehicleDescriptor.  # noqa: E501

        Vehicle description such as \"6 Car Comeng\", \"6 Car Xtrapolis\", \"3 Car Comeng\", \"6 Car Siemens\", \"3 Car Siemens\". May be null/empty.  Only available for some metropolitan train runs.  # noqa: E501

        :return: The description of this V3VehicleDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V3VehicleDescriptor.

        Vehicle description such as \"6 Car Comeng\", \"6 Car Xtrapolis\", \"3 Car Comeng\", \"6 Car Siemens\", \"3 Car Siemens\". May be null/empty.  Only available for some metropolitan train runs.  # noqa: E501

        :param description: The description of this V3VehicleDescriptor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def supplier(self):
        """Gets the supplier of this V3VehicleDescriptor.  # noqa: E501

        Supplier of vehicle descriptor data.  # noqa: E501

        :return: The supplier of this V3VehicleDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this V3VehicleDescriptor.

        Supplier of vehicle descriptor data.  # noqa: E501

        :param supplier: The supplier of this V3VehicleDescriptor.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def length(self):
        """Gets the length of this V3VehicleDescriptor.  # noqa: E501

        The length of the vehicle. Applies to CIS - Metro Trains  # noqa: E501

        :return: The length of this V3VehicleDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this V3VehicleDescriptor.

        The length of the vehicle. Applies to CIS - Metro Trains  # noqa: E501

        :param length: The length of this V3VehicleDescriptor.  # noqa: E501
        :type: str
        """

        self._length = length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3VehicleDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3VehicleDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
