# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3StopDepartureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route_type': 'int',
        'stop_id': 'int',
        'max_results': 'int',
        'gtfs': 'bool',
        'route_directions': 'list[V3StopDepartureRequestRouteDirection]'
    }

    attribute_map = {
        'route_type': 'route_type',
        'stop_id': 'stop_id',
        'max_results': 'max_results',
        'gtfs': 'gtfs',
        'route_directions': 'route_directions'
    }

    def __init__(self, route_type=None, stop_id=None, max_results=None, gtfs=None, route_directions=None):  # noqa: E501
        """V3StopDepartureRequest - a model defined in Swagger"""  # noqa: E501
        self._route_type = None
        self._stop_id = None
        self._max_results = None
        self._gtfs = None
        self._route_directions = None
        self.discriminator = None
        if route_type is not None:
            self.route_type = route_type
        if stop_id is not None:
            self.stop_id = stop_id
        if max_results is not None:
            self.max_results = max_results
        if gtfs is not None:
            self.gtfs = gtfs
        self.route_directions = route_directions

    @property
    def route_type(self):
        """Gets the route_type of this V3StopDepartureRequest.  # noqa: E501

        Number identifying transport mode; values returned via RouteTypes API  # noqa: E501

        :return: The route_type of this V3StopDepartureRequest.  # noqa: E501
        :rtype: int
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this V3StopDepartureRequest.

        Number identifying transport mode; values returned via RouteTypes API  # noqa: E501

        :param route_type: The route_type of this V3StopDepartureRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"  # noqa: E501
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def stop_id(self):
        """Gets the stop_id of this V3StopDepartureRequest.  # noqa: E501

        Identifier of stop; values returned by Stops API  # noqa: E501

        :return: The stop_id of this V3StopDepartureRequest.  # noqa: E501
        :rtype: int
        """
        return self._stop_id

    @stop_id.setter
    def stop_id(self, stop_id):
        """Sets the stop_id of this V3StopDepartureRequest.

        Identifier of stop; values returned by Stops API  # noqa: E501

        :param stop_id: The stop_id of this V3StopDepartureRequest.  # noqa: E501
        :type: int
        """

        self._stop_id = stop_id

    @property
    def max_results(self):
        """Gets the max_results of this V3StopDepartureRequest.  # noqa: E501

        Maximum number of results returned  # noqa: E501

        :return: The max_results of this V3StopDepartureRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this V3StopDepartureRequest.

        Maximum number of results returned  # noqa: E501

        :param max_results: The max_results of this V3StopDepartureRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def gtfs(self):
        """Gets the gtfs of this V3StopDepartureRequest.  # noqa: E501

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data and route_directions[x].route_id parameters will accept route_gtfs_id data  # noqa: E501

        :return: The gtfs of this V3StopDepartureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._gtfs

    @gtfs.setter
    def gtfs(self, gtfs):
        """Sets the gtfs of this V3StopDepartureRequest.

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data and route_directions[x].route_id parameters will accept route_gtfs_id data  # noqa: E501

        :param gtfs: The gtfs of this V3StopDepartureRequest.  # noqa: E501
        :type: bool
        """

        self._gtfs = gtfs

    @property
    def route_directions(self):
        """Gets the route_directions of this V3StopDepartureRequest.  # noqa: E501

        The route directions to find departures for at this stop.  # noqa: E501

        :return: The route_directions of this V3StopDepartureRequest.  # noqa: E501
        :rtype: list[V3StopDepartureRequestRouteDirection]
        """
        return self._route_directions

    @route_directions.setter
    def route_directions(self, route_directions):
        """Sets the route_directions of this V3StopDepartureRequest.

        The route directions to find departures for at this stop.  # noqa: E501

        :param route_directions: The route_directions of this V3StopDepartureRequest.  # noqa: E501
        :type: list[V3StopDepartureRequestRouteDirection]
        """
        if route_directions is None:
            raise ValueError("Invalid value for `route_directions`, must not be `None`")  # noqa: E501

        self._route_directions = route_directions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3StopDepartureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3StopDepartureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
