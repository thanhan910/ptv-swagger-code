# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3Disruptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general': 'list[V3Disruption]',
        'metro_train': 'list[V3Disruption]',
        'metro_tram': 'list[V3Disruption]',
        'metro_bus': 'list[V3Disruption]',
        'regional_train': 'list[V3Disruption]',
        'regional_coach': 'list[V3Disruption]',
        'regional_bus': 'list[V3Disruption]',
        'school_bus': 'list[V3Disruption]',
        'telebus': 'list[V3Disruption]',
        'night_bus': 'list[V3Disruption]',
        'ferry': 'list[V3Disruption]',
        'interstate_train': 'list[V3Disruption]',
        'skybus': 'list[V3Disruption]',
        'taxi': 'list[V3Disruption]'
    }

    attribute_map = {
        'general': 'general',
        'metro_train': 'metro_train',
        'metro_tram': 'metro_tram',
        'metro_bus': 'metro_bus',
        'regional_train': 'regional_train',
        'regional_coach': 'regional_coach',
        'regional_bus': 'regional_bus',
        'school_bus': 'school_bus',
        'telebus': 'telebus',
        'night_bus': 'night_bus',
        'ferry': 'ferry',
        'interstate_train': 'interstate_train',
        'skybus': 'skybus',
        'taxi': 'taxi'
    }

    def __init__(self, general=None, metro_train=None, metro_tram=None, metro_bus=None, regional_train=None, regional_coach=None, regional_bus=None, school_bus=None, telebus=None, night_bus=None, ferry=None, interstate_train=None, skybus=None, taxi=None):  # noqa: E501
        """V3Disruptions - a model defined in Swagger"""  # noqa: E501
        self._general = None
        self._metro_train = None
        self._metro_tram = None
        self._metro_bus = None
        self._regional_train = None
        self._regional_coach = None
        self._regional_bus = None
        self._school_bus = None
        self._telebus = None
        self._night_bus = None
        self._ferry = None
        self._interstate_train = None
        self._skybus = None
        self._taxi = None
        self.discriminator = None
        if general is not None:
            self.general = general
        if metro_train is not None:
            self.metro_train = metro_train
        if metro_tram is not None:
            self.metro_tram = metro_tram
        if metro_bus is not None:
            self.metro_bus = metro_bus
        if regional_train is not None:
            self.regional_train = regional_train
        if regional_coach is not None:
            self.regional_coach = regional_coach
        if regional_bus is not None:
            self.regional_bus = regional_bus
        if school_bus is not None:
            self.school_bus = school_bus
        if telebus is not None:
            self.telebus = telebus
        if night_bus is not None:
            self.night_bus = night_bus
        if ferry is not None:
            self.ferry = ferry
        if interstate_train is not None:
            self.interstate_train = interstate_train
        if skybus is not None:
            self.skybus = skybus
        if taxi is not None:
            self.taxi = taxi

    @property
    def general(self):
        """Gets the general of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to multiple route_types  # noqa: E501

        :return: The general of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this V3Disruptions.

        Subset of disruption information applicable to multiple route_types  # noqa: E501

        :param general: The general of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._general = general

    @property
    def metro_train(self):
        """Gets the metro_train of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to metropolitan train  # noqa: E501

        :return: The metro_train of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._metro_train

    @metro_train.setter
    def metro_train(self, metro_train):
        """Sets the metro_train of this V3Disruptions.

        Subset of disruption information applicable to metropolitan train  # noqa: E501

        :param metro_train: The metro_train of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._metro_train = metro_train

    @property
    def metro_tram(self):
        """Gets the metro_tram of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to metropolitan tram  # noqa: E501

        :return: The metro_tram of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._metro_tram

    @metro_tram.setter
    def metro_tram(self, metro_tram):
        """Sets the metro_tram of this V3Disruptions.

        Subset of disruption information applicable to metropolitan tram  # noqa: E501

        :param metro_tram: The metro_tram of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._metro_tram = metro_tram

    @property
    def metro_bus(self):
        """Gets the metro_bus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to metropolitan bus  # noqa: E501

        :return: The metro_bus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._metro_bus

    @metro_bus.setter
    def metro_bus(self, metro_bus):
        """Sets the metro_bus of this V3Disruptions.

        Subset of disruption information applicable to metropolitan bus  # noqa: E501

        :param metro_bus: The metro_bus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._metro_bus = metro_bus

    @property
    def regional_train(self):
        """Gets the regional_train of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to V/Line train  # noqa: E501

        :return: The regional_train of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._regional_train

    @regional_train.setter
    def regional_train(self, regional_train):
        """Sets the regional_train of this V3Disruptions.

        Subset of disruption information applicable to V/Line train  # noqa: E501

        :param regional_train: The regional_train of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._regional_train = regional_train

    @property
    def regional_coach(self):
        """Gets the regional_coach of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to V/Line coach  # noqa: E501

        :return: The regional_coach of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._regional_coach

    @regional_coach.setter
    def regional_coach(self, regional_coach):
        """Sets the regional_coach of this V3Disruptions.

        Subset of disruption information applicable to V/Line coach  # noqa: E501

        :param regional_coach: The regional_coach of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._regional_coach = regional_coach

    @property
    def regional_bus(self):
        """Gets the regional_bus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to regional bus  # noqa: E501

        :return: The regional_bus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._regional_bus

    @regional_bus.setter
    def regional_bus(self, regional_bus):
        """Sets the regional_bus of this V3Disruptions.

        Subset of disruption information applicable to regional bus  # noqa: E501

        :param regional_bus: The regional_bus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._regional_bus = regional_bus

    @property
    def school_bus(self):
        """Gets the school_bus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to school bus  # noqa: E501

        :return: The school_bus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._school_bus

    @school_bus.setter
    def school_bus(self, school_bus):
        """Sets the school_bus of this V3Disruptions.

        Subset of disruption information applicable to school bus  # noqa: E501

        :param school_bus: The school_bus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._school_bus = school_bus

    @property
    def telebus(self):
        """Gets the telebus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to telebus services  # noqa: E501

        :return: The telebus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._telebus

    @telebus.setter
    def telebus(self, telebus):
        """Sets the telebus of this V3Disruptions.

        Subset of disruption information applicable to telebus services  # noqa: E501

        :param telebus: The telebus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._telebus = telebus

    @property
    def night_bus(self):
        """Gets the night_bus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to night bus  # noqa: E501

        :return: The night_bus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._night_bus

    @night_bus.setter
    def night_bus(self, night_bus):
        """Sets the night_bus of this V3Disruptions.

        Subset of disruption information applicable to night bus  # noqa: E501

        :param night_bus: The night_bus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._night_bus = night_bus

    @property
    def ferry(self):
        """Gets the ferry of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to ferry  # noqa: E501

        :return: The ferry of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._ferry

    @ferry.setter
    def ferry(self, ferry):
        """Sets the ferry of this V3Disruptions.

        Subset of disruption information applicable to ferry  # noqa: E501

        :param ferry: The ferry of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._ferry = ferry

    @property
    def interstate_train(self):
        """Gets the interstate_train of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to interstate train  # noqa: E501

        :return: The interstate_train of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._interstate_train

    @interstate_train.setter
    def interstate_train(self, interstate_train):
        """Sets the interstate_train of this V3Disruptions.

        Subset of disruption information applicable to interstate train  # noqa: E501

        :param interstate_train: The interstate_train of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._interstate_train = interstate_train

    @property
    def skybus(self):
        """Gets the skybus of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to skybus  # noqa: E501

        :return: The skybus of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._skybus

    @skybus.setter
    def skybus(self, skybus):
        """Sets the skybus of this V3Disruptions.

        Subset of disruption information applicable to skybus  # noqa: E501

        :param skybus: The skybus of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._skybus = skybus

    @property
    def taxi(self):
        """Gets the taxi of this V3Disruptions.  # noqa: E501

        Subset of disruption information applicable to taxi  # noqa: E501

        :return: The taxi of this V3Disruptions.  # noqa: E501
        :rtype: list[V3Disruption]
        """
        return self._taxi

    @taxi.setter
    def taxi(self, taxi):
        """Sets the taxi of this V3Disruptions.

        Subset of disruption information applicable to taxi  # noqa: E501

        :param taxi: The taxi of this V3Disruptions.  # noqa: E501
        :type: list[V3Disruption]
        """

        self._taxi = taxi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3Disruptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3Disruptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
