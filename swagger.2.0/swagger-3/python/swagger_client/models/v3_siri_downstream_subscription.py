# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3SiriDownstreamSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscriber_ref': 'str',
        'subscription_ref': 'str',
        'message_type': 'int',
        'siri_format': 'int',
        'siri_version': 'str',
        'consumer_address': 'str',
        'initial_termination_time': 'datetime',
        'validity_period_start': 'datetime',
        'validity_period_end': 'datetime',
        'preview_interval': 'str',
        'topics': 'list[V3SiriDownstreamSubscriptionTopic]'
    }

    attribute_map = {
        'subscriber_ref': 'subscriber_ref',
        'subscription_ref': 'subscription_ref',
        'message_type': 'message_type',
        'siri_format': 'siri_format',
        'siri_version': 'siri_version',
        'consumer_address': 'consumer_address',
        'initial_termination_time': 'initial_termination_time',
        'validity_period_start': 'validity_period_start',
        'validity_period_end': 'validity_period_end',
        'preview_interval': 'preview_interval',
        'topics': 'topics'
    }

    def __init__(self, subscriber_ref=None, subscription_ref=None, message_type=None, siri_format=None, siri_version=None, consumer_address=None, initial_termination_time=None, validity_period_start=None, validity_period_end=None, preview_interval=None, topics=None):  # noqa: E501
        """V3SiriDownstreamSubscription - a model defined in Swagger"""  # noqa: E501
        self._subscriber_ref = None
        self._subscription_ref = None
        self._message_type = None
        self._siri_format = None
        self._siri_version = None
        self._consumer_address = None
        self._initial_termination_time = None
        self._validity_period_start = None
        self._validity_period_end = None
        self._preview_interval = None
        self._topics = None
        self.discriminator = None
        if subscriber_ref is not None:
            self.subscriber_ref = subscriber_ref
        if subscription_ref is not None:
            self.subscription_ref = subscription_ref
        if message_type is not None:
            self.message_type = message_type
        if siri_format is not None:
            self.siri_format = siri_format
        if siri_version is not None:
            self.siri_version = siri_version
        if consumer_address is not None:
            self.consumer_address = consumer_address
        if initial_termination_time is not None:
            self.initial_termination_time = initial_termination_time
        if validity_period_start is not None:
            self.validity_period_start = validity_period_start
        if validity_period_end is not None:
            self.validity_period_end = validity_period_end
        if preview_interval is not None:
            self.preview_interval = preview_interval
        if topics is not None:
            self.topics = topics

    @property
    def subscriber_ref(self):
        """Gets the subscriber_ref of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The subscriber_ref of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_ref

    @subscriber_ref.setter
    def subscriber_ref(self, subscriber_ref):
        """Sets the subscriber_ref of this V3SiriDownstreamSubscription.


        :param subscriber_ref: The subscriber_ref of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: str
        """

        self._subscriber_ref = subscriber_ref

    @property
    def subscription_ref(self):
        """Gets the subscription_ref of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The subscription_ref of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_ref

    @subscription_ref.setter
    def subscription_ref(self, subscription_ref):
        """Sets the subscription_ref of this V3SiriDownstreamSubscription.


        :param subscription_ref: The subscription_ref of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: str
        """

        self._subscription_ref = subscription_ref

    @property
    def message_type(self):
        """Gets the message_type of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The message_type of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this V3SiriDownstreamSubscription.


        :param message_type: The message_type of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def siri_format(self):
        """Gets the siri_format of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The siri_format of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: int
        """
        return self._siri_format

    @siri_format.setter
    def siri_format(self, siri_format):
        """Sets the siri_format of this V3SiriDownstreamSubscription.


        :param siri_format: The siri_format of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if siri_format not in allowed_values:
            raise ValueError(
                "Invalid value for `siri_format` ({0}), must be one of {1}"  # noqa: E501
                .format(siri_format, allowed_values)
            )

        self._siri_format = siri_format

    @property
    def siri_version(self):
        """Gets the siri_version of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The siri_version of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: str
        """
        return self._siri_version

    @siri_version.setter
    def siri_version(self, siri_version):
        """Sets the siri_version of this V3SiriDownstreamSubscription.


        :param siri_version: The siri_version of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: str
        """

        self._siri_version = siri_version

    @property
    def consumer_address(self):
        """Gets the consumer_address of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The consumer_address of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: str
        """
        return self._consumer_address

    @consumer_address.setter
    def consumer_address(self, consumer_address):
        """Sets the consumer_address of this V3SiriDownstreamSubscription.


        :param consumer_address: The consumer_address of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: str
        """

        self._consumer_address = consumer_address

    @property
    def initial_termination_time(self):
        """Gets the initial_termination_time of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The initial_termination_time of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_termination_time

    @initial_termination_time.setter
    def initial_termination_time(self, initial_termination_time):
        """Sets the initial_termination_time of this V3SiriDownstreamSubscription.


        :param initial_termination_time: The initial_termination_time of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: datetime
        """

        self._initial_termination_time = initial_termination_time

    @property
    def validity_period_start(self):
        """Gets the validity_period_start of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The validity_period_start of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_period_start

    @validity_period_start.setter
    def validity_period_start(self, validity_period_start):
        """Sets the validity_period_start of this V3SiriDownstreamSubscription.


        :param validity_period_start: The validity_period_start of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: datetime
        """

        self._validity_period_start = validity_period_start

    @property
    def validity_period_end(self):
        """Gets the validity_period_end of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The validity_period_end of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_period_end

    @validity_period_end.setter
    def validity_period_end(self, validity_period_end):
        """Sets the validity_period_end of this V3SiriDownstreamSubscription.


        :param validity_period_end: The validity_period_end of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: datetime
        """

        self._validity_period_end = validity_period_end

    @property
    def preview_interval(self):
        """Gets the preview_interval of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The preview_interval of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: str
        """
        return self._preview_interval

    @preview_interval.setter
    def preview_interval(self, preview_interval):
        """Sets the preview_interval of this V3SiriDownstreamSubscription.


        :param preview_interval: The preview_interval of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: str
        """

        self._preview_interval = preview_interval

    @property
    def topics(self):
        """Gets the topics of this V3SiriDownstreamSubscription.  # noqa: E501


        :return: The topics of this V3SiriDownstreamSubscription.  # noqa: E501
        :rtype: list[V3SiriDownstreamSubscriptionTopic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this V3SiriDownstreamSubscription.


        :param topics: The topics of this V3SiriDownstreamSubscription.  # noqa: E501
        :type: list[V3SiriDownstreamSubscriptionTopic]
        """

        self._topics = topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3SiriDownstreamSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3SiriDownstreamSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
