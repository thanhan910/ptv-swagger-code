<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchSearch
     *
     * View stops, routes and myki ticket outlets that match the search term
     *
     * @param  string $search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param  float $latitude Filter by geographic coordinate of latitude (optional)
     * @param  float $longitude Filter by geographic coordinate of longitude (optional)
     * @param  float $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param  bool $include_addresses Placeholder for future development; currently unavailable (optional)
     * @param  bool $include_outlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3SearchResult
     */
    public function searchSearch($search_term, $route_types = null, $latitude = null, $longitude = null, $max_distance = null, $include_addresses = null, $include_outlets = null, $match_stop_by_suburb = null, $match_route_by_suburb = null, $match_stop_by_gtfs_stop_id = null, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->searchSearchWithHttpInfo($search_term, $route_types, $latitude, $longitude, $max_distance, $include_addresses, $include_outlets, $match_stop_by_suburb, $match_route_by_suburb, $match_stop_by_gtfs_stop_id, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation searchSearchWithHttpInfo
     *
     * View stops, routes and myki ticket outlets that match the search term
     *
     * @param  string $search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param  float $latitude Filter by geographic coordinate of latitude (optional)
     * @param  float $longitude Filter by geographic coordinate of longitude (optional)
     * @param  float $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param  bool $include_addresses Placeholder for future development; currently unavailable (optional)
     * @param  bool $include_outlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3SearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSearchWithHttpInfo($search_term, $route_types = null, $latitude = null, $longitude = null, $max_distance = null, $include_addresses = null, $include_outlets = null, $match_stop_by_suburb = null, $match_route_by_suburb = null, $match_stop_by_gtfs_stop_id = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3SearchResult';
        $request = $this->searchSearchRequest($search_term, $route_types, $latitude, $longitude, $max_distance, $include_addresses, $include_outlets, $match_stop_by_suburb, $match_route_by_suburb, $match_stop_by_gtfs_stop_id, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3SearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSearchAsync
     *
     * View stops, routes and myki ticket outlets that match the search term
     *
     * @param  string $search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param  float $latitude Filter by geographic coordinate of latitude (optional)
     * @param  float $longitude Filter by geographic coordinate of longitude (optional)
     * @param  float $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param  bool $include_addresses Placeholder for future development; currently unavailable (optional)
     * @param  bool $include_outlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSearchAsync($search_term, $route_types = null, $latitude = null, $longitude = null, $max_distance = null, $include_addresses = null, $include_outlets = null, $match_stop_by_suburb = null, $match_route_by_suburb = null, $match_stop_by_gtfs_stop_id = null, $token = null, $devid = null, $signature = null)
    {
        return $this->searchSearchAsyncWithHttpInfo($search_term, $route_types, $latitude, $longitude, $max_distance, $include_addresses, $include_outlets, $match_stop_by_suburb, $match_route_by_suburb, $match_stop_by_gtfs_stop_id, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSearchAsyncWithHttpInfo
     *
     * View stops, routes and myki ticket outlets that match the search term
     *
     * @param  string $search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param  float $latitude Filter by geographic coordinate of latitude (optional)
     * @param  float $longitude Filter by geographic coordinate of longitude (optional)
     * @param  float $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param  bool $include_addresses Placeholder for future development; currently unavailable (optional)
     * @param  bool $include_outlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSearchAsyncWithHttpInfo($search_term, $route_types = null, $latitude = null, $longitude = null, $max_distance = null, $include_addresses = null, $include_outlets = null, $match_stop_by_suburb = null, $match_route_by_suburb = null, $match_stop_by_gtfs_stop_id = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3SearchResult';
        $request = $this->searchSearchRequest($search_term, $route_types, $latitude, $longitude, $max_distance, $include_addresses, $include_outlets, $match_stop_by_suburb, $match_route_by_suburb, $match_stop_by_gtfs_stop_id, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSearch'
     *
     * @param  string $search_term Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param  float $latitude Filter by geographic coordinate of latitude (optional)
     * @param  float $longitude Filter by geographic coordinate of longitude (optional)
     * @param  float $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param  bool $include_addresses Placeholder for future development; currently unavailable (optional)
     * @param  bool $include_outlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_suburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_route_by_suburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param  bool $match_stop_by_gtfs_stop_id Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSearchRequest($search_term, $route_types = null, $latitude = null, $longitude = null, $max_distance = null, $include_addresses = null, $include_outlets = null, $match_stop_by_suburb = null, $match_route_by_suburb = null, $match_stop_by_gtfs_stop_id = null, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'search_term' is set
        if ($search_term === null || (is_array($search_term) && count($search_term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_term when calling searchSearch'
            );
        }

        $resourcePath = '/v3/search/{search_term}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($route_types)) {
            $route_types = ObjectSerializer::serializeCollection($route_types, 'multi', true);
        }
        if ($route_types !== null) {
            $queryParams['route_types'] = ObjectSerializer::toQueryValue($route_types, 'int32');
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude, 'float');
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude, 'float');
        }
        // query params
        if ($max_distance !== null) {
            $queryParams['max_distance'] = ObjectSerializer::toQueryValue($max_distance, 'float');
        }
        // query params
        if ($include_addresses !== null) {
            $queryParams['include_addresses'] = ObjectSerializer::toQueryValue($include_addresses, null);
        }
        // query params
        if ($include_outlets !== null) {
            $queryParams['include_outlets'] = ObjectSerializer::toQueryValue($include_outlets, null);
        }
        // query params
        if ($match_stop_by_suburb !== null) {
            $queryParams['match_stop_by_suburb'] = ObjectSerializer::toQueryValue($match_stop_by_suburb, null);
        }
        // query params
        if ($match_route_by_suburb !== null) {
            $queryParams['match_route_by_suburb'] = ObjectSerializer::toQueryValue($match_route_by_suburb, null);
        }
        // query params
        if ($match_stop_by_gtfs_stop_id !== null) {
            $queryParams['match_stop_by_gtfs_stop_id'] = ObjectSerializer::toQueryValue($match_stop_by_gtfs_stop_id, null);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid, null);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature, null);
        }

        // path params
        if ($search_term !== null) {
            $resourcePath = str_replace(
                '{' . 'search_term' . '}',
                ObjectSerializer::toPathValue($search_term),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
