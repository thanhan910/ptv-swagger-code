/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V3BulkDeparturesRouteDirectionResponse;
import org.openapitools.client.model.V3Departure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3BulkDeparturesUpdateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:16:10.196593200+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3BulkDeparturesUpdateResponse {
  public static final String SERIALIZED_NAME_DEPARTURES = "departures";
  @SerializedName(SERIALIZED_NAME_DEPARTURES)
  private List<V3Departure> departures = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "route_type";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private Integer routeType;

  public static final String SERIALIZED_NAME_STOP_ID = "stop_id";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  private Integer stopId;

  public static final String SERIALIZED_NAME_REQUESTED_ROUTE_DIRECTION = "requested_route_direction";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ROUTE_DIRECTION)
  private V3BulkDeparturesRouteDirectionResponse requestedRouteDirection;

  /**
   * The status of the route direction (changed | unchanged).  If changed, requests should change the requested_route_direction for the route_direction supplied.
   */
  @JsonAdapter(RouteDirectionStatusEnum.Adapter.class)
  public enum RouteDirectionStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    RouteDirectionStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteDirectionStatusEnum fromValue(Integer value) {
      for (RouteDirectionStatusEnum b : RouteDirectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteDirectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteDirectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteDirectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return RouteDirectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      RouteDirectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_DIRECTION_STATUS = "route_direction_status";
  @SerializedName(SERIALIZED_NAME_ROUTE_DIRECTION_STATUS)
  private RouteDirectionStatusEnum routeDirectionStatus;

  public static final String SERIALIZED_NAME_ROUTE_DIRECTION = "route_direction";
  @SerializedName(SERIALIZED_NAME_ROUTE_DIRECTION)
  private V3BulkDeparturesRouteDirectionResponse routeDirection;

  public V3BulkDeparturesUpdateResponse() {
  }

  public V3BulkDeparturesUpdateResponse departures(List<V3Departure> departures) {
    this.departures = departures;
    return this;
  }

  public V3BulkDeparturesUpdateResponse addDeparturesItem(V3Departure departuresItem) {
    if (this.departures == null) {
      this.departures = new ArrayList<>();
    }
    this.departures.add(departuresItem);
    return this;
  }

   /**
   * Timetabled and real-time service departures
   * @return departures
  **/
  @javax.annotation.Nullable
  public List<V3Departure> getDepartures() {
    return departures;
  }

  public void setDepartures(List<V3Departure> departures) {
    this.departures = departures;
  }


  public V3BulkDeparturesUpdateResponse routeType(Integer routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Transport mode identifier
   * @return routeType
  **/
  @javax.annotation.Nullable
  public Integer getRouteType() {
    return routeType;
  }

  public void setRouteType(Integer routeType) {
    this.routeType = routeType;
  }


  public V3BulkDeparturesUpdateResponse stopId(Integer stopId) {
    this.stopId = stopId;
    return this;
  }

   /**
   * Stop identifier
   * @return stopId
  **/
  @javax.annotation.Nullable
  public Integer getStopId() {
    return stopId;
  }

  public void setStopId(Integer stopId) {
    this.stopId = stopId;
  }


  public V3BulkDeparturesUpdateResponse requestedRouteDirection(V3BulkDeparturesRouteDirectionResponse requestedRouteDirection) {
    this.requestedRouteDirection = requestedRouteDirection;
    return this;
  }

   /**
   * Get requestedRouteDirection
   * @return requestedRouteDirection
  **/
  @javax.annotation.Nullable
  public V3BulkDeparturesRouteDirectionResponse getRequestedRouteDirection() {
    return requestedRouteDirection;
  }

  public void setRequestedRouteDirection(V3BulkDeparturesRouteDirectionResponse requestedRouteDirection) {
    this.requestedRouteDirection = requestedRouteDirection;
  }


  public V3BulkDeparturesUpdateResponse routeDirectionStatus(RouteDirectionStatusEnum routeDirectionStatus) {
    this.routeDirectionStatus = routeDirectionStatus;
    return this;
  }

   /**
   * The status of the route direction (changed | unchanged).  If changed, requests should change the requested_route_direction for the route_direction supplied.
   * @return routeDirectionStatus
  **/
  @javax.annotation.Nullable
  public RouteDirectionStatusEnum getRouteDirectionStatus() {
    return routeDirectionStatus;
  }

  public void setRouteDirectionStatus(RouteDirectionStatusEnum routeDirectionStatus) {
    this.routeDirectionStatus = routeDirectionStatus;
  }


  public V3BulkDeparturesUpdateResponse routeDirection(V3BulkDeparturesRouteDirectionResponse routeDirection) {
    this.routeDirection = routeDirection;
    return this;
  }

   /**
   * Get routeDirection
   * @return routeDirection
  **/
  @javax.annotation.Nullable
  public V3BulkDeparturesRouteDirectionResponse getRouteDirection() {
    return routeDirection;
  }

  public void setRouteDirection(V3BulkDeparturesRouteDirectionResponse routeDirection) {
    this.routeDirection = routeDirection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3BulkDeparturesUpdateResponse v3BulkDeparturesUpdateResponse = (V3BulkDeparturesUpdateResponse) o;
    return Objects.equals(this.departures, v3BulkDeparturesUpdateResponse.departures) &&
        Objects.equals(this.routeType, v3BulkDeparturesUpdateResponse.routeType) &&
        Objects.equals(this.stopId, v3BulkDeparturesUpdateResponse.stopId) &&
        Objects.equals(this.requestedRouteDirection, v3BulkDeparturesUpdateResponse.requestedRouteDirection) &&
        Objects.equals(this.routeDirectionStatus, v3BulkDeparturesUpdateResponse.routeDirectionStatus) &&
        Objects.equals(this.routeDirection, v3BulkDeparturesUpdateResponse.routeDirection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(departures, routeType, stopId, requestedRouteDirection, routeDirectionStatus, routeDirection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3BulkDeparturesUpdateResponse {\n");
    sb.append("    departures: ").append(toIndentedString(departures)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    requestedRouteDirection: ").append(toIndentedString(requestedRouteDirection)).append("\n");
    sb.append("    routeDirectionStatus: ").append(toIndentedString(routeDirectionStatus)).append("\n");
    sb.append("    routeDirection: ").append(toIndentedString(routeDirection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("departures");
    openapiFields.add("route_type");
    openapiFields.add("stop_id");
    openapiFields.add("requested_route_direction");
    openapiFields.add("route_direction_status");
    openapiFields.add("route_direction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3BulkDeparturesUpdateResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3BulkDeparturesUpdateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3BulkDeparturesUpdateResponse is not found in the empty JSON string", V3BulkDeparturesUpdateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3BulkDeparturesUpdateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3BulkDeparturesUpdateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("departures") != null && !jsonObj.get("departures").isJsonNull()) {
        JsonArray jsonArraydepartures = jsonObj.getAsJsonArray("departures");
        if (jsonArraydepartures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("departures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `departures` to be an array in the JSON string but got `%s`", jsonObj.get("departures").toString()));
          }

          // validate the optional field `departures` (array)
          for (int i = 0; i < jsonArraydepartures.size(); i++) {
            V3Departure.validateJsonElement(jsonArraydepartures.get(i));
          };
        }
      }
      // validate the optional field `requested_route_direction`
      if (jsonObj.get("requested_route_direction") != null && !jsonObj.get("requested_route_direction").isJsonNull()) {
        V3BulkDeparturesRouteDirectionResponse.validateJsonElement(jsonObj.get("requested_route_direction"));
      }
      // validate the optional field `route_direction_status`
      if (jsonObj.get("route_direction_status") != null && !jsonObj.get("route_direction_status").isJsonNull()) {
        RouteDirectionStatusEnum.validateJsonElement(jsonObj.get("route_direction_status"));
      }
      // validate the optional field `route_direction`
      if (jsonObj.get("route_direction") != null && !jsonObj.get("route_direction").isJsonNull()) {
        V3BulkDeparturesRouteDirectionResponse.validateJsonElement(jsonObj.get("route_direction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3BulkDeparturesUpdateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3BulkDeparturesUpdateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3BulkDeparturesUpdateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3BulkDeparturesUpdateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<V3BulkDeparturesUpdateResponse>() {
           @Override
           public void write(JsonWriter out, V3BulkDeparturesUpdateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3BulkDeparturesUpdateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3BulkDeparturesUpdateResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3BulkDeparturesUpdateResponse
  * @throws IOException if the JSON string is invalid with respect to V3BulkDeparturesUpdateResponse
  */
  public static V3BulkDeparturesUpdateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3BulkDeparturesUpdateResponse.class);
  }

 /**
  * Convert an instance of V3BulkDeparturesUpdateResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

