/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.V3ErrorResponse;
import org.openapitools.client.model.V3StoppingPattern;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatternsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PatternsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatternsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for patternsGetPatternByRun
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternsGetPatternByRunCall(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/pattern/run/{run_ref}/route_type/{route_type}"
            .replace("{" + "run_ref" + "}", localVarApiClient.escapeString(runRef.toString()))
            .replace("{" + "route_type" + "}", localVarApiClient.escapeString(routeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        if (stopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stop_id", stopId));
        }

        if (dateUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_utc", dateUtc));
        }

        if (includeSkippedStops != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_skipped_stops", includeSkippedStops));
        }

        if (includeGeopath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_geopath", includeGeopath));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternsGetPatternByRunValidateBeforeCall(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runRef' is set
        if (runRef == null) {
            throw new ApiException("Missing the required parameter 'runRef' when calling patternsGetPatternByRun(Async)");
        }

        // verify the required parameter 'routeType' is set
        if (routeType == null) {
            throw new ApiException("Missing the required parameter 'routeType' when calling patternsGetPatternByRun(Async)");
        }

        // verify the required parameter 'expand' is set
        if (expand == null) {
            throw new ApiException("Missing the required parameter 'expand' when calling patternsGetPatternByRun(Async)");
        }

        return patternsGetPatternByRunCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, _callback);

    }

    /**
     * View the stopping pattern for a specific trip/service run
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3StoppingPattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3StoppingPattern patternsGetPatternByRun(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3StoppingPattern> localVarResp = patternsGetPatternByRunWithHttpInfo(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View the stopping pattern for a specific trip/service run
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3StoppingPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3StoppingPattern> patternsGetPatternByRunWithHttpInfo(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = patternsGetPatternByRunValidateBeforeCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3StoppingPattern>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View the stopping pattern for a specific trip/service run (asynchronously)
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternsGetPatternByRunAsync(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ApiCallback<V3StoppingPattern> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternsGetPatternByRunValidateBeforeCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3StoppingPattern>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
