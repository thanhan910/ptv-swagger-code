<?php
/**
 * PatternsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PatternsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PatternsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'patternsGetPatternByRun' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation patternsGetPatternByRun
     *
     * View the stopping pattern for a specific trip/service run
     *
     * @param  string $run_ref The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string[] $expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param  int $stop_id Filter by stop_id; values returned by Stops API (optional)
     * @param  \DateTime $date_utc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param  bool $include_skipped_stops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patternsGetPatternByRun'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V3StoppingPattern|\OpenAPI\Client\Model\V3ErrorResponse|\OpenAPI\Client\Model\V3ErrorResponse
     */
    public function patternsGetPatternByRun($run_ref, $route_type, $expand, $stop_id = null, $date_utc = null, $include_skipped_stops = null, $include_geopath = null, $token = null, $devid = null, $signature = null, string $contentType = self::contentTypes['patternsGetPatternByRun'][0])
    {
        list($response) = $this->patternsGetPatternByRunWithHttpInfo($run_ref, $route_type, $expand, $stop_id, $date_utc, $include_skipped_stops, $include_geopath, $token, $devid, $signature, $contentType);
        return $response;
    }

    /**
     * Operation patternsGetPatternByRunWithHttpInfo
     *
     * View the stopping pattern for a specific trip/service run
     *
     * @param  string $run_ref The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string[] $expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param  int $stop_id Filter by stop_id; values returned by Stops API (optional)
     * @param  \DateTime $date_utc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param  bool $include_skipped_stops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patternsGetPatternByRun'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V3StoppingPattern|\OpenAPI\Client\Model\V3ErrorResponse|\OpenAPI\Client\Model\V3ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patternsGetPatternByRunWithHttpInfo($run_ref, $route_type, $expand, $stop_id = null, $date_utc = null, $include_skipped_stops = null, $include_geopath = null, $token = null, $devid = null, $signature = null, string $contentType = self::contentTypes['patternsGetPatternByRun'][0])
    {
        $request = $this->patternsGetPatternByRunRequest($run_ref, $route_type, $expand, $stop_id, $date_utc, $include_skipped_stops, $include_geopath, $token, $devid, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V3StoppingPattern' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\V3StoppingPattern' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V3StoppingPattern', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\V3ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\V3ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V3ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\V3ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\V3ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V3ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V3StoppingPattern';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V3StoppingPattern',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patternsGetPatternByRunAsync
     *
     * View the stopping pattern for a specific trip/service run
     *
     * @param  string $run_ref The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string[] $expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param  int $stop_id Filter by stop_id; values returned by Stops API (optional)
     * @param  \DateTime $date_utc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param  bool $include_skipped_stops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patternsGetPatternByRun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patternsGetPatternByRunAsync($run_ref, $route_type, $expand, $stop_id = null, $date_utc = null, $include_skipped_stops = null, $include_geopath = null, $token = null, $devid = null, $signature = null, string $contentType = self::contentTypes['patternsGetPatternByRun'][0])
    {
        return $this->patternsGetPatternByRunAsyncWithHttpInfo($run_ref, $route_type, $expand, $stop_id, $date_utc, $include_skipped_stops, $include_geopath, $token, $devid, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patternsGetPatternByRunAsyncWithHttpInfo
     *
     * View the stopping pattern for a specific trip/service run
     *
     * @param  string $run_ref The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string[] $expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param  int $stop_id Filter by stop_id; values returned by Stops API (optional)
     * @param  \DateTime $date_utc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param  bool $include_skipped_stops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patternsGetPatternByRun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patternsGetPatternByRunAsyncWithHttpInfo($run_ref, $route_type, $expand, $stop_id = null, $date_utc = null, $include_skipped_stops = null, $include_geopath = null, $token = null, $devid = null, $signature = null, string $contentType = self::contentTypes['patternsGetPatternByRun'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V3StoppingPattern';
        $request = $this->patternsGetPatternByRunRequest($run_ref, $route_type, $expand, $stop_id, $date_utc, $include_skipped_stops, $include_geopath, $token, $devid, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patternsGetPatternByRun'
     *
     * @param  string $run_ref The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string[] $expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param  int $stop_id Filter by stop_id; values returned by Stops API (optional)
     * @param  \DateTime $date_utc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param  bool $include_skipped_stops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patternsGetPatternByRun'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patternsGetPatternByRunRequest($run_ref, $route_type, $expand, $stop_id = null, $date_utc = null, $include_skipped_stops = null, $include_geopath = null, $token = null, $devid = null, $signature = null, string $contentType = self::contentTypes['patternsGetPatternByRun'][0])
    {

        // verify the required parameter 'run_ref' is set
        if ($run_ref === null || (is_array($run_ref) && count($run_ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $run_ref when calling patternsGetPatternByRun'
            );
        }

        // verify the required parameter 'route_type' is set
        if ($route_type === null || (is_array($route_type) && count($route_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_type when calling patternsGetPatternByRun'
            );
        }

        // verify the required parameter 'expand' is set
        if ($expand === null || (is_array($expand) && count($expand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expand when calling patternsGetPatternByRun'
            );
        }









        $resourcePath = '/v3/pattern/run/{run_ref}/route_type/{route_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            'expand', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stop_id,
            'stop_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_utc,
            'date_utc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_skipped_stops,
            'include_skipped_stops', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_geopath,
            'include_geopath', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $devid,
            'devid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($run_ref !== null) {
            $resourcePath = str_replace(
                '{' . 'run_ref' . '}',
                ObjectSerializer::toPathValue($run_ref),
                $resourcePath
            );
        }
        // path params
        if ($route_type !== null) {
            $resourcePath = str_replace(
                '{' . 'route_type' . '}',
                ObjectSerializer::toPathValue($route_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
