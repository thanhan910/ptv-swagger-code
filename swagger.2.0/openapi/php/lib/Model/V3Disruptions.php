<?php
/**
 * V3Disruptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3Disruptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3Disruptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.Disruptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'general' => '\OpenAPI\Client\Model\V3Disruption[]',
        'metro_train' => '\OpenAPI\Client\Model\V3Disruption[]',
        'metro_tram' => '\OpenAPI\Client\Model\V3Disruption[]',
        'metro_bus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'regional_train' => '\OpenAPI\Client\Model\V3Disruption[]',
        'regional_coach' => '\OpenAPI\Client\Model\V3Disruption[]',
        'regional_bus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'school_bus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'telebus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'night_bus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'ferry' => '\OpenAPI\Client\Model\V3Disruption[]',
        'interstate_train' => '\OpenAPI\Client\Model\V3Disruption[]',
        'skybus' => '\OpenAPI\Client\Model\V3Disruption[]',
        'taxi' => '\OpenAPI\Client\Model\V3Disruption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'general' => null,
        'metro_train' => null,
        'metro_tram' => null,
        'metro_bus' => null,
        'regional_train' => null,
        'regional_coach' => null,
        'regional_bus' => null,
        'school_bus' => null,
        'telebus' => null,
        'night_bus' => null,
        'ferry' => null,
        'interstate_train' => null,
        'skybus' => null,
        'taxi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'general' => false,
        'metro_train' => false,
        'metro_tram' => false,
        'metro_bus' => false,
        'regional_train' => false,
        'regional_coach' => false,
        'regional_bus' => false,
        'school_bus' => false,
        'telebus' => false,
        'night_bus' => false,
        'ferry' => false,
        'interstate_train' => false,
        'skybus' => false,
        'taxi' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'general' => 'general',
        'metro_train' => 'metro_train',
        'metro_tram' => 'metro_tram',
        'metro_bus' => 'metro_bus',
        'regional_train' => 'regional_train',
        'regional_coach' => 'regional_coach',
        'regional_bus' => 'regional_bus',
        'school_bus' => 'school_bus',
        'telebus' => 'telebus',
        'night_bus' => 'night_bus',
        'ferry' => 'ferry',
        'interstate_train' => 'interstate_train',
        'skybus' => 'skybus',
        'taxi' => 'taxi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'general' => 'setGeneral',
        'metro_train' => 'setMetroTrain',
        'metro_tram' => 'setMetroTram',
        'metro_bus' => 'setMetroBus',
        'regional_train' => 'setRegionalTrain',
        'regional_coach' => 'setRegionalCoach',
        'regional_bus' => 'setRegionalBus',
        'school_bus' => 'setSchoolBus',
        'telebus' => 'setTelebus',
        'night_bus' => 'setNightBus',
        'ferry' => 'setFerry',
        'interstate_train' => 'setInterstateTrain',
        'skybus' => 'setSkybus',
        'taxi' => 'setTaxi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'general' => 'getGeneral',
        'metro_train' => 'getMetroTrain',
        'metro_tram' => 'getMetroTram',
        'metro_bus' => 'getMetroBus',
        'regional_train' => 'getRegionalTrain',
        'regional_coach' => 'getRegionalCoach',
        'regional_bus' => 'getRegionalBus',
        'school_bus' => 'getSchoolBus',
        'telebus' => 'getTelebus',
        'night_bus' => 'getNightBus',
        'ferry' => 'getFerry',
        'interstate_train' => 'getInterstateTrain',
        'skybus' => 'getSkybus',
        'taxi' => 'getTaxi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('general', $data ?? [], null);
        $this->setIfExists('metro_train', $data ?? [], null);
        $this->setIfExists('metro_tram', $data ?? [], null);
        $this->setIfExists('metro_bus', $data ?? [], null);
        $this->setIfExists('regional_train', $data ?? [], null);
        $this->setIfExists('regional_coach', $data ?? [], null);
        $this->setIfExists('regional_bus', $data ?? [], null);
        $this->setIfExists('school_bus', $data ?? [], null);
        $this->setIfExists('telebus', $data ?? [], null);
        $this->setIfExists('night_bus', $data ?? [], null);
        $this->setIfExists('ferry', $data ?? [], null);
        $this->setIfExists('interstate_train', $data ?? [], null);
        $this->setIfExists('skybus', $data ?? [], null);
        $this->setIfExists('taxi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets general
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $general Subset of disruption information applicable to multiple route_types
     *
     * @return self
     */
    public function setGeneral($general)
    {
        if (is_null($general)) {
            throw new \InvalidArgumentException('non-nullable general cannot be null');
        }
        $this->container['general'] = $general;

        return $this;
    }

    /**
     * Gets metro_train
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getMetroTrain()
    {
        return $this->container['metro_train'];
    }

    /**
     * Sets metro_train
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $metro_train Subset of disruption information applicable to metropolitan train
     *
     * @return self
     */
    public function setMetroTrain($metro_train)
    {
        if (is_null($metro_train)) {
            throw new \InvalidArgumentException('non-nullable metro_train cannot be null');
        }
        $this->container['metro_train'] = $metro_train;

        return $this;
    }

    /**
     * Gets metro_tram
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getMetroTram()
    {
        return $this->container['metro_tram'];
    }

    /**
     * Sets metro_tram
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $metro_tram Subset of disruption information applicable to metropolitan tram
     *
     * @return self
     */
    public function setMetroTram($metro_tram)
    {
        if (is_null($metro_tram)) {
            throw new \InvalidArgumentException('non-nullable metro_tram cannot be null');
        }
        $this->container['metro_tram'] = $metro_tram;

        return $this;
    }

    /**
     * Gets metro_bus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getMetroBus()
    {
        return $this->container['metro_bus'];
    }

    /**
     * Sets metro_bus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $metro_bus Subset of disruption information applicable to metropolitan bus
     *
     * @return self
     */
    public function setMetroBus($metro_bus)
    {
        if (is_null($metro_bus)) {
            throw new \InvalidArgumentException('non-nullable metro_bus cannot be null');
        }
        $this->container['metro_bus'] = $metro_bus;

        return $this;
    }

    /**
     * Gets regional_train
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getRegionalTrain()
    {
        return $this->container['regional_train'];
    }

    /**
     * Sets regional_train
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $regional_train Subset of disruption information applicable to V/Line train
     *
     * @return self
     */
    public function setRegionalTrain($regional_train)
    {
        if (is_null($regional_train)) {
            throw new \InvalidArgumentException('non-nullable regional_train cannot be null');
        }
        $this->container['regional_train'] = $regional_train;

        return $this;
    }

    /**
     * Gets regional_coach
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getRegionalCoach()
    {
        return $this->container['regional_coach'];
    }

    /**
     * Sets regional_coach
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $regional_coach Subset of disruption information applicable to V/Line coach
     *
     * @return self
     */
    public function setRegionalCoach($regional_coach)
    {
        if (is_null($regional_coach)) {
            throw new \InvalidArgumentException('non-nullable regional_coach cannot be null');
        }
        $this->container['regional_coach'] = $regional_coach;

        return $this;
    }

    /**
     * Gets regional_bus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getRegionalBus()
    {
        return $this->container['regional_bus'];
    }

    /**
     * Sets regional_bus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $regional_bus Subset of disruption information applicable to regional bus
     *
     * @return self
     */
    public function setRegionalBus($regional_bus)
    {
        if (is_null($regional_bus)) {
            throw new \InvalidArgumentException('non-nullable regional_bus cannot be null');
        }
        $this->container['regional_bus'] = $regional_bus;

        return $this;
    }

    /**
     * Gets school_bus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getSchoolBus()
    {
        return $this->container['school_bus'];
    }

    /**
     * Sets school_bus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $school_bus Subset of disruption information applicable to school bus
     *
     * @return self
     */
    public function setSchoolBus($school_bus)
    {
        if (is_null($school_bus)) {
            throw new \InvalidArgumentException('non-nullable school_bus cannot be null');
        }
        $this->container['school_bus'] = $school_bus;

        return $this;
    }

    /**
     * Gets telebus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getTelebus()
    {
        return $this->container['telebus'];
    }

    /**
     * Sets telebus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $telebus Subset of disruption information applicable to telebus services
     *
     * @return self
     */
    public function setTelebus($telebus)
    {
        if (is_null($telebus)) {
            throw new \InvalidArgumentException('non-nullable telebus cannot be null');
        }
        $this->container['telebus'] = $telebus;

        return $this;
    }

    /**
     * Gets night_bus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getNightBus()
    {
        return $this->container['night_bus'];
    }

    /**
     * Sets night_bus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $night_bus Subset of disruption information applicable to night bus
     *
     * @return self
     */
    public function setNightBus($night_bus)
    {
        if (is_null($night_bus)) {
            throw new \InvalidArgumentException('non-nullable night_bus cannot be null');
        }
        $this->container['night_bus'] = $night_bus;

        return $this;
    }

    /**
     * Gets ferry
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getFerry()
    {
        return $this->container['ferry'];
    }

    /**
     * Sets ferry
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $ferry Subset of disruption information applicable to ferry
     *
     * @return self
     */
    public function setFerry($ferry)
    {
        if (is_null($ferry)) {
            throw new \InvalidArgumentException('non-nullable ferry cannot be null');
        }
        $this->container['ferry'] = $ferry;

        return $this;
    }

    /**
     * Gets interstate_train
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getInterstateTrain()
    {
        return $this->container['interstate_train'];
    }

    /**
     * Sets interstate_train
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $interstate_train Subset of disruption information applicable to interstate train
     *
     * @return self
     */
    public function setInterstateTrain($interstate_train)
    {
        if (is_null($interstate_train)) {
            throw new \InvalidArgumentException('non-nullable interstate_train cannot be null');
        }
        $this->container['interstate_train'] = $interstate_train;

        return $this;
    }

    /**
     * Gets skybus
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getSkybus()
    {
        return $this->container['skybus'];
    }

    /**
     * Sets skybus
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $skybus Subset of disruption information applicable to skybus
     *
     * @return self
     */
    public function setSkybus($skybus)
    {
        if (is_null($skybus)) {
            throw new \InvalidArgumentException('non-nullable skybus cannot be null');
        }
        $this->container['skybus'] = $skybus;

        return $this;
    }

    /**
     * Gets taxi
     *
     * @return \OpenAPI\Client\Model\V3Disruption[]|null
     */
    public function getTaxi()
    {
        return $this->container['taxi'];
    }

    /**
     * Sets taxi
     *
     * @param \OpenAPI\Client\Model\V3Disruption[]|null $taxi Subset of disruption information applicable to taxi
     *
     * @return self
     */
    public function setTaxi($taxi)
    {
        if (is_null($taxi)) {
            throw new \InvalidArgumentException('non-nullable taxi cannot be null');
        }
        $this->container['taxi'] = $taxi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


