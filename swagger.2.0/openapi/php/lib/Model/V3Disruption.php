<?php
/**
 * V3Disruption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3Disruption Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3Disruption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.Disruption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disruption_id' => 'int',
        'title' => 'string',
        'url' => 'string',
        'description' => 'string',
        'disruption_status' => 'string',
        'disruption_type' => 'string',
        'published_on' => '\DateTime',
        'last_updated' => '\DateTime',
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'routes' => '\OpenAPI\Client\Model\V3DisruptionRoute[]',
        'stops' => '\OpenAPI\Client\Model\V3DisruptionStop[]',
        'colour' => 'string',
        'display_on_board' => 'bool',
        'display_status' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disruption_id' => 'int64',
        'title' => null,
        'url' => null,
        'description' => null,
        'disruption_status' => null,
        'disruption_type' => null,
        'published_on' => 'date-time',
        'last_updated' => 'date-time',
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'routes' => null,
        'stops' => null,
        'colour' => null,
        'display_on_board' => null,
        'display_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'disruption_id' => false,
        'title' => false,
        'url' => false,
        'description' => false,
        'disruption_status' => false,
        'disruption_type' => false,
        'published_on' => false,
        'last_updated' => false,
        'from_date' => false,
        'to_date' => false,
        'routes' => false,
        'stops' => false,
        'colour' => false,
        'display_on_board' => false,
        'display_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disruption_id' => 'disruption_id',
        'title' => 'title',
        'url' => 'url',
        'description' => 'description',
        'disruption_status' => 'disruption_status',
        'disruption_type' => 'disruption_type',
        'published_on' => 'published_on',
        'last_updated' => 'last_updated',
        'from_date' => 'from_date',
        'to_date' => 'to_date',
        'routes' => 'routes',
        'stops' => 'stops',
        'colour' => 'colour',
        'display_on_board' => 'display_on_board',
        'display_status' => 'display_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disruption_id' => 'setDisruptionId',
        'title' => 'setTitle',
        'url' => 'setUrl',
        'description' => 'setDescription',
        'disruption_status' => 'setDisruptionStatus',
        'disruption_type' => 'setDisruptionType',
        'published_on' => 'setPublishedOn',
        'last_updated' => 'setLastUpdated',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'routes' => 'setRoutes',
        'stops' => 'setStops',
        'colour' => 'setColour',
        'display_on_board' => 'setDisplayOnBoard',
        'display_status' => 'setDisplayStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disruption_id' => 'getDisruptionId',
        'title' => 'getTitle',
        'url' => 'getUrl',
        'description' => 'getDescription',
        'disruption_status' => 'getDisruptionStatus',
        'disruption_type' => 'getDisruptionType',
        'published_on' => 'getPublishedOn',
        'last_updated' => 'getLastUpdated',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'routes' => 'getRoutes',
        'stops' => 'getStops',
        'colour' => 'getColour',
        'display_on_board' => 'getDisplayOnBoard',
        'display_status' => 'getDisplayStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('disruption_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disruption_status', $data ?? [], null);
        $this->setIfExists('disruption_type', $data ?? [], null);
        $this->setIfExists('published_on', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('routes', $data ?? [], null);
        $this->setIfExists('stops', $data ?? [], null);
        $this->setIfExists('colour', $data ?? [], null);
        $this->setIfExists('display_on_board', $data ?? [], null);
        $this->setIfExists('display_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disruption_id
     *
     * @return int|null
     */
    public function getDisruptionId()
    {
        return $this->container['disruption_id'];
    }

    /**
     * Sets disruption_id
     *
     * @param int|null $disruption_id Disruption information identifier
     *
     * @return self
     */
    public function setDisruptionId($disruption_id)
    {
        if (is_null($disruption_id)) {
            throw new \InvalidArgumentException('non-nullable disruption_id cannot be null');
        }
        $this->container['disruption_id'] = $disruption_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Headline title summarising disruption information
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of relevant article on PTV website
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the disruption
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disruption_status
     *
     * @return string|null
     */
    public function getDisruptionStatus()
    {
        return $this->container['disruption_status'];
    }

    /**
     * Sets disruption_status
     *
     * @param string|null $disruption_status Status of the disruption (e.g. \"Planned\", \"Current\")
     *
     * @return self
     */
    public function setDisruptionStatus($disruption_status)
    {
        if (is_null($disruption_status)) {
            throw new \InvalidArgumentException('non-nullable disruption_status cannot be null');
        }
        $this->container['disruption_status'] = $disruption_status;

        return $this;
    }

    /**
     * Gets disruption_type
     *
     * @return string|null
     */
    public function getDisruptionType()
    {
        return $this->container['disruption_type'];
    }

    /**
     * Sets disruption_type
     *
     * @param string|null $disruption_type Type of disruption
     *
     * @return self
     */
    public function setDisruptionType($disruption_type)
    {
        if (is_null($disruption_type)) {
            throw new \InvalidArgumentException('non-nullable disruption_type cannot be null');
        }
        $this->container['disruption_type'] = $disruption_type;

        return $this;
    }

    /**
     * Gets published_on
     *
     * @return \DateTime|null
     */
    public function getPublishedOn()
    {
        return $this->container['published_on'];
    }

    /**
     * Sets published_on
     *
     * @param \DateTime|null $published_on Date and time disruption information is published on PTV website, in ISO 8601 UTC format
     *
     * @return self
     */
    public function setPublishedOn($published_on)
    {
        if (is_null($published_on)) {
            throw new \InvalidArgumentException('non-nullable published_on cannot be null');
        }
        $this->container['published_on'] = $published_on;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime|null $last_updated Date and time disruption information was last updated by PTV, in ISO 8601 UTC format
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date Date and time at which disruption begins, in ISO 8601 UTC format
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \OpenAPI\Client\Model\V3DisruptionRoute[]|null
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \OpenAPI\Client\Model\V3DisruptionRoute[]|null $routes Route relevant to a disruption (if applicable)
     *
     * @return self
     */
    public function setRoutes($routes)
    {
        if (is_null($routes)) {
            throw new \InvalidArgumentException('non-nullable routes cannot be null');
        }
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets stops
     *
     * @return \OpenAPI\Client\Model\V3DisruptionStop[]|null
     */
    public function getStops()
    {
        return $this->container['stops'];
    }

    /**
     * Sets stops
     *
     * @param \OpenAPI\Client\Model\V3DisruptionStop[]|null $stops Stop relevant to a disruption (if applicable)
     *
     * @return self
     */
    public function setStops($stops)
    {
        if (is_null($stops)) {
            throw new \InvalidArgumentException('non-nullable stops cannot be null');
        }
        $this->container['stops'] = $stops;

        return $this;
    }

    /**
     * Gets colour
     *
     * @return string|null
     */
    public function getColour()
    {
        return $this->container['colour'];
    }

    /**
     * Sets colour
     *
     * @param string|null $colour colour
     *
     * @return self
     */
    public function setColour($colour)
    {
        if (is_null($colour)) {
            throw new \InvalidArgumentException('non-nullable colour cannot be null');
        }
        $this->container['colour'] = $colour;

        return $this;
    }

    /**
     * Gets display_on_board
     *
     * @return bool|null
     */
    public function getDisplayOnBoard()
    {
        return $this->container['display_on_board'];
    }

    /**
     * Sets display_on_board
     *
     * @param bool|null $display_on_board display_on_board
     *
     * @return self
     */
    public function setDisplayOnBoard($display_on_board)
    {
        if (is_null($display_on_board)) {
            throw new \InvalidArgumentException('non-nullable display_on_board cannot be null');
        }
        $this->container['display_on_board'] = $display_on_board;

        return $this;
    }

    /**
     * Gets display_status
     *
     * @return bool|null
     */
    public function getDisplayStatus()
    {
        return $this->container['display_status'];
    }

    /**
     * Sets display_status
     *
     * @param bool|null $display_status display_status
     *
     * @return self
     */
    public function setDisplayStatus($display_status)
    {
        if (is_null($display_status)) {
            throw new \InvalidArgumentException('non-nullable display_status cannot be null');
        }
        $this->container['display_status'] = $display_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


