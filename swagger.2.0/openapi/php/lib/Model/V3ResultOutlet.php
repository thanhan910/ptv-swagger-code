<?php
/**
 * V3ResultOutlet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3ResultOutlet Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3ResultOutlet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.ResultOutlet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outlet_distance' => 'float',
        'outlet_slid_spid' => 'string',
        'outlet_name' => 'string',
        'outlet_business' => 'string',
        'outlet_latitude' => 'float',
        'outlet_longitude' => 'float',
        'outlet_suburb' => 'string',
        'outlet_postcode' => 'int',
        'outlet_business_hour_mon' => 'string',
        'outlet_business_hour_tue' => 'string',
        'outlet_business_hour_wed' => 'string',
        'outlet_business_hour_thur' => 'string',
        'outlet_business_hour_fri' => 'string',
        'outlet_business_hour_sat' => 'string',
        'outlet_business_hour_sun' => 'string',
        'outlet_notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outlet_distance' => 'float',
        'outlet_slid_spid' => null,
        'outlet_name' => null,
        'outlet_business' => null,
        'outlet_latitude' => 'float',
        'outlet_longitude' => 'float',
        'outlet_suburb' => null,
        'outlet_postcode' => 'int32',
        'outlet_business_hour_mon' => null,
        'outlet_business_hour_tue' => null,
        'outlet_business_hour_wed' => null,
        'outlet_business_hour_thur' => null,
        'outlet_business_hour_fri' => null,
        'outlet_business_hour_sat' => null,
        'outlet_business_hour_sun' => null,
        'outlet_notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outlet_distance' => false,
        'outlet_slid_spid' => false,
        'outlet_name' => false,
        'outlet_business' => false,
        'outlet_latitude' => false,
        'outlet_longitude' => false,
        'outlet_suburb' => false,
        'outlet_postcode' => false,
        'outlet_business_hour_mon' => false,
        'outlet_business_hour_tue' => false,
        'outlet_business_hour_wed' => false,
        'outlet_business_hour_thur' => false,
        'outlet_business_hour_fri' => false,
        'outlet_business_hour_sat' => false,
        'outlet_business_hour_sun' => false,
        'outlet_notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outlet_distance' => 'outlet_distance',
        'outlet_slid_spid' => 'outlet_slid_spid',
        'outlet_name' => 'outlet_name',
        'outlet_business' => 'outlet_business',
        'outlet_latitude' => 'outlet_latitude',
        'outlet_longitude' => 'outlet_longitude',
        'outlet_suburb' => 'outlet_suburb',
        'outlet_postcode' => 'outlet_postcode',
        'outlet_business_hour_mon' => 'outlet_business_hour_mon',
        'outlet_business_hour_tue' => 'outlet_business_hour_tue',
        'outlet_business_hour_wed' => 'outlet_business_hour_wed',
        'outlet_business_hour_thur' => 'outlet_business_hour_thur',
        'outlet_business_hour_fri' => 'outlet_business_hour_fri',
        'outlet_business_hour_sat' => 'outlet_business_hour_sat',
        'outlet_business_hour_sun' => 'outlet_business_hour_sun',
        'outlet_notes' => 'outlet_notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outlet_distance' => 'setOutletDistance',
        'outlet_slid_spid' => 'setOutletSlidSpid',
        'outlet_name' => 'setOutletName',
        'outlet_business' => 'setOutletBusiness',
        'outlet_latitude' => 'setOutletLatitude',
        'outlet_longitude' => 'setOutletLongitude',
        'outlet_suburb' => 'setOutletSuburb',
        'outlet_postcode' => 'setOutletPostcode',
        'outlet_business_hour_mon' => 'setOutletBusinessHourMon',
        'outlet_business_hour_tue' => 'setOutletBusinessHourTue',
        'outlet_business_hour_wed' => 'setOutletBusinessHourWed',
        'outlet_business_hour_thur' => 'setOutletBusinessHourThur',
        'outlet_business_hour_fri' => 'setOutletBusinessHourFri',
        'outlet_business_hour_sat' => 'setOutletBusinessHourSat',
        'outlet_business_hour_sun' => 'setOutletBusinessHourSun',
        'outlet_notes' => 'setOutletNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outlet_distance' => 'getOutletDistance',
        'outlet_slid_spid' => 'getOutletSlidSpid',
        'outlet_name' => 'getOutletName',
        'outlet_business' => 'getOutletBusiness',
        'outlet_latitude' => 'getOutletLatitude',
        'outlet_longitude' => 'getOutletLongitude',
        'outlet_suburb' => 'getOutletSuburb',
        'outlet_postcode' => 'getOutletPostcode',
        'outlet_business_hour_mon' => 'getOutletBusinessHourMon',
        'outlet_business_hour_tue' => 'getOutletBusinessHourTue',
        'outlet_business_hour_wed' => 'getOutletBusinessHourWed',
        'outlet_business_hour_thur' => 'getOutletBusinessHourThur',
        'outlet_business_hour_fri' => 'getOutletBusinessHourFri',
        'outlet_business_hour_sat' => 'getOutletBusinessHourSat',
        'outlet_business_hour_sun' => 'getOutletBusinessHourSun',
        'outlet_notes' => 'getOutletNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outlet_distance', $data ?? [], null);
        $this->setIfExists('outlet_slid_spid', $data ?? [], null);
        $this->setIfExists('outlet_name', $data ?? [], null);
        $this->setIfExists('outlet_business', $data ?? [], null);
        $this->setIfExists('outlet_latitude', $data ?? [], null);
        $this->setIfExists('outlet_longitude', $data ?? [], null);
        $this->setIfExists('outlet_suburb', $data ?? [], null);
        $this->setIfExists('outlet_postcode', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_mon', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_tue', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_wed', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_thur', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_fri', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_sat', $data ?? [], null);
        $this->setIfExists('outlet_business_hour_sun', $data ?? [], null);
        $this->setIfExists('outlet_notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outlet_distance
     *
     * @return float|null
     */
    public function getOutletDistance()
    {
        return $this->container['outlet_distance'];
    }

    /**
     * Sets outlet_distance
     *
     * @param float|null $outlet_distance Distance of outlet from input location (in metres); returns 0 if no location is input
     *
     * @return self
     */
    public function setOutletDistance($outlet_distance)
    {
        if (is_null($outlet_distance)) {
            throw new \InvalidArgumentException('non-nullable outlet_distance cannot be null');
        }
        $this->container['outlet_distance'] = $outlet_distance;

        return $this;
    }

    /**
     * Gets outlet_slid_spid
     *
     * @return string|null
     */
    public function getOutletSlidSpid()
    {
        return $this->container['outlet_slid_spid'];
    }

    /**
     * Sets outlet_slid_spid
     *
     * @param string|null $outlet_slid_spid The SLID / SPID
     *
     * @return self
     */
    public function setOutletSlidSpid($outlet_slid_spid)
    {
        if (is_null($outlet_slid_spid)) {
            throw new \InvalidArgumentException('non-nullable outlet_slid_spid cannot be null');
        }
        $this->container['outlet_slid_spid'] = $outlet_slid_spid;

        return $this;
    }

    /**
     * Gets outlet_name
     *
     * @return string|null
     */
    public function getOutletName()
    {
        return $this->container['outlet_name'];
    }

    /**
     * Sets outlet_name
     *
     * @param string|null $outlet_name The location name of the outlet
     *
     * @return self
     */
    public function setOutletName($outlet_name)
    {
        if (is_null($outlet_name)) {
            throw new \InvalidArgumentException('non-nullable outlet_name cannot be null');
        }
        $this->container['outlet_name'] = $outlet_name;

        return $this;
    }

    /**
     * Gets outlet_business
     *
     * @return string|null
     */
    public function getOutletBusiness()
    {
        return $this->container['outlet_business'];
    }

    /**
     * Sets outlet_business
     *
     * @param string|null $outlet_business The business name of the outlet
     *
     * @return self
     */
    public function setOutletBusiness($outlet_business)
    {
        if (is_null($outlet_business)) {
            throw new \InvalidArgumentException('non-nullable outlet_business cannot be null');
        }
        $this->container['outlet_business'] = $outlet_business;

        return $this;
    }

    /**
     * Gets outlet_latitude
     *
     * @return float|null
     */
    public function getOutletLatitude()
    {
        return $this->container['outlet_latitude'];
    }

    /**
     * Sets outlet_latitude
     *
     * @param float|null $outlet_latitude Geographic coordinate of latitude at outlet
     *
     * @return self
     */
    public function setOutletLatitude($outlet_latitude)
    {
        if (is_null($outlet_latitude)) {
            throw new \InvalidArgumentException('non-nullable outlet_latitude cannot be null');
        }
        $this->container['outlet_latitude'] = $outlet_latitude;

        return $this;
    }

    /**
     * Gets outlet_longitude
     *
     * @return float|null
     */
    public function getOutletLongitude()
    {
        return $this->container['outlet_longitude'];
    }

    /**
     * Sets outlet_longitude
     *
     * @param float|null $outlet_longitude Geographic coordinate of longitude at outlet
     *
     * @return self
     */
    public function setOutletLongitude($outlet_longitude)
    {
        if (is_null($outlet_longitude)) {
            throw new \InvalidArgumentException('non-nullable outlet_longitude cannot be null');
        }
        $this->container['outlet_longitude'] = $outlet_longitude;

        return $this;
    }

    /**
     * Gets outlet_suburb
     *
     * @return string|null
     */
    public function getOutletSuburb()
    {
        return $this->container['outlet_suburb'];
    }

    /**
     * Sets outlet_suburb
     *
     * @param string|null $outlet_suburb The city/municipality the outlet is in
     *
     * @return self
     */
    public function setOutletSuburb($outlet_suburb)
    {
        if (is_null($outlet_suburb)) {
            throw new \InvalidArgumentException('non-nullable outlet_suburb cannot be null');
        }
        $this->container['outlet_suburb'] = $outlet_suburb;

        return $this;
    }

    /**
     * Gets outlet_postcode
     *
     * @return int|null
     */
    public function getOutletPostcode()
    {
        return $this->container['outlet_postcode'];
    }

    /**
     * Sets outlet_postcode
     *
     * @param int|null $outlet_postcode The postcode for the outlet
     *
     * @return self
     */
    public function setOutletPostcode($outlet_postcode)
    {
        if (is_null($outlet_postcode)) {
            throw new \InvalidArgumentException('non-nullable outlet_postcode cannot be null');
        }
        $this->container['outlet_postcode'] = $outlet_postcode;

        return $this;
    }

    /**
     * Gets outlet_business_hour_mon
     *
     * @return string|null
     */
    public function getOutletBusinessHourMon()
    {
        return $this->container['outlet_business_hour_mon'];
    }

    /**
     * Sets outlet_business_hour_mon
     *
     * @param string|null $outlet_business_hour_mon The business hours on Monday
     *
     * @return self
     */
    public function setOutletBusinessHourMon($outlet_business_hour_mon)
    {
        if (is_null($outlet_business_hour_mon)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_mon cannot be null');
        }
        $this->container['outlet_business_hour_mon'] = $outlet_business_hour_mon;

        return $this;
    }

    /**
     * Gets outlet_business_hour_tue
     *
     * @return string|null
     */
    public function getOutletBusinessHourTue()
    {
        return $this->container['outlet_business_hour_tue'];
    }

    /**
     * Sets outlet_business_hour_tue
     *
     * @param string|null $outlet_business_hour_tue The business hours on Tuesday
     *
     * @return self
     */
    public function setOutletBusinessHourTue($outlet_business_hour_tue)
    {
        if (is_null($outlet_business_hour_tue)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_tue cannot be null');
        }
        $this->container['outlet_business_hour_tue'] = $outlet_business_hour_tue;

        return $this;
    }

    /**
     * Gets outlet_business_hour_wed
     *
     * @return string|null
     */
    public function getOutletBusinessHourWed()
    {
        return $this->container['outlet_business_hour_wed'];
    }

    /**
     * Sets outlet_business_hour_wed
     *
     * @param string|null $outlet_business_hour_wed The business hours on Wednesday
     *
     * @return self
     */
    public function setOutletBusinessHourWed($outlet_business_hour_wed)
    {
        if (is_null($outlet_business_hour_wed)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_wed cannot be null');
        }
        $this->container['outlet_business_hour_wed'] = $outlet_business_hour_wed;

        return $this;
    }

    /**
     * Gets outlet_business_hour_thur
     *
     * @return string|null
     */
    public function getOutletBusinessHourThur()
    {
        return $this->container['outlet_business_hour_thur'];
    }

    /**
     * Sets outlet_business_hour_thur
     *
     * @param string|null $outlet_business_hour_thur The business hours on Thursday
     *
     * @return self
     */
    public function setOutletBusinessHourThur($outlet_business_hour_thur)
    {
        if (is_null($outlet_business_hour_thur)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_thur cannot be null');
        }
        $this->container['outlet_business_hour_thur'] = $outlet_business_hour_thur;

        return $this;
    }

    /**
     * Gets outlet_business_hour_fri
     *
     * @return string|null
     */
    public function getOutletBusinessHourFri()
    {
        return $this->container['outlet_business_hour_fri'];
    }

    /**
     * Sets outlet_business_hour_fri
     *
     * @param string|null $outlet_business_hour_fri The business hours on Friday
     *
     * @return self
     */
    public function setOutletBusinessHourFri($outlet_business_hour_fri)
    {
        if (is_null($outlet_business_hour_fri)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_fri cannot be null');
        }
        $this->container['outlet_business_hour_fri'] = $outlet_business_hour_fri;

        return $this;
    }

    /**
     * Gets outlet_business_hour_sat
     *
     * @return string|null
     */
    public function getOutletBusinessHourSat()
    {
        return $this->container['outlet_business_hour_sat'];
    }

    /**
     * Sets outlet_business_hour_sat
     *
     * @param string|null $outlet_business_hour_sat The business hours on Saturday
     *
     * @return self
     */
    public function setOutletBusinessHourSat($outlet_business_hour_sat)
    {
        if (is_null($outlet_business_hour_sat)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_sat cannot be null');
        }
        $this->container['outlet_business_hour_sat'] = $outlet_business_hour_sat;

        return $this;
    }

    /**
     * Gets outlet_business_hour_sun
     *
     * @return string|null
     */
    public function getOutletBusinessHourSun()
    {
        return $this->container['outlet_business_hour_sun'];
    }

    /**
     * Sets outlet_business_hour_sun
     *
     * @param string|null $outlet_business_hour_sun The business hours on Sunday
     *
     * @return self
     */
    public function setOutletBusinessHourSun($outlet_business_hour_sun)
    {
        if (is_null($outlet_business_hour_sun)) {
            throw new \InvalidArgumentException('non-nullable outlet_business_hour_sun cannot be null');
        }
        $this->container['outlet_business_hour_sun'] = $outlet_business_hour_sun;

        return $this;
    }

    /**
     * Gets outlet_notes
     *
     * @return string|null
     */
    public function getOutletNotes()
    {
        return $this->container['outlet_notes'];
    }

    /**
     * Sets outlet_notes
     *
     * @param string|null $outlet_notes Any additional notes for the outlet such as 'Buy pre-loaded myki cards only'. May be null/empty.
     *
     * @return self
     */
    public function setOutletNotes($outlet_notes)
    {
        if (is_null($outlet_notes)) {
            throw new \InvalidArgumentException('non-nullable outlet_notes cannot be null');
        }
        $this->container['outlet_notes'] = $outlet_notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


