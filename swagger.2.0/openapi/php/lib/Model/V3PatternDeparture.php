<?php
/**
 * V3PatternDeparture
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3PatternDeparture Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3PatternDeparture implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.PatternDeparture';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skipped_stops' => '\OpenAPI\Client\Model\V3StopModel[]',
        'stop_id' => 'int',
        'route_id' => 'int',
        'run_id' => 'int',
        'run_ref' => 'string',
        'direction_id' => 'int',
        'disruption_ids' => 'int[]',
        'scheduled_departure_utc' => '\DateTime',
        'estimated_departure_utc' => '\DateTime',
        'at_platform' => 'bool',
        'platform_number' => 'string',
        'flags' => 'string',
        'departure_sequence' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'skipped_stops' => null,
        'stop_id' => 'int32',
        'route_id' => 'int32',
        'run_id' => 'int32',
        'run_ref' => null,
        'direction_id' => 'int32',
        'disruption_ids' => 'int64',
        'scheduled_departure_utc' => 'date-time',
        'estimated_departure_utc' => 'date-time',
        'at_platform' => null,
        'platform_number' => null,
        'flags' => null,
        'departure_sequence' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'skipped_stops' => false,
        'stop_id' => false,
        'route_id' => false,
        'run_id' => false,
        'run_ref' => false,
        'direction_id' => false,
        'disruption_ids' => false,
        'scheduled_departure_utc' => false,
        'estimated_departure_utc' => false,
        'at_platform' => false,
        'platform_number' => false,
        'flags' => false,
        'departure_sequence' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skipped_stops' => 'skipped_stops',
        'stop_id' => 'stop_id',
        'route_id' => 'route_id',
        'run_id' => 'run_id',
        'run_ref' => 'run_ref',
        'direction_id' => 'direction_id',
        'disruption_ids' => 'disruption_ids',
        'scheduled_departure_utc' => 'scheduled_departure_utc',
        'estimated_departure_utc' => 'estimated_departure_utc',
        'at_platform' => 'at_platform',
        'platform_number' => 'platform_number',
        'flags' => 'flags',
        'departure_sequence' => 'departure_sequence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skipped_stops' => 'setSkippedStops',
        'stop_id' => 'setStopId',
        'route_id' => 'setRouteId',
        'run_id' => 'setRunId',
        'run_ref' => 'setRunRef',
        'direction_id' => 'setDirectionId',
        'disruption_ids' => 'setDisruptionIds',
        'scheduled_departure_utc' => 'setScheduledDepartureUtc',
        'estimated_departure_utc' => 'setEstimatedDepartureUtc',
        'at_platform' => 'setAtPlatform',
        'platform_number' => 'setPlatformNumber',
        'flags' => 'setFlags',
        'departure_sequence' => 'setDepartureSequence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skipped_stops' => 'getSkippedStops',
        'stop_id' => 'getStopId',
        'route_id' => 'getRouteId',
        'run_id' => 'getRunId',
        'run_ref' => 'getRunRef',
        'direction_id' => 'getDirectionId',
        'disruption_ids' => 'getDisruptionIds',
        'scheduled_departure_utc' => 'getScheduledDepartureUtc',
        'estimated_departure_utc' => 'getEstimatedDepartureUtc',
        'at_platform' => 'getAtPlatform',
        'platform_number' => 'getPlatformNumber',
        'flags' => 'getFlags',
        'departure_sequence' => 'getDepartureSequence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('skipped_stops', $data ?? [], null);
        $this->setIfExists('stop_id', $data ?? [], null);
        $this->setIfExists('route_id', $data ?? [], null);
        $this->setIfExists('run_id', $data ?? [], null);
        $this->setIfExists('run_ref', $data ?? [], null);
        $this->setIfExists('direction_id', $data ?? [], null);
        $this->setIfExists('disruption_ids', $data ?? [], null);
        $this->setIfExists('scheduled_departure_utc', $data ?? [], null);
        $this->setIfExists('estimated_departure_utc', $data ?? [], null);
        $this->setIfExists('at_platform', $data ?? [], null);
        $this->setIfExists('platform_number', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('departure_sequence', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skipped_stops
     *
     * @return \OpenAPI\Client\Model\V3StopModel[]|null
     */
    public function getSkippedStops()
    {
        return $this->container['skipped_stops'];
    }

    /**
     * Sets skipped_stops
     *
     * @param \OpenAPI\Client\Model\V3StopModel[]|null $skipped_stops The stops to be skipped following the current departure in order.
     *
     * @return self
     */
    public function setSkippedStops($skipped_stops)
    {
        if (is_null($skipped_stops)) {
            throw new \InvalidArgumentException('non-nullable skipped_stops cannot be null');
        }
        $this->container['skipped_stops'] = $skipped_stops;

        return $this;
    }

    /**
     * Gets stop_id
     *
     * @return int|null
     */
    public function getStopId()
    {
        return $this->container['stop_id'];
    }

    /**
     * Sets stop_id
     *
     * @param int|null $stop_id Stop identifier
     *
     * @return self
     */
    public function setStopId($stop_id)
    {
        if (is_null($stop_id)) {
            throw new \InvalidArgumentException('non-nullable stop_id cannot be null');
        }
        $this->container['stop_id'] = $stop_id;

        return $this;
    }

    /**
     * Gets route_id
     *
     * @return int|null
     */
    public function getRouteId()
    {
        return $this->container['route_id'];
    }

    /**
     * Sets route_id
     *
     * @param int|null $route_id Route identifier
     *
     * @return self
     */
    public function setRouteId($route_id)
    {
        if (is_null($route_id)) {
            throw new \InvalidArgumentException('non-nullable route_id cannot be null');
        }
        $this->container['route_id'] = $route_id;

        return $this;
    }

    /**
     * Gets run_id
     *
     * @return int|null
     */
    public function getRunId()
    {
        return $this->container['run_id'];
    }

    /**
     * Sets run_id
     *
     * @param int|null $run_id Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
     *
     * @return self
     */
    public function setRunId($run_id)
    {
        if (is_null($run_id)) {
            throw new \InvalidArgumentException('non-nullable run_id cannot be null');
        }
        $this->container['run_id'] = $run_id;

        return $this;
    }

    /**
     * Gets run_ref
     *
     * @return string|null
     */
    public function getRunRef()
    {
        return $this->container['run_ref'];
    }

    /**
     * Sets run_ref
     *
     * @param string|null $run_ref Alphanumeric trip/service run identifier
     *
     * @return self
     */
    public function setRunRef($run_ref)
    {
        if (is_null($run_ref)) {
            throw new \InvalidArgumentException('non-nullable run_ref cannot be null');
        }
        $this->container['run_ref'] = $run_ref;

        return $this;
    }

    /**
     * Gets direction_id
     *
     * @return int|null
     */
    public function getDirectionId()
    {
        return $this->container['direction_id'];
    }

    /**
     * Sets direction_id
     *
     * @param int|null $direction_id Direction of travel identifier
     *
     * @return self
     */
    public function setDirectionId($direction_id)
    {
        if (is_null($direction_id)) {
            throw new \InvalidArgumentException('non-nullable direction_id cannot be null');
        }
        $this->container['direction_id'] = $direction_id;

        return $this;
    }

    /**
     * Gets disruption_ids
     *
     * @return int[]|null
     */
    public function getDisruptionIds()
    {
        return $this->container['disruption_ids'];
    }

    /**
     * Sets disruption_ids
     *
     * @param int[]|null $disruption_ids Disruption information identifier(s)
     *
     * @return self
     */
    public function setDisruptionIds($disruption_ids)
    {
        if (is_null($disruption_ids)) {
            throw new \InvalidArgumentException('non-nullable disruption_ids cannot be null');
        }
        $this->container['disruption_ids'] = $disruption_ids;

        return $this;
    }

    /**
     * Gets scheduled_departure_utc
     *
     * @return \DateTime|null
     */
    public function getScheduledDepartureUtc()
    {
        return $this->container['scheduled_departure_utc'];
    }

    /**
     * Sets scheduled_departure_utc
     *
     * @param \DateTime|null $scheduled_departure_utc Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
     *
     * @return self
     */
    public function setScheduledDepartureUtc($scheduled_departure_utc)
    {
        if (is_null($scheduled_departure_utc)) {
            throw new \InvalidArgumentException('non-nullable scheduled_departure_utc cannot be null');
        }
        $this->container['scheduled_departure_utc'] = $scheduled_departure_utc;

        return $this;
    }

    /**
     * Gets estimated_departure_utc
     *
     * @return \DateTime|null
     */
    public function getEstimatedDepartureUtc()
    {
        return $this->container['estimated_departure_utc'];
    }

    /**
     * Sets estimated_departure_utc
     *
     * @param \DateTime|null $estimated_departure_utc Real-time estimate of departure time and date in ISO 8601 UTC format
     *
     * @return self
     */
    public function setEstimatedDepartureUtc($estimated_departure_utc)
    {
        if (is_null($estimated_departure_utc)) {
            throw new \InvalidArgumentException('non-nullable estimated_departure_utc cannot be null');
        }
        $this->container['estimated_departure_utc'] = $estimated_departure_utc;

        return $this;
    }

    /**
     * Gets at_platform
     *
     * @return bool|null
     */
    public function getAtPlatform()
    {
        return $this->container['at_platform'];
    }

    /**
     * Sets at_platform
     *
     * @param bool|null $at_platform Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
     *
     * @return self
     */
    public function setAtPlatform($at_platform)
    {
        if (is_null($at_platform)) {
            throw new \InvalidArgumentException('non-nullable at_platform cannot be null');
        }
        $this->container['at_platform'] = $at_platform;

        return $this;
    }

    /**
     * Gets platform_number
     *
     * @return string|null
     */
    public function getPlatformNumber()
    {
        return $this->container['platform_number'];
    }

    /**
     * Sets platform_number
     *
     * @param string|null $platform_number Platform number at stop (metropolitan train only; returns null for other modes)
     *
     * @return self
     */
    public function setPlatformNumber($platform_number)
    {
        if (is_null($platform_number)) {
            throw new \InvalidArgumentException('non-nullable platform_number cannot be null');
        }
        $this->container['platform_number'] = $platform_number;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string|null $flags Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets departure_sequence
     *
     * @return int|null
     */
    public function getDepartureSequence()
    {
        return $this->container['departure_sequence'];
    }

    /**
     * Sets departure_sequence
     *
     * @param int|null $departure_sequence Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
     *
     * @return self
     */
    public function setDepartureSequence($departure_sequence)
    {
        if (is_null($departure_sequence)) {
            throw new \InvalidArgumentException('non-nullable departure_sequence cannot be null');
        }
        $this->container['departure_sequence'] = $departure_sequence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


