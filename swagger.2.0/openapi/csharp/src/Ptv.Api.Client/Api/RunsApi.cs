/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ptv.Api.Client.Client;
using Ptv.Api.Client.Model;

namespace Ptv.Api.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View all trip/service runs for a specific route ID
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        V3RunsResponse RunsForRoute(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all trip/service runs for a specific route ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        ApiResponse<V3RunsResponse> RunsForRouteWithHttpInfo(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all trip/service runs for a specific route ID and route type
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        V3RunsResponse RunsForRouteAndRouteType(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        ApiResponse<V3RunsResponse> RunsForRouteAndRouteTypeWithHttpInfo(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all trip/service runs for a specific run_ref
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        V3RunsResponse RunsForRun(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all trip/service runs for a specific run_ref
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        ApiResponse<V3RunsResponse> RunsForRunWithHttpInfo(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View the trip/service run for a specific run_ref and route type
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunResponse</returns>
        V3RunResponse RunsForRunAndRouteType(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunResponse</returns>
        ApiResponse<V3RunResponse> RunsForRunAndRouteTypeWithHttpInfo(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View all trip/service runs for a specific route ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        System.Threading.Tasks.Task<V3RunsResponse> RunsForRouteAsync(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all trip/service runs for a specific route ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3RunsResponse>> RunsForRouteWithHttpInfoAsync(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all trip/service runs for a specific route ID and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        System.Threading.Tasks.Task<V3RunsResponse> RunsForRouteAndRouteTypeAsync(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3RunsResponse>> RunsForRouteAndRouteTypeWithHttpInfoAsync(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all trip/service runs for a specific run_ref
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        System.Threading.Tasks.Task<V3RunsResponse> RunsForRunAsync(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all trip/service runs for a specific run_ref
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3RunsResponse>> RunsForRunWithHttpInfoAsync(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View the trip/service run for a specific run_ref and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunResponse</returns>
        System.Threading.Tasks.Task<V3RunResponse> RunsForRunAndRouteTypeAsync(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3RunResponse>> RunsForRunAndRouteTypeWithHttpInfoAsync(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRunsApi : IRunsApiSync, IRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RunsApi : IRunsApi
    {
        private Ptv.Api.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunsApi(string basePath)
        {
            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                new Ptv.Api.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RunsApi(Ptv.Api.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RunsApi(Ptv.Api.Client.Client.ISynchronousClient client, Ptv.Api.Client.Client.IAsynchronousClient asyncClient, Ptv.Api.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ptv.Api.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ptv.Api.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ptv.Api.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ptv.Api.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        public V3RunsResponse RunsForRoute(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = RunsForRouteWithHttpInfo(routeId, expand, dateUtc, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> RunsForRouteWithHttpInfo(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3RunsResponse>("/v3/runs/route/{route_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        public async System.Threading.Tasks.Task<V3RunsResponse> RunsForRouteAsync(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = await RunsForRouteWithHttpInfoAsync(routeId, expand, dateUtc, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3RunsResponse>> RunsForRouteWithHttpInfoAsync(int routeId, List<string>? expand = default(List<string>?), DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3RunsResponse>("/v3/runs/route/{route_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        public V3RunsResponse RunsForRouteAndRouteType(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = RunsForRouteAndRouteTypeWithHttpInfo(routeId, routeType, expand, dateUtc, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> RunsForRouteAndRouteTypeWithHttpInfo(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRouteAndRouteType");
            }

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRouteAndRouteType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3RunsResponse>("/v3/runs/route/{route_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRouteAndRouteType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        public async System.Threading.Tasks.Task<V3RunsResponse> RunsForRouteAndRouteTypeAsync(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = await RunsForRouteAndRouteTypeWithHttpInfoAsync(routeId, routeType, expand, dateUtc, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific route ID and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3RunsResponse>> RunsForRouteAndRouteTypeWithHttpInfoAsync(int routeId, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRouteAndRouteType");
            }


            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRouteAndRouteType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3RunsResponse>("/v3/runs/route/{route_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRouteAndRouteType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all trip/service runs for a specific run_ref 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunsResponse</returns>
        public V3RunsResponse RunsForRun(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = RunsForRunWithHttpInfo(runRef, expand, dateUtc, includeGeopath, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific run_ref 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> RunsForRunWithHttpInfo(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'runRef' is set
            if (runRef == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'runRef' when calling RunsApi->RunsForRun");
            }

            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRun");
            }

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("run_ref", Ptv.Api.Client.Client.ClientUtils.ParameterToString(runRef)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRun";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3RunsResponse>("/v3/runs/{run_ref}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all trip/service runs for a specific run_ref 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunsResponse</returns>
        public async System.Threading.Tasks.Task<V3RunsResponse> RunsForRunAsync(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunsResponse> localVarResponse = await RunsForRunWithHttpInfoAsync(runRef, expand, dateUtc, includeGeopath, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all trip/service runs for a specific run_ref 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3RunsResponse>> RunsForRunWithHttpInfoAsync(string runRef, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'runRef' is set
            if (runRef == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'runRef' when calling RunsApi->RunsForRun");
            }

            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRun");
            }


            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("run_ref", Ptv.Api.Client.Client.ClientUtils.ParameterToString(runRef)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRun";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3RunsResponse>("/v3/runs/{run_ref}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3RunResponse</returns>
        public V3RunResponse RunsForRunAndRouteType(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunResponse> localVarResponse = RunsForRunAndRouteTypeWithHttpInfo(runRef, routeType, expand, dateUtc, includeGeopath, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3RunResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3RunResponse> RunsForRunAndRouteTypeWithHttpInfo(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'runRef' is set
            if (runRef == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'runRef' when calling RunsApi->RunsForRunAndRouteType");
            }

            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRunAndRouteType");
            }

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("run_ref", Ptv.Api.Client.Client.ClientUtils.ParameterToString(runRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRunAndRouteType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3RunResponse>("/v3/runs/{run_ref}/route_type/{route_type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRunAndRouteType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3RunResponse</returns>
        public async System.Threading.Tasks.Task<V3RunResponse> RunsForRunAndRouteTypeAsync(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3RunResponse> localVarResponse = await RunsForRunAndRouteTypeWithHttpInfoAsync(runRef, routeType, expand, dateUtc, includeGeopath, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View the trip/service run for a specific run_ref and route type 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runRef">The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.</param>
        /// <param name="dateUtc">Date of the request. (optional - defaults to now) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3RunResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3RunResponse>> RunsForRunAndRouteTypeWithHttpInfoAsync(string runRef, int routeType, List<string> expand, DateTime? dateUtc = default(DateTime?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'runRef' is set
            if (runRef == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'runRef' when calling RunsApi->RunsForRunAndRouteType");
            }

            // verify the required parameter 'expand' is set
            if (expand == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'expand' when calling RunsApi->RunsForRunAndRouteType");
            }


            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("run_ref", Ptv.Api.Client.Client.ClientUtils.ParameterToString(runRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "RunsApi.RunsForRunAndRouteType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3RunResponse>("/v3/runs/{run_ref}/route_type/{route_type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunsForRunAndRouteType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
