/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ptv.Api.Client.Client;
using Ptv.Api.Client.Model;

namespace Ptv.Api.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisruptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View all disruptions for all route types
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        V3DisruptionsResponse DisruptionsGetAllDisruptions(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all disruptions for all route types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        ApiResponse<V3DisruptionsResponse> DisruptionsGetAllDisruptionsWithHttpInfo(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View a specific disruption
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionResponse</returns>
        V3DisruptionResponse DisruptionsGetDisruptionById(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View a specific disruption
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionResponse</returns>
        ApiResponse<V3DisruptionResponse> DisruptionsGetDisruptionByIdWithHttpInfo(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get all disruption modes
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionModesResponse</returns>
        V3DisruptionModesResponse DisruptionsGetDisruptionModes(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all disruption modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionModesResponse</returns>
        ApiResponse<V3DisruptionModesResponse> DisruptionsGetDisruptionModesWithHttpInfo(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all disruptions for a particular route
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        V3DisruptionsResponse DisruptionsGetDisruptionsByRoute(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all disruptions for a particular route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteWithHttpInfo(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all disruptions for a particular route and stop
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        V3DisruptionsResponse DisruptionsGetDisruptionsByRouteAndStop(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all disruptions for a particular route and stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAndStopWithHttpInfo(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all disruptions for a particular stop
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        V3DisruptionsResponse DisruptionsGetDisruptionsByStop(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all disruptions for a particular stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByStopWithHttpInfo(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisruptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View all disruptions for all route types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetAllDisruptionsAsync(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all disruptions for all route types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionsResponse>> DisruptionsGetAllDisruptionsWithHttpInfoAsync(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View a specific disruption
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionResponse> DisruptionsGetDisruptionByIdAsync(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View a specific disruption
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionResponse>> DisruptionsGetDisruptionByIdWithHttpInfoAsync(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all disruption modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionModesResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionModesResponse> DisruptionsGetDisruptionModesAsync(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all disruption modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionModesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionModesResponse>> DisruptionsGetDisruptionModesWithHttpInfoAsync(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all disruptions for a particular route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAsync(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all disruptions for a particular route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByRouteWithHttpInfoAsync(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all disruptions for a particular route and stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAndStopAsync(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all disruptions for a particular route and stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByRouteAndStopWithHttpInfoAsync(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all disruptions for a particular stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByStopAsync(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all disruptions for a particular stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByStopWithHttpInfoAsync(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisruptionsApi : IDisruptionsApiSync, IDisruptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DisruptionsApi : IDisruptionsApi
    {
        private Ptv.Api.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisruptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisruptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisruptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisruptionsApi(string basePath)
        {
            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                new Ptv.Api.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisruptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DisruptionsApi(Ptv.Api.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisruptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DisruptionsApi(Ptv.Api.Client.Client.ISynchronousClient client, Ptv.Api.Client.Client.IAsynchronousClient asyncClient, Ptv.Api.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ptv.Api.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ptv.Api.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ptv.Api.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ptv.Api.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View all disruptions for all route types 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        public V3DisruptionsResponse DisruptionsGetAllDisruptions(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = DisruptionsGetAllDisruptionsWithHttpInfo(routeTypes, disruptionModes, disruptionStatus, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for all route types 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> DisruptionsGetAllDisruptionsWithHttpInfo(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (routeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "route_types", routeTypes));
            }
            if (disruptionModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "disruption_modes", disruptionModes));
            }
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetAllDisruptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionsResponse>("/v3/disruptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetAllDisruptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for all route types 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetAllDisruptionsAsync(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = await DisruptionsGetAllDisruptionsWithHttpInfoAsync(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for all route types 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="disruptionModes">Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse>> DisruptionsGetAllDisruptionsWithHttpInfoAsync(List<int>? routeTypes = default(List<int>?), List<int>? disruptionModes = default(List<int>?), string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (routeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "route_types", routeTypes));
            }
            if (disruptionModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "disruption_modes", disruptionModes));
            }
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetAllDisruptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionsResponse>("/v3/disruptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetAllDisruptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View a specific disruption 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionResponse</returns>
        public V3DisruptionResponse DisruptionsGetDisruptionById(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionResponse> localVarResponse = DisruptionsGetDisruptionByIdWithHttpInfo(disruptionId, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View a specific disruption 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionResponse> DisruptionsGetDisruptionByIdWithHttpInfo(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("disruption_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(disruptionId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionResponse>("/v3/disruptions/{disruption_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View a specific disruption 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionResponse> DisruptionsGetDisruptionByIdAsync(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionResponse> localVarResponse = await DisruptionsGetDisruptionByIdWithHttpInfoAsync(disruptionId, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View a specific disruption 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disruptionId">Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionResponse>> DisruptionsGetDisruptionByIdWithHttpInfoAsync(long disruptionId, string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("disruption_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(disruptionId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionResponse>("/v3/disruptions/{disruption_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all disruption modes 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionModesResponse</returns>
        public V3DisruptionModesResponse DisruptionsGetDisruptionModes(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionModesResponse> localVarResponse = DisruptionsGetDisruptionModesWithHttpInfo(token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all disruption modes 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionModesResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionModesResponse> DisruptionsGetDisruptionModesWithHttpInfo(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionModesResponse>("/v3/disruptions/modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all disruption modes 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionModesResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionModesResponse> DisruptionsGetDisruptionModesAsync(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionModesResponse> localVarResponse = await DisruptionsGetDisruptionModesWithHttpInfoAsync(token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all disruption modes 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionModesResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionModesResponse>> DisruptionsGetDisruptionModesWithHttpInfoAsync(string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionModes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionModesResponse>("/v3/disruptions/modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionModes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        public V3DisruptionsResponse DisruptionsGetDisruptionsByRoute(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = DisruptionsGetDisruptionsByRouteWithHttpInfo(routeId, disruptionStatus, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteWithHttpInfo(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionsResponse>("/v3/disruptions/route/{route_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAsync(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = await DisruptionsGetDisruptionsByRouteWithHttpInfoAsync(routeId, disruptionStatus, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByRouteWithHttpInfoAsync(int routeId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionsResponse>("/v3/disruptions/route/{route_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular route and stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        public V3DisruptionsResponse DisruptionsGetDisruptionsByRouteAndStop(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = DisruptionsGetDisruptionsByRouteAndStopWithHttpInfo(routeId, stopId, disruptionStatus, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular route and stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAndStopWithHttpInfo(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByRouteAndStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionsResponse>("/v3/disruptions/route/{route_id}/stop/{stop_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByRouteAndStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular route and stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByRouteAndStopAsync(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = await DisruptionsGetDisruptionsByRouteAndStopWithHttpInfoAsync(routeId, stopId, disruptionStatus, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular route and stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByRouteAndStopWithHttpInfoAsync(int routeId, int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByRouteAndStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionsResponse>("/v3/disruptions/route/{route_id}/stop/{stop_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByRouteAndStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DisruptionsResponse</returns>
        public V3DisruptionsResponse DisruptionsGetDisruptionsByStop(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = DisruptionsGetDisruptionsByStopWithHttpInfo(stopId, disruptionStatus, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DisruptionsResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> DisruptionsGetDisruptionsByStopWithHttpInfo(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DisruptionsResponse>("/v3/disruptions/stop/{stop_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all disruptions for a particular stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DisruptionsResponse</returns>
        public async System.Threading.Tasks.Task<V3DisruptionsResponse> DisruptionsGetDisruptionsByStopAsync(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse> localVarResponse = await DisruptionsGetDisruptionsByStopWithHttpInfoAsync(stopId, disruptionStatus, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all disruptions for a particular stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API - v3/stops</param>
        /// <param name="disruptionStatus">Filter by status of disruption (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DisruptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DisruptionsResponse>> DisruptionsGetDisruptionsByStopWithHttpInfoAsync(int stopId, string? disruptionStatus = default(string?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (disruptionStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "disruption_status", disruptionStatus));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DisruptionsApi.DisruptionsGetDisruptionsByStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DisruptionsResponse>("/v3/disruptions/stop/{stop_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisruptionsGetDisruptionsByStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
