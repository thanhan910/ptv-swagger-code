/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ptv.Api.Client.Client;
using Ptv.Api.Client.Model;

namespace Ptv.Api.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeparturesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DeparturesResponse</returns>
        V3DeparturesResponse DeparturesGetForStop(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        ApiResponse<V3DeparturesResponse> DeparturesGetForStopWithHttpInfo(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DeparturesResponse</returns>
        V3DeparturesResponse DeparturesGetForStopAndRoute(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        ApiResponse<V3DeparturesResponse> DeparturesGetForStopAndRouteWithHttpInfo(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeparturesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAsync(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopWithHttpInfoAsync(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAndRouteAsync(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAndRouteWithHttpInfoAsync(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeparturesApi : IDeparturesApiSync, IDeparturesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeparturesApi : IDeparturesApi
    {
        private Ptv.Api.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeparturesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeparturesApi(string basePath)
        {
            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                new Ptv.Api.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeparturesApi(Ptv.Api.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeparturesApi(Ptv.Api.Client.Client.ISynchronousClient client, Ptv.Api.Client.Client.IAsynchronousClient asyncClient, Ptv.Api.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ptv.Api.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ptv.Api.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ptv.Api.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ptv.Api.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DeparturesResponse</returns>
        public V3DeparturesResponse DeparturesGetForStop(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> localVarResponse = DeparturesGetForStopWithHttpInfo(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> DeparturesGetForStopWithHttpInfo(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (platformNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "platform_numbers", platformNumbers));
            }
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (includeCancelled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_cancelled", includeCancelled));
            }
            if (lookBackwards != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "look_backwards", lookBackwards));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DeparturesApi.DeparturesGetForStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DeparturesResponse>("/v3/departures/route_type/{route_type}/stop/{stop_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeparturesGetForStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        public async System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAsync(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> localVarResponse = await DeparturesGetForStopWithHttpInfoAsync(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse>> DeparturesGetForStopWithHttpInfoAsync(int routeType, int stopId, List<int>? platformNumbers = default(List<int>?), int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            if (platformNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "platform_numbers", platformNumbers));
            }
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (includeCancelled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_cancelled", includeCancelled));
            }
            if (lookBackwards != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "look_backwards", lookBackwards));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DeparturesApi.DeparturesGetForStop";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DeparturesResponse>("/v3/departures/route_type/{route_type}/stop/{stop_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeparturesGetForStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DeparturesResponse</returns>
        public V3DeparturesResponse DeparturesGetForStopAndRoute(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> localVarResponse = DeparturesGetForStopAndRouteWithHttpInfo(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> DeparturesGetForStopAndRouteWithHttpInfo(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'routeId' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            }

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (includeCancelled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_cancelled", includeCancelled));
            }
            if (lookBackwards != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "look_backwards", lookBackwards));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DeparturesApi.DeparturesGetForStopAndRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DeparturesResponse>("/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeparturesGetForStopAndRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        public async System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAndRouteAsync(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse> localVarResponse = await DeparturesGetForStopAndRouteWithHttpInfoAsync(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAndRouteWithHttpInfoAsync(int routeType, int stopId, string routeId, int? directionId = default(int?), bool? gtfs = default(bool?), DateTime? dateUtc = default(DateTime?), int? maxResults = default(int?), bool? includeCancelled = default(bool?), bool? lookBackwards = default(bool?), List<string>? expand = default(List<string>?), bool? includeGeopath = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
            {
                throw new Ptv.Api.Client.Client.ApiException(400, "Missing required parameter 'routeId' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            }


            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (dateUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "date_utc", dateUtc));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (includeCancelled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_cancelled", includeCancelled));
            }
            if (lookBackwards != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "look_backwards", lookBackwards));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "DeparturesApi.DeparturesGetForStopAndRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DeparturesResponse>("/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeparturesGetForStopAndRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
