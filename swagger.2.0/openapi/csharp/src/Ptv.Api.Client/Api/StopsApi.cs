/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ptv.Api.Client.Client;
using Ptv.Api.Client.Model;

namespace Ptv.Api.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only)
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopResponse</returns>
        V3StopResponse StopsStopDetails(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopResponse</returns>
        ApiResponse<V3StopResponse> StopsStopDetailsWithHttpInfo(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all stops near a specific location
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopsByDistanceResponse</returns>
        V3StopsByDistanceResponse StopsStopsByGeolocation(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all stops near a specific location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopsByDistanceResponse</returns>
        ApiResponse<V3StopsByDistanceResponse> StopsStopsByGeolocationWithHttpInfo(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        /// <summary>
        /// View all stops on a specific route
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopsOnRouteResponse</returns>
        V3StopsOnRouteResponse StopsStopsForRoute(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);

        /// <summary>
        /// View all stops on a specific route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopsOnRouteResponse</returns>
        ApiResponse<V3StopsOnRouteResponse> StopsStopsForRouteWithHttpInfo(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopResponse</returns>
        System.Threading.Tasks.Task<V3StopResponse> StopsStopDetailsAsync(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3StopResponse>> StopsStopDetailsWithHttpInfoAsync(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all stops near a specific location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopsByDistanceResponse</returns>
        System.Threading.Tasks.Task<V3StopsByDistanceResponse> StopsStopsByGeolocationAsync(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all stops near a specific location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopsByDistanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3StopsByDistanceResponse>> StopsStopsByGeolocationWithHttpInfoAsync(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View all stops on a specific route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopsOnRouteResponse</returns>
        System.Threading.Tasks.Task<V3StopsOnRouteResponse> StopsStopsForRouteAsync(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View all stops on a specific route
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopsOnRouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3StopsOnRouteResponse>> StopsStopsForRouteWithHttpInfoAsync(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopsApi : IStopsApiSync, IStopsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StopsApi : IStopsApi
    {
        private Ptv.Api.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StopsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StopsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StopsApi(string basePath)
        {
            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                new Ptv.Api.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StopsApi(Ptv.Api.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ptv.Api.Client.Client.Configuration.MergeConfigurations(
                Ptv.Api.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ptv.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StopsApi(Ptv.Api.Client.Client.ISynchronousClient client, Ptv.Api.Client.Client.IAsynchronousClient asyncClient, Ptv.Api.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ptv.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ptv.Api.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ptv.Api.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ptv.Api.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ptv.Api.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only) 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopResponse</returns>
        public V3StopResponse StopsStopDetails(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopResponse> localVarResponse = StopsStopDetailsWithHttpInfo(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only) 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3StopResponse> StopsStopDetailsWithHttpInfo(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            if (stopLocation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_location", stopLocation));
            }
            if (stopAmenities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_amenities", stopAmenities));
            }
            if (stopAccessibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_accessibility", stopAccessibility));
            }
            if (stopContact != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_contact", stopContact));
            }
            if (stopTicket != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_ticket", stopTicket));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (stopStaffing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_staffing", stopStaffing));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3StopResponse>("/v3/stops/{stop_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only) 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopResponse</returns>
        public async System.Threading.Tasks.Task<V3StopResponse> StopsStopDetailsAsync(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopResponse> localVarResponse = await StopsStopDetailsWithHttpInfoAsync(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only) 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not (optional)</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3StopResponse>> StopsStopDetailsWithHttpInfoAsync(int stopId, int routeType, bool? stopLocation = default(bool?), bool? stopAmenities = default(bool?), bool? stopAccessibility = default(bool?), bool? stopContact = default(bool?), bool? stopTicket = default(bool?), bool? gtfs = default(bool?), bool? stopStaffing = default(bool?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stop_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(stopId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            if (stopLocation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_location", stopLocation));
            }
            if (stopAmenities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_amenities", stopAmenities));
            }
            if (stopAccessibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_accessibility", stopAccessibility));
            }
            if (stopContact != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_contact", stopContact));
            }
            if (stopTicket != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_ticket", stopTicket));
            }
            if (gtfs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "gtfs", gtfs));
            }
            if (stopStaffing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_staffing", stopStaffing));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3StopResponse>("/v3/stops/{stop_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all stops near a specific location 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopsByDistanceResponse</returns>
        public V3StopsByDistanceResponse StopsStopsByGeolocation(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopsByDistanceResponse> localVarResponse = StopsStopsByGeolocationWithHttpInfo(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all stops near a specific location 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopsByDistanceResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3StopsByDistanceResponse> StopsStopsByGeolocationWithHttpInfo(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", Ptv.Api.Client.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", Ptv.Api.Client.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (routeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "route_types", routeTypes));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (maxDistance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_distance", maxDistance));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopsByGeolocation";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3StopsByDistanceResponse>("/v3/stops/location/{latitude},{longitude}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopsByGeolocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all stops near a specific location 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopsByDistanceResponse</returns>
        public async System.Threading.Tasks.Task<V3StopsByDistanceResponse> StopsStopsByGeolocationAsync(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopsByDistanceResponse> localVarResponse = await StopsStopsByGeolocationWithHttpInfoAsync(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all stops near a specific location 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30) (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopsByDistanceResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3StopsByDistanceResponse>> StopsStopsByGeolocationWithHttpInfoAsync(float latitude, float longitude, List<int>? routeTypes = default(List<int>?), int? maxResults = default(int?), double? maxDistance = default(double?), bool? stopDisruptions = default(bool?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", Ptv.Api.Client.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", Ptv.Api.Client.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (routeTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("multi", "route_types", routeTypes));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults));
            }
            if (maxDistance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "max_distance", maxDistance));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopsByGeolocation";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3StopsByDistanceResponse>("/v3/stops/location/{latitude},{longitude}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopsByGeolocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all stops on a specific route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3StopsOnRouteResponse</returns>
        public V3StopsOnRouteResponse StopsStopsForRoute(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopsOnRouteResponse> localVarResponse = StopsStopsForRouteWithHttpInfo(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all stops on a specific route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3StopsOnRouteResponse</returns>
        public Ptv.Api.Client.Client.ApiResponse<V3StopsOnRouteResponse> StopsStopsForRouteWithHttpInfo(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0)
        {
            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (geopathUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "geopath_utc", geopathUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopsForRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<V3StopsOnRouteResponse>("/v3/stops/route/{route_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopsForRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View all stops on a specific route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3StopsOnRouteResponse</returns>
        public async System.Threading.Tasks.Task<V3StopsOnRouteResponse> StopsStopsForRouteAsync(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ptv.Api.Client.Client.ApiResponse<V3StopsOnRouteResponse> localVarResponse = await StopsStopsForRouteWithHttpInfoAsync(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View all stops on a specific route 
        /// </summary>
        /// <exception cref="Ptv.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false) (optional)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false) (optional)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3StopsOnRouteResponse)</returns>
        public async System.Threading.Tasks.Task<Ptv.Api.Client.Client.ApiResponse<V3StopsOnRouteResponse>> StopsStopsForRouteWithHttpInfoAsync(int routeId, int routeType, int? directionId = default(int?), bool? stopDisruptions = default(bool?), bool? includeGeopath = default(bool?), DateTime? geopathUtc = default(DateTime?), string? token = default(string?), string? devid = default(string?), string? signature = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ptv.Api.Client.Client.RequestOptions localVarRequestOptions = new Ptv.Api.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/html"
            };

            var localVarContentType = Ptv.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ptv.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("route_id", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("route_type", Ptv.Api.Client.Client.ClientUtils.ParameterToString(routeType)); // path parameter
            if (directionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "direction_id", directionId));
            }
            if (stopDisruptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "stop_disruptions", stopDisruptions));
            }
            if (includeGeopath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "include_geopath", includeGeopath));
            }
            if (geopathUtc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "geopath_utc", geopathUtc));
            }
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }
            if (devid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "devid", devid));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ptv.Api.Client.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }

            localVarRequestOptions.Operation = "StopsApi.StopsStopsForRoute";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3StopsOnRouteResponse>("/v3/stops/route/{route_id}/route_type/{route_type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopsStopsForRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
