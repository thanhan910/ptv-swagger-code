/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ptv.Api.Client.Client.OpenAPIDateConverter;

namespace Ptv.Api.Client.Model
{
    /// <summary>
    /// V3SearchParameters
    /// </summary>
    [DataContract(Name = "V3.SearchParameters")]
    public partial class V3SearchParameters : IValidatableObject
    {
        /// <summary>
        /// Defines RouteTypes
        /// </summary>
        public enum RouteTypesEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V3SearchParameters" /> class.
        /// </summary>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified).</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude.</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude.</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters.</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable.</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true).</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true).</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true).</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false).</param>
        public V3SearchParameters(List<RouteTypesEnum> routeTypes = default(List<RouteTypesEnum>), float latitude = default(float), float longitude = default(float), float maxDistance = default(float), bool includeAddresses = default(bool), bool includeOutlets = default(bool), bool matchStopBySuburb = default(bool), bool matchRouteBySuburb = default(bool), bool matchStopByGtfsStopId = default(bool))
        {
            this.RouteTypes = routeTypes;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.MaxDistance = maxDistance;
            this.IncludeAddresses = includeAddresses;
            this.IncludeOutlets = includeOutlets;
            this.MatchStopBySuburb = matchStopBySuburb;
            this.MatchRouteBySuburb = matchRouteBySuburb;
            this.MatchStopByGtfsStopId = matchStopByGtfsStopId;
        }

        /// <summary>
        /// Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
        /// </summary>
        /// <value>Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)</value>
        [DataMember(Name = "route_types", EmitDefaultValue = false)]
        public List<V3SearchParameters.RouteTypesEnum> RouteTypes { get; set; }

        /// <summary>
        /// Filter by geographic coordinate of latitude
        /// </summary>
        /// <value>Filter by geographic coordinate of latitude</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public float Latitude { get; set; }

        /// <summary>
        /// Filter by geographic coordinate of longitude
        /// </summary>
        /// <value>Filter by geographic coordinate of longitude</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public float Longitude { get; set; }

        /// <summary>
        /// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
        /// </summary>
        /// <value>Filter by maximum distance (in metres) from location specified via latitude and longitude parameters</value>
        [DataMember(Name = "max_distance", EmitDefaultValue = false)]
        public float MaxDistance { get; set; }

        /// <summary>
        /// Placeholder for future development; currently unavailable
        /// </summary>
        /// <value>Placeholder for future development; currently unavailable</value>
        [DataMember(Name = "include_addresses", EmitDefaultValue = true)]
        public bool IncludeAddresses { get; set; }

        /// <summary>
        /// Indicates if outlets will be returned in response (default &#x3D; true)
        /// </summary>
        /// <value>Indicates if outlets will be returned in response (default &#x3D; true)</value>
        [DataMember(Name = "include_outlets", EmitDefaultValue = true)]
        public bool IncludeOutlets { get; set; }

        /// <summary>
        /// Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
        /// </summary>
        /// <value>Indicates whether to find stops by suburbs in the search term (default &#x3D; true)</value>
        [DataMember(Name = "match_stop_by_suburb", EmitDefaultValue = true)]
        public bool MatchStopBySuburb { get; set; }

        /// <summary>
        /// Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
        /// </summary>
        /// <value>Indicates whether to find routes by suburbs in the search term (default &#x3D; true)</value>
        [DataMember(Name = "match_route_by_suburb", EmitDefaultValue = true)]
        public bool MatchRouteBySuburb { get; set; }

        /// <summary>
        /// Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
        /// </summary>
        /// <value>Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)</value>
        [DataMember(Name = "match_stop_by_gtfs_stop_id", EmitDefaultValue = true)]
        public bool MatchStopByGtfsStopId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3SearchParameters {\n");
            sb.Append("  RouteTypes: ").Append(RouteTypes).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("  IncludeAddresses: ").Append(IncludeAddresses).Append("\n");
            sb.Append("  IncludeOutlets: ").Append(IncludeOutlets).Append("\n");
            sb.Append("  MatchStopBySuburb: ").Append(MatchStopBySuburb).Append("\n");
            sb.Append("  MatchRouteBySuburb: ").Append(MatchRouteBySuburb).Append("\n");
            sb.Append("  MatchStopByGtfsStopId: ").Append(MatchStopByGtfsStopId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
