/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ptv.Api.Client.Client.OpenAPIDateConverter;

namespace Ptv.Api.Client.Model
{
    /// <summary>
    /// V3DynamoDbTimetable
    /// </summary>
    [DataContract(Name = "V3.DynamoDbTimetable")]
    public partial class V3DynamoDbTimetable : IValidatableObject
    {
        /// <summary>
        /// A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)
        /// </summary>
        /// <value>A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)</value>
        public enum TransportTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4
        }


        /// <summary>
        /// A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)
        /// </summary>
        /// <value>A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)</value>
        [DataMember(Name = "transport_type", EmitDefaultValue = false)]
        public TransportTypeEnum? TransportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3DynamoDbTimetable" /> class.
        /// </summary>
        /// <param name="tableName">Name of corresponding table in DynamoDB..</param>
        /// <param name="parserVersion">Parser verison.</param>
        /// <param name="parserMappingVersion">Diva Mapping Version used to load Parser into DynamoDB.</param>
        /// <param name="ptVersion">PT version.</param>
        /// <param name="ptMappingVersion">Diva Mapping Version used to load PT into DynamoDB.</param>
        /// <param name="transportType">A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider).</param>
        /// <param name="exists">True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),  or false if there are no records for this date and transport type..</param>
        public V3DynamoDbTimetable(string tableName = default(string), long parserVersion = default(long), string parserMappingVersion = default(string), long ptVersion = default(long), string ptMappingVersion = default(string), TransportTypeEnum? transportType = default(TransportTypeEnum?), bool exists = default(bool))
        {
            this.TableName = tableName;
            this.ParserVersion = parserVersion;
            this.ParserMappingVersion = parserMappingVersion;
            this.PtVersion = ptVersion;
            this.PtMappingVersion = ptMappingVersion;
            this.TransportType = transportType;
            this.Exists = exists;
        }

        /// <summary>
        /// Name of corresponding table in DynamoDB.
        /// </summary>
        /// <value>Name of corresponding table in DynamoDB.</value>
        [DataMember(Name = "table_name", EmitDefaultValue = false)]
        public string TableName { get; set; }

        /// <summary>
        /// Parser verison
        /// </summary>
        /// <value>Parser verison</value>
        [DataMember(Name = "parser_version", EmitDefaultValue = false)]
        public long ParserVersion { get; set; }

        /// <summary>
        /// Diva Mapping Version used to load Parser into DynamoDB
        /// </summary>
        /// <value>Diva Mapping Version used to load Parser into DynamoDB</value>
        [DataMember(Name = "parser_mapping_version", EmitDefaultValue = false)]
        public string ParserMappingVersion { get; set; }

        /// <summary>
        /// PT version
        /// </summary>
        /// <value>PT version</value>
        [DataMember(Name = "pt_version", EmitDefaultValue = false)]
        public long PtVersion { get; set; }

        /// <summary>
        /// Diva Mapping Version used to load PT into DynamoDB
        /// </summary>
        /// <value>Diva Mapping Version used to load PT into DynamoDB</value>
        [DataMember(Name = "pt_mapping_version", EmitDefaultValue = false)]
        public string PtMappingVersion { get; set; }

        /// <summary>
        /// Formated date string of applicable date
        /// </summary>
        /// <value>Formated date string of applicable date</value>
        [DataMember(Name = "applicable_local_date", EmitDefaultValue = false)]
        public string ApplicableLocalDate { get; private set; }

        /// <summary>
        /// Returns false as ApplicableLocalDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicableLocalDate()
        {
            return false;
        }
        /// <summary>
        /// True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),  or false if there are no records for this date and transport type.
        /// </summary>
        /// <value>True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),  or false if there are no records for this date and transport type.</value>
        [DataMember(Name = "exists", EmitDefaultValue = true)]
        public bool Exists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3DynamoDbTimetable {\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  ParserVersion: ").Append(ParserVersion).Append("\n");
            sb.Append("  ParserMappingVersion: ").Append(ParserMappingVersion).Append("\n");
            sb.Append("  PtVersion: ").Append(PtVersion).Append("\n");
            sb.Append("  PtMappingVersion: ").Append(PtMappingVersion).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  ApplicableLocalDate: ").Append(ApplicableLocalDate).Append("\n");
            sb.Append("  Exists: ").Append(Exists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
