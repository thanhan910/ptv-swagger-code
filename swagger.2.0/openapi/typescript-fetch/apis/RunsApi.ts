/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria\'s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V3ErrorResponse,
  V3RunResponse,
  V3RunsResponse,
} from '../models/index';
import {
    V3ErrorResponseFromJSON,
    V3ErrorResponseToJSON,
    V3RunResponseFromJSON,
    V3RunResponseToJSON,
    V3RunsResponseFromJSON,
    V3RunsResponseToJSON,
} from '../models/index';

export interface RunsForRouteRequest {
    routeId: number;
    expand?: Array<RunsForRouteExpandEnum>;
    dateUtc?: Date;
    token?: string;
    devid?: string;
    signature?: string;
}

export interface RunsForRouteAndRouteTypeRequest {
    routeId: number;
    routeType: RunsForRouteAndRouteTypeRouteTypeEnum;
    expand: Array<RunsForRouteAndRouteTypeExpandEnum>;
    dateUtc?: Date;
    token?: string;
    devid?: string;
    signature?: string;
}

export interface RunsForRunRequest {
    runRef: string;
    expand: Array<RunsForRunExpandEnum>;
    dateUtc?: Date;
    includeGeopath?: boolean;
    token?: string;
    devid?: string;
    signature?: string;
}

export interface RunsForRunAndRouteTypeRequest {
    runRef: string;
    routeType: RunsForRunAndRouteTypeRouteTypeEnum;
    expand: Array<RunsForRunAndRouteTypeExpandEnum>;
    dateUtc?: Date;
    includeGeopath?: boolean;
    token?: string;
    devid?: string;
    signature?: string;
}

/**
 * 
 */
export class RunsApi extends runtime.BaseAPI {

    /**
     * View all trip/service runs for a specific route ID
     */
    async runsForRouteRaw(requestParameters: RunsForRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V3RunsResponse>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling runsForRoute().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['dateUtc'] != null) {
            queryParameters['date_utc'] = (requestParameters['dateUtc'] as any).toISOString();
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['devid'] != null) {
            queryParameters['devid'] = requestParameters['devid'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/runs/route/{route_id}`.replace(`{${"route_id"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V3RunsResponseFromJSON(jsonValue));
    }

    /**
     * View all trip/service runs for a specific route ID
     */
    async runsForRoute(requestParameters: RunsForRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V3RunsResponse> {
        const response = await this.runsForRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View all trip/service runs for a specific route ID and route type
     */
    async runsForRouteAndRouteTypeRaw(requestParameters: RunsForRouteAndRouteTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V3RunsResponse>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling runsForRouteAndRouteType().'
            );
        }

        if (requestParameters['routeType'] == null) {
            throw new runtime.RequiredError(
                'routeType',
                'Required parameter "routeType" was null or undefined when calling runsForRouteAndRouteType().'
            );
        }

        if (requestParameters['expand'] == null) {
            throw new runtime.RequiredError(
                'expand',
                'Required parameter "expand" was null or undefined when calling runsForRouteAndRouteType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['dateUtc'] != null) {
            queryParameters['date_utc'] = (requestParameters['dateUtc'] as any).toISOString();
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['devid'] != null) {
            queryParameters['devid'] = requestParameters['devid'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/runs/route/{route_id}/route_type/{route_type}`.replace(`{${"route_id"}}`, encodeURIComponent(String(requestParameters['routeId']))).replace(`{${"route_type"}}`, encodeURIComponent(String(requestParameters['routeType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V3RunsResponseFromJSON(jsonValue));
    }

    /**
     * View all trip/service runs for a specific route ID and route type
     */
    async runsForRouteAndRouteType(requestParameters: RunsForRouteAndRouteTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V3RunsResponse> {
        const response = await this.runsForRouteAndRouteTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View all trip/service runs for a specific run_ref
     */
    async runsForRunRaw(requestParameters: RunsForRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V3RunsResponse>> {
        if (requestParameters['runRef'] == null) {
            throw new runtime.RequiredError(
                'runRef',
                'Required parameter "runRef" was null or undefined when calling runsForRun().'
            );
        }

        if (requestParameters['expand'] == null) {
            throw new runtime.RequiredError(
                'expand',
                'Required parameter "expand" was null or undefined when calling runsForRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['dateUtc'] != null) {
            queryParameters['date_utc'] = (requestParameters['dateUtc'] as any).toISOString();
        }

        if (requestParameters['includeGeopath'] != null) {
            queryParameters['include_geopath'] = requestParameters['includeGeopath'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['devid'] != null) {
            queryParameters['devid'] = requestParameters['devid'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/runs/{run_ref}`.replace(`{${"run_ref"}}`, encodeURIComponent(String(requestParameters['runRef']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V3RunsResponseFromJSON(jsonValue));
    }

    /**
     * View all trip/service runs for a specific run_ref
     */
    async runsForRun(requestParameters: RunsForRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V3RunsResponse> {
        const response = await this.runsForRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View the trip/service run for a specific run_ref and route type
     */
    async runsForRunAndRouteTypeRaw(requestParameters: RunsForRunAndRouteTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V3RunResponse>> {
        if (requestParameters['runRef'] == null) {
            throw new runtime.RequiredError(
                'runRef',
                'Required parameter "runRef" was null or undefined when calling runsForRunAndRouteType().'
            );
        }

        if (requestParameters['routeType'] == null) {
            throw new runtime.RequiredError(
                'routeType',
                'Required parameter "routeType" was null or undefined when calling runsForRunAndRouteType().'
            );
        }

        if (requestParameters['expand'] == null) {
            throw new runtime.RequiredError(
                'expand',
                'Required parameter "expand" was null or undefined when calling runsForRunAndRouteType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['dateUtc'] != null) {
            queryParameters['date_utc'] = (requestParameters['dateUtc'] as any).toISOString();
        }

        if (requestParameters['includeGeopath'] != null) {
            queryParameters['include_geopath'] = requestParameters['includeGeopath'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['devid'] != null) {
            queryParameters['devid'] = requestParameters['devid'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/runs/{run_ref}/route_type/{route_type}`.replace(`{${"run_ref"}}`, encodeURIComponent(String(requestParameters['runRef']))).replace(`{${"route_type"}}`, encodeURIComponent(String(requestParameters['routeType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V3RunResponseFromJSON(jsonValue));
    }

    /**
     * View the trip/service run for a specific run_ref and route type
     */
    async runsForRunAndRouteType(requestParameters: RunsForRunAndRouteTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V3RunResponse> {
        const response = await this.runsForRunAndRouteTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RunsForRouteExpandEnum = {
    All: 'All',
    VehicleDescriptor: 'VehicleDescriptor',
    VehiclePosition: 'VehiclePosition',
    None: 'None'
} as const;
export type RunsForRouteExpandEnum = typeof RunsForRouteExpandEnum[keyof typeof RunsForRouteExpandEnum];
/**
 * @export
 */
export const RunsForRouteAndRouteTypeRouteTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type RunsForRouteAndRouteTypeRouteTypeEnum = typeof RunsForRouteAndRouteTypeRouteTypeEnum[keyof typeof RunsForRouteAndRouteTypeRouteTypeEnum];
/**
 * @export
 */
export const RunsForRouteAndRouteTypeExpandEnum = {
    All: 'All',
    VehicleDescriptor: 'VehicleDescriptor',
    VehiclePosition: 'VehiclePosition',
    None: 'None'
} as const;
export type RunsForRouteAndRouteTypeExpandEnum = typeof RunsForRouteAndRouteTypeExpandEnum[keyof typeof RunsForRouteAndRouteTypeExpandEnum];
/**
 * @export
 */
export const RunsForRunExpandEnum = {
    All: 'All',
    VehicleDescriptor: 'VehicleDescriptor',
    VehiclePosition: 'VehiclePosition',
    None: 'None'
} as const;
export type RunsForRunExpandEnum = typeof RunsForRunExpandEnum[keyof typeof RunsForRunExpandEnum];
/**
 * @export
 */
export const RunsForRunAndRouteTypeRouteTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type RunsForRunAndRouteTypeRouteTypeEnum = typeof RunsForRunAndRouteTypeRouteTypeEnum[keyof typeof RunsForRunAndRouteTypeRouteTypeEnum];
/**
 * @export
 */
export const RunsForRunAndRouteTypeExpandEnum = {
    All: 'All',
    VehicleDescriptor: 'VehicleDescriptor',
    VehiclePosition: 'VehiclePosition',
    None: 'None'
} as const;
export type RunsForRunAndRouteTypeExpandEnum = typeof RunsForRunAndRouteTypeExpandEnum[keyof typeof RunsForRunAndRouteTypeExpandEnum];
