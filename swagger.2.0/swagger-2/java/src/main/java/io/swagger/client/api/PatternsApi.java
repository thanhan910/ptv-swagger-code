/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.V3ErrorResponse;
import io.swagger.client.model.V3StoppingPattern;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatternsApi {
    private ApiClient apiClient;

    public PatternsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatternsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for patternsGetPatternByRun
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patternsGetPatternByRunCall(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/pattern/run/{run_ref}/route_type/{route_type}"
            .replaceAll("\\{" + "run_ref" + "\\}", apiClient.escapeString(runRef.toString()))
            .replaceAll("\\{" + "route_type" + "\\}", apiClient.escapeString(routeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "expand", expand));
        if (stopId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_id", stopId));
        if (dateUtc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_utc", dateUtc));
        if (includeSkippedStops != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_skipped_stops", includeSkippedStops));
        if (includeGeopath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_geopath", includeGeopath));
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (devid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devid", devid));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patternsGetPatternByRunValidateBeforeCall(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'runRef' is set
        if (runRef == null) {
            throw new ApiException("Missing the required parameter 'runRef' when calling patternsGetPatternByRun(Async)");
        }
        
        // verify the required parameter 'routeType' is set
        if (routeType == null) {
            throw new ApiException("Missing the required parameter 'routeType' when calling patternsGetPatternByRun(Async)");
        }
        
        // verify the required parameter 'expand' is set
        if (expand == null) {
            throw new ApiException("Missing the required parameter 'expand' when calling patternsGetPatternByRun(Async)");
        }
        

        com.squareup.okhttp.Call call = patternsGetPatternByRunCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, progressListener, progressRequestListener);
        return call;

    }

    /**
     * View the stopping pattern for a specific trip/service run
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3StoppingPattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V3StoppingPattern patternsGetPatternByRun(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3StoppingPattern> resp = patternsGetPatternByRunWithHttpInfo(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature);
        return resp.getData();
    }

    /**
     * View the stopping pattern for a specific trip/service run
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3StoppingPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V3StoppingPattern> patternsGetPatternByRunWithHttpInfo(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature) throws ApiException {
        com.squareup.okhttp.Call call = patternsGetPatternByRunValidateBeforeCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, null, null);
        Type localVarReturnType = new TypeToken<V3StoppingPattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View the stopping pattern for a specific trip/service run (asynchronously)
     * 
     * @param runRef The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead. (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param expand List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (required)
     * @param stopId Filter by stop_id; values returned by Stops API (optional)
     * @param dateUtc Filter by the date and time of the request (ISO 8601 UTC format) (optional)
     * @param includeSkippedStops Include any skipped stops in a stopping pattern. Defaults to false. (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patternsGetPatternByRunAsync(String runRef, Integer routeType, List<String> expand, Integer stopId, OffsetDateTime dateUtc, Boolean includeSkippedStops, Boolean includeGeopath, String token, String devid, String signature, final ApiCallback<V3StoppingPattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patternsGetPatternByRunValidateBeforeCall(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V3StoppingPattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
