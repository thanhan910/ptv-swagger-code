# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V3StopAccessibilityWheelchair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accessible_ramp': 'bool',
        'parking': 'bool',
        'telephone': 'bool',
        'toilet': 'bool',
        'low_ticket_counter': 'bool',
        'manouvering': 'bool',
        'raised_platform': 'bool',
        'ramp': 'bool',
        'secondary_path': 'bool',
        'raised_platform_shelther': 'bool',
        'steep_ramp': 'bool'
    }

    attribute_map = {
        'accessible_ramp': 'accessible_ramp',
        'parking': 'parking',
        'telephone': 'telephone',
        'toilet': 'toilet',
        'low_ticket_counter': 'low_ticket_counter',
        'manouvering': 'manouvering',
        'raised_platform': 'raised_platform',
        'ramp': 'ramp',
        'secondary_path': 'secondary_path',
        'raised_platform_shelther': 'raised_platform_shelther',
        'steep_ramp': 'steep_ramp'
    }

    def __init__(self, accessible_ramp=None, parking=None, telephone=None, toilet=None, low_ticket_counter=None, manouvering=None, raised_platform=None, ramp=None, secondary_path=None, raised_platform_shelther=None, steep_ramp=None, _configuration=None):  # noqa: E501
        """V3StopAccessibilityWheelchair - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accessible_ramp = None
        self._parking = None
        self._telephone = None
        self._toilet = None
        self._low_ticket_counter = None
        self._manouvering = None
        self._raised_platform = None
        self._ramp = None
        self._secondary_path = None
        self._raised_platform_shelther = None
        self._steep_ramp = None
        self.discriminator = None

        if accessible_ramp is not None:
            self.accessible_ramp = accessible_ramp
        if parking is not None:
            self.parking = parking
        if telephone is not None:
            self.telephone = telephone
        if toilet is not None:
            self.toilet = toilet
        if low_ticket_counter is not None:
            self.low_ticket_counter = low_ticket_counter
        if manouvering is not None:
            self.manouvering = manouvering
        if raised_platform is not None:
            self.raised_platform = raised_platform
        if ramp is not None:
            self.ramp = ramp
        if secondary_path is not None:
            self.secondary_path = secondary_path
        if raised_platform_shelther is not None:
            self.raised_platform_shelther = raised_platform_shelther
        if steep_ramp is not None:
            self.steep_ramp = steep_ramp

    @property
    def accessible_ramp(self):
        """Gets the accessible_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501


        :return: The accessible_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._accessible_ramp

    @accessible_ramp.setter
    def accessible_ramp(self, accessible_ramp):
        """Sets the accessible_ramp of this V3StopAccessibilityWheelchair.


        :param accessible_ramp: The accessible_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._accessible_ramp = accessible_ramp

    @property
    def parking(self):
        """Gets the parking of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The parking of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._parking

    @parking.setter
    def parking(self, parking):
        """Sets the parking of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param parking: The parking of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._parking = parking

    @property
    def telephone(self):
        """Gets the telephone of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The telephone of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param telephone: The telephone of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._telephone = telephone

    @property
    def toilet(self):
        """Gets the toilet of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The toilet of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._toilet

    @toilet.setter
    def toilet(self, toilet):
        """Sets the toilet of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param toilet: The toilet of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._toilet = toilet

    @property
    def low_ticket_counter(self):
        """Gets the low_ticket_counter of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The low_ticket_counter of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._low_ticket_counter

    @low_ticket_counter.setter
    def low_ticket_counter(self, low_ticket_counter):
        """Sets the low_ticket_counter of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param low_ticket_counter: The low_ticket_counter of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._low_ticket_counter = low_ticket_counter

    @property
    def manouvering(self):
        """Gets the manouvering of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is a space for mobility device to board on or off a transport mode  # noqa: E501

        :return: The manouvering of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._manouvering

    @manouvering.setter
    def manouvering(self, manouvering):
        """Sets the manouvering of this V3StopAccessibilityWheelchair.

        Indicates if there is a space for mobility device to board on or off a transport mode  # noqa: E501

        :param manouvering: The manouvering of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._manouvering = manouvering

    @property
    def raised_platform(self):
        """Gets the raised_platform of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is a raised platform to board a train  # noqa: E501

        :return: The raised_platform of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._raised_platform

    @raised_platform.setter
    def raised_platform(self, raised_platform):
        """Sets the raised_platform of this V3StopAccessibilityWheelchair.

        Indicates if there is a raised platform to board a train  # noqa: E501

        :param raised_platform: The raised_platform of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._raised_platform = raised_platform

    @property
    def ramp(self):
        """Gets the ramp of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there are ramps (&lt;1:14) at the stop/platform  # noqa: E501

        :return: The ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._ramp

    @ramp.setter
    def ramp(self, ramp):
        """Sets the ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&lt;1:14) at the stop/platform  # noqa: E501

        :param ramp: The ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._ramp = ramp

    @property
    def secondary_path(self):
        """Gets the secondary_path of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is a path beyond the stop which is accessible  # noqa: E501

        :return: The secondary_path of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._secondary_path

    @secondary_path.setter
    def secondary_path(self, secondary_path):
        """Sets the secondary_path of this V3StopAccessibilityWheelchair.

        Indicates if there is a path beyond the stop which is accessible  # noqa: E501

        :param secondary_path: The secondary_path of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._secondary_path = secondary_path

    @property
    def raised_platform_shelther(self):
        """Gets the raised_platform_shelther of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there is shelter near the raised platform  # noqa: E501

        :return: The raised_platform_shelther of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._raised_platform_shelther

    @raised_platform_shelther.setter
    def raised_platform_shelther(self, raised_platform_shelther):
        """Sets the raised_platform_shelther of this V3StopAccessibilityWheelchair.

        Indicates if there is shelter near the raised platform  # noqa: E501

        :param raised_platform_shelther: The raised_platform_shelther of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._raised_platform_shelther = raised_platform_shelther

    @property
    def steep_ramp(self):
        """Gets the steep_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501

        Indicates if there are ramps (&gt;1:14) at the stop/platform  # noqa: E501

        :return: The steep_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: bool
        """
        return self._steep_ramp

    @steep_ramp.setter
    def steep_ramp(self, steep_ramp):
        """Sets the steep_ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&gt;1:14) at the stop/platform  # noqa: E501

        :param steep_ramp: The steep_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type: bool
        """

        self._steep_ramp = steep_ramp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3StopAccessibilityWheelchair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3StopAccessibilityWheelchair):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3StopAccessibilityWheelchair):
            return True

        return self.to_dict() != other.to_dict()
