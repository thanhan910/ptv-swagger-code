# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V3StopsOnRouteResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stops': 'list[V3StopOnRoute]',
        'disruptions': 'dict(str, V3Disruption)',
        'geopath': 'list[object]',
        'status': 'V3Status'
    }

    attribute_map = {
        'stops': 'stops',
        'disruptions': 'disruptions',
        'geopath': 'geopath',
        'status': 'status'
    }

    def __init__(self, stops=None, disruptions=None, geopath=None, status=None, _configuration=None):  # noqa: E501
        """V3StopsOnRouteResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._stops = None
        self._disruptions = None
        self._geopath = None
        self._status = None
        self.discriminator = None

        if stops is not None:
            self.stops = stops
        if disruptions is not None:
            self.disruptions = disruptions
        if geopath is not None:
            self.geopath = geopath
        if status is not None:
            self.status = status

    @property
    def stops(self):
        """Gets the stops of this V3StopsOnRouteResponse.  # noqa: E501

        Train stations, tram stops, bus stops, regional coach stops or Night Bus stops  # noqa: E501

        :return: The stops of this V3StopsOnRouteResponse.  # noqa: E501
        :rtype: list[V3StopOnRoute]
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """Sets the stops of this V3StopsOnRouteResponse.

        Train stations, tram stops, bus stops, regional coach stops or Night Bus stops  # noqa: E501

        :param stops: The stops of this V3StopsOnRouteResponse.  # noqa: E501
        :type: list[V3StopOnRoute]
        """

        self._stops = stops

    @property
    def disruptions(self):
        """Gets the disruptions of this V3StopsOnRouteResponse.  # noqa: E501

        Disruption information applicable to relevant routes or stops  # noqa: E501

        :return: The disruptions of this V3StopsOnRouteResponse.  # noqa: E501
        :rtype: dict(str, V3Disruption)
        """
        return self._disruptions

    @disruptions.setter
    def disruptions(self, disruptions):
        """Sets the disruptions of this V3StopsOnRouteResponse.

        Disruption information applicable to relevant routes or stops  # noqa: E501

        :param disruptions: The disruptions of this V3StopsOnRouteResponse.  # noqa: E501
        :type: dict(str, V3Disruption)
        """

        self._disruptions = disruptions

    @property
    def geopath(self):
        """Gets the geopath of this V3StopsOnRouteResponse.  # noqa: E501

        GeoPath for the route  # noqa: E501

        :return: The geopath of this V3StopsOnRouteResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._geopath

    @geopath.setter
    def geopath(self, geopath):
        """Sets the geopath of this V3StopsOnRouteResponse.

        GeoPath for the route  # noqa: E501

        :param geopath: The geopath of this V3StopsOnRouteResponse.  # noqa: E501
        :type: list[object]
        """

        self._geopath = geopath

    @property
    def status(self):
        """Gets the status of this V3StopsOnRouteResponse.  # noqa: E501

        API Status / Metadata  # noqa: E501

        :return: The status of this V3StopsOnRouteResponse.  # noqa: E501
        :rtype: V3Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V3StopsOnRouteResponse.

        API Status / Metadata  # noqa: E501

        :param status: The status of this V3StopsOnRouteResponse.  # noqa: E501
        :type: V3Status
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3StopsOnRouteResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3StopsOnRouteResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3StopsOnRouteResponse):
            return True

        return self.to_dict() != other.to_dict()
