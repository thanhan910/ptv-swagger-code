/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V3StopDetails
    /// </summary>
    [DataContract]
    public partial class V3StopDetails :  IEquatable<V3StopDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3StopDetails" /> class.
        /// </summary>
        /// <param name="disruptionIds">Disruption information identifier(s).</param>
        /// <param name="stationType">Type of metropolitan train station (i.e. \&quot;Premium\&quot;, \&quot;Host\&quot; or \&quot;Unstaffed\&quot; station); returns null for V/Line train.</param>
        /// <param name="stationDescription">The definition applicable to the station_type; returns null for V/Line train.</param>
        /// <param name="routeType">Transport mode identifier.</param>
        /// <param name="stopLocation">Location details of the stop.</param>
        /// <param name="stopAmenities">Amenity and facility details at the stop.</param>
        /// <param name="stopAccessibility">Facilities relating to the accessibility of the stop.</param>
        /// <param name="stopStaffing">Staffing details for the stop.</param>
        /// <param name="routes">Routes travelling through the stop.</param>
        /// <param name="stopId">Stop identifier.</param>
        /// <param name="stopName">Name of stop.</param>
        /// <param name="stopLandmark">Landmark in proximity of stop.</param>
        public V3StopDetails(List<long?> disruptionIds = default(List<long?>), string stationType = default(string), string stationDescription = default(string), int? routeType = default(int?), V3StopLocation stopLocation = default(V3StopLocation), V3StopAmenityDetails stopAmenities = default(V3StopAmenityDetails), V3StopAccessibility stopAccessibility = default(V3StopAccessibility), V3StopStaffing stopStaffing = default(V3StopStaffing), List<Object> routes = default(List<Object>), int? stopId = default(int?), string stopName = default(string), string stopLandmark = default(string))
        {
            this.DisruptionIds = disruptionIds;
            this.StationType = stationType;
            this.StationDescription = stationDescription;
            this.RouteType = routeType;
            this.StopLocation = stopLocation;
            this.StopAmenities = stopAmenities;
            this.StopAccessibility = stopAccessibility;
            this.StopStaffing = stopStaffing;
            this.Routes = routes;
            this.StopId = stopId;
            this.StopName = stopName;
            this.StopLandmark = stopLandmark;
        }
        
        /// <summary>
        /// Disruption information identifier(s)
        /// </summary>
        /// <value>Disruption information identifier(s)</value>
        [DataMember(Name="disruption_ids", EmitDefaultValue=false)]
        public List<long?> DisruptionIds { get; set; }

        /// <summary>
        /// Type of metropolitan train station (i.e. \&quot;Premium\&quot;, \&quot;Host\&quot; or \&quot;Unstaffed\&quot; station); returns null for V/Line train
        /// </summary>
        /// <value>Type of metropolitan train station (i.e. \&quot;Premium\&quot;, \&quot;Host\&quot; or \&quot;Unstaffed\&quot; station); returns null for V/Line train</value>
        [DataMember(Name="station_type", EmitDefaultValue=false)]
        public string StationType { get; set; }

        /// <summary>
        /// The definition applicable to the station_type; returns null for V/Line train
        /// </summary>
        /// <value>The definition applicable to the station_type; returns null for V/Line train</value>
        [DataMember(Name="station_description", EmitDefaultValue=false)]
        public string StationDescription { get; set; }

        /// <summary>
        /// Transport mode identifier
        /// </summary>
        /// <value>Transport mode identifier</value>
        [DataMember(Name="route_type", EmitDefaultValue=false)]
        public int? RouteType { get; set; }

        /// <summary>
        /// Location details of the stop
        /// </summary>
        /// <value>Location details of the stop</value>
        [DataMember(Name="stop_location", EmitDefaultValue=false)]
        public V3StopLocation StopLocation { get; set; }

        /// <summary>
        /// Amenity and facility details at the stop
        /// </summary>
        /// <value>Amenity and facility details at the stop</value>
        [DataMember(Name="stop_amenities", EmitDefaultValue=false)]
        public V3StopAmenityDetails StopAmenities { get; set; }

        /// <summary>
        /// Facilities relating to the accessibility of the stop
        /// </summary>
        /// <value>Facilities relating to the accessibility of the stop</value>
        [DataMember(Name="stop_accessibility", EmitDefaultValue=false)]
        public V3StopAccessibility StopAccessibility { get; set; }

        /// <summary>
        /// Staffing details for the stop
        /// </summary>
        /// <value>Staffing details for the stop</value>
        [DataMember(Name="stop_staffing", EmitDefaultValue=false)]
        public V3StopStaffing StopStaffing { get; set; }

        /// <summary>
        /// Routes travelling through the stop
        /// </summary>
        /// <value>Routes travelling through the stop</value>
        [DataMember(Name="routes", EmitDefaultValue=false)]
        public List<Object> Routes { get; set; }

        /// <summary>
        /// Stop identifier
        /// </summary>
        /// <value>Stop identifier</value>
        [DataMember(Name="stop_id", EmitDefaultValue=false)]
        public int? StopId { get; set; }

        /// <summary>
        /// Name of stop
        /// </summary>
        /// <value>Name of stop</value>
        [DataMember(Name="stop_name", EmitDefaultValue=false)]
        public string StopName { get; set; }

        /// <summary>
        /// Landmark in proximity of stop
        /// </summary>
        /// <value>Landmark in proximity of stop</value>
        [DataMember(Name="stop_landmark", EmitDefaultValue=false)]
        public string StopLandmark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3StopDetails {\n");
            sb.Append("  DisruptionIds: ").Append(DisruptionIds).Append("\n");
            sb.Append("  StationType: ").Append(StationType).Append("\n");
            sb.Append("  StationDescription: ").Append(StationDescription).Append("\n");
            sb.Append("  RouteType: ").Append(RouteType).Append("\n");
            sb.Append("  StopLocation: ").Append(StopLocation).Append("\n");
            sb.Append("  StopAmenities: ").Append(StopAmenities).Append("\n");
            sb.Append("  StopAccessibility: ").Append(StopAccessibility).Append("\n");
            sb.Append("  StopStaffing: ").Append(StopStaffing).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  StopId: ").Append(StopId).Append("\n");
            sb.Append("  StopName: ").Append(StopName).Append("\n");
            sb.Append("  StopLandmark: ").Append(StopLandmark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3StopDetails);
        }

        /// <summary>
        /// Returns true if V3StopDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of V3StopDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3StopDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisruptionIds == input.DisruptionIds ||
                    this.DisruptionIds != null &&
                    this.DisruptionIds.SequenceEqual(input.DisruptionIds)
                ) && 
                (
                    this.StationType == input.StationType ||
                    (this.StationType != null &&
                    this.StationType.Equals(input.StationType))
                ) && 
                (
                    this.StationDescription == input.StationDescription ||
                    (this.StationDescription != null &&
                    this.StationDescription.Equals(input.StationDescription))
                ) && 
                (
                    this.RouteType == input.RouteType ||
                    (this.RouteType != null &&
                    this.RouteType.Equals(input.RouteType))
                ) && 
                (
                    this.StopLocation == input.StopLocation ||
                    (this.StopLocation != null &&
                    this.StopLocation.Equals(input.StopLocation))
                ) && 
                (
                    this.StopAmenities == input.StopAmenities ||
                    (this.StopAmenities != null &&
                    this.StopAmenities.Equals(input.StopAmenities))
                ) && 
                (
                    this.StopAccessibility == input.StopAccessibility ||
                    (this.StopAccessibility != null &&
                    this.StopAccessibility.Equals(input.StopAccessibility))
                ) && 
                (
                    this.StopStaffing == input.StopStaffing ||
                    (this.StopStaffing != null &&
                    this.StopStaffing.Equals(input.StopStaffing))
                ) && 
                (
                    this.Routes == input.Routes ||
                    this.Routes != null &&
                    this.Routes.SequenceEqual(input.Routes)
                ) && 
                (
                    this.StopId == input.StopId ||
                    (this.StopId != null &&
                    this.StopId.Equals(input.StopId))
                ) && 
                (
                    this.StopName == input.StopName ||
                    (this.StopName != null &&
                    this.StopName.Equals(input.StopName))
                ) && 
                (
                    this.StopLandmark == input.StopLandmark ||
                    (this.StopLandmark != null &&
                    this.StopLandmark.Equals(input.StopLandmark))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisruptionIds != null)
                    hashCode = hashCode * 59 + this.DisruptionIds.GetHashCode();
                if (this.StationType != null)
                    hashCode = hashCode * 59 + this.StationType.GetHashCode();
                if (this.StationDescription != null)
                    hashCode = hashCode * 59 + this.StationDescription.GetHashCode();
                if (this.RouteType != null)
                    hashCode = hashCode * 59 + this.RouteType.GetHashCode();
                if (this.StopLocation != null)
                    hashCode = hashCode * 59 + this.StopLocation.GetHashCode();
                if (this.StopAmenities != null)
                    hashCode = hashCode * 59 + this.StopAmenities.GetHashCode();
                if (this.StopAccessibility != null)
                    hashCode = hashCode * 59 + this.StopAccessibility.GetHashCode();
                if (this.StopStaffing != null)
                    hashCode = hashCode * 59 + this.StopStaffing.GetHashCode();
                if (this.Routes != null)
                    hashCode = hashCode * 59 + this.Routes.GetHashCode();
                if (this.StopId != null)
                    hashCode = hashCode * 59 + this.StopId.GetHashCode();
                if (this.StopName != null)
                    hashCode = hashCode * 59 + this.StopName.GetHashCode();
                if (this.StopLandmark != null)
                    hashCode = hashCode * 59 + this.StopLandmark.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
