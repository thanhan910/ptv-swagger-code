//
// V3Departure.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct V3Departure: Codable {


    /** Stop identifier */
    public var stopId: Int?

    /** Route identifier */
    public var routeId: Int?

    /** Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric */
    public var runId: Int?

    /** Alphanumeric trip/service run identifier */
    public var runRef: String?

    /** Direction of travel identifier */
    public var directionId: Int?

    /** Disruption information identifier(s) */
    public var disruptionIds: [Int64]?

    /** Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format */
    public var scheduledDepartureUtc: Date?

    /** Real-time estimate of departure time and date in ISO 8601 UTC format */
    public var estimatedDepartureUtc: Date?

    /** Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes */
    public var atPlatform: Bool?

    /** Platform number at stop (metropolitan train only; returns null for other modes) */
    public var platformNumber: String?

    /** Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag) */
    public var flags: String?

    /** Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4 */
    public var departureSequence: Int?
    public init(stopId: Int? = nil, routeId: Int? = nil, runId: Int? = nil, runRef: String? = nil, directionId: Int? = nil, disruptionIds: [Int64]? = nil, scheduledDepartureUtc: Date? = nil, estimatedDepartureUtc: Date? = nil, atPlatform: Bool? = nil, platformNumber: String? = nil, flags: String? = nil, departureSequence: Int? = nil) { 
        self.stopId = stopId
        self.routeId = routeId
        self.runId = runId
        self.runRef = runRef
        self.directionId = directionId
        self.disruptionIds = disruptionIds
        self.scheduledDepartureUtc = scheduledDepartureUtc
        self.estimatedDepartureUtc = estimatedDepartureUtc
        self.atPlatform = atPlatform
        self.platformNumber = platformNumber
        self.flags = flags
        self.departureSequence = departureSequence
    }
    public enum CodingKeys: String, CodingKey { 
        case stopId = "stop_id"
        case routeId = "route_id"
        case runId = "run_id"
        case runRef = "run_ref"
        case directionId = "direction_id"
        case disruptionIds = "disruption_ids"
        case scheduledDepartureUtc = "scheduled_departure_utc"
        case estimatedDepartureUtc = "estimated_departure_utc"
        case atPlatform = "at_platform"
        case platformNumber = "platform_number"
        case flags
        case departureSequence = "departure_sequence"
    }

}
