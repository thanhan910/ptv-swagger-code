//
// RunsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RunsAPI {
    /**
     * enum for parameter expand
     */
    public enum Expand_runsForRoute: String { 
        case all = "All"
        case vehicleDescriptor = "VehicleDescriptor"
        case vehiclePosition = "VehiclePosition"
        case _none = "None"
    }

    /**
     View all trip/service runs for a specific route ID
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes.      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)     - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRoute(routeId: Int, expand: [String]? = nil, dateUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRouteWithRequestBuilder(routeId: routeId, expand: expand, dateUtc: dateUtc, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View all trip/service runs for a specific route ID
     - GET /v3/runs/route/{route_id}
     - examples: [{contentType=application/json, example={
  "runs" : [ {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  }, {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes.      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None. (optional)     - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRouteWithRequestBuilder(routeId: Int, expand: [String]? = nil, dateUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/route/{route_id}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand": expand, 
                        "date_utc": dateUtc?.encodeToJSON(), 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_runsForRouteAndRouteType: Int { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     * enum for parameter expand
     */
    public enum Expand_runsForRouteAndRouteType: String { 
        case all = "All"
        case vehicleDescriptor = "VehicleDescriptor"
        case vehiclePosition = "VehiclePosition"
        case _none = "None"
    }

    /**
     View all trip/service runs for a specific route ID and route type
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes.      - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRouteAndRouteType(routeId: Int, routeType: RouteType_runsForRouteAndRouteType, expand: [String], dateUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRouteAndRouteTypeWithRequestBuilder(routeId: routeId, routeType: routeType, expand: expand, dateUtc: dateUtc, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View all trip/service runs for a specific route ID and route type
     - GET /v3/runs/route/{route_id}/route_type/{route_type}
     - examples: [{contentType=application/json, example={
  "runs" : [ {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  }, {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes.      - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRouteAndRouteTypeWithRequestBuilder(routeId: Int, routeType: RouteType_runsForRouteAndRouteType, expand: [String], dateUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/route/{route_id}/route_type/{route_type}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand": expand, 
                        "date_utc": dateUtc?.encodeToJSON(), 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter expand
     */
    public enum Expand_runsForRun: String { 
        case all = "All"
        case vehicleDescriptor = "VehicleDescriptor"
        case vehiclePosition = "VehiclePosition"
        case _none = "None"
    }

    /**
     View all trip/service runs for a specific run_ref
     - parameter runRef: (path) The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRun(runRef: String, expand: [String], dateUtc: Date? = nil, includeGeopath: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRunWithRequestBuilder(runRef: runRef, expand: expand, dateUtc: dateUtc, includeGeopath: includeGeopath, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View all trip/service runs for a specific run_ref
     - GET /v3/runs/{run_ref}
     - examples: [{contentType=application/json, example={
  "runs" : [ {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  }, {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter runRef: (path) The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRunWithRequestBuilder(runRef: String, expand: [String], dateUtc: Date? = nil, includeGeopath: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/{run_ref}"
        let runRefPreEscape = "\(runRef)"
        let runRefPostEscape = runRefPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_ref}", with: runRefPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand": expand, 
                        "date_utc": dateUtc?.encodeToJSON(), 
                        "include_geopath": includeGeopath, 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_runsForRunAndRouteType: Int { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     * enum for parameter expand
     */
    public enum Expand_runsForRunAndRouteType: String { 
        case all = "All"
        case vehicleDescriptor = "VehicleDescriptor"
        case vehiclePosition = "VehiclePosition"
        case _none = "None"
    }

    /**
     View the trip/service run for a specific run_ref and route type
     - parameter runRef: (path) The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.      - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRunAndRouteType(runRef: String, routeType: RouteType_runsForRunAndRouteType, expand: [String], dateUtc: Date? = nil, includeGeopath: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunResponse?,_ error: Error?) -> Void)) {
        runsForRunAndRouteTypeWithRequestBuilder(runRef: runRef, routeType: routeType, expand: expand, dateUtc: dateUtc, includeGeopath: includeGeopath, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View the trip/service run for a specific run_ref and route type
     - GET /v3/runs/{run_ref}/route_type/{route_type}
     - examples: [{contentType=application/json, example={
  "run" : {
    "run_id" : 1,
    "route_id" : 1,
    "final_stop_id" : 6,
    "destination_name" : "destination_name",
    "vehicle_descriptor" : {
      "low_floor" : true,
      "air_conditioned" : true,
      "supplier" : "supplier",
      "length" : "length",
      "description" : "description",
      "id" : "id",
      "operator" : "operator"
    },
    "run_sequence" : 1,
    "direction_id" : 7,
    "run_ref" : "run_ref",
    "route_type" : 1,
    "vehicle_position" : {
      "easting" : 9.369310271410669,
      "bearing" : 8.762042012749001,
      "datetime_utc" : "2000-01-23T04:56:07.000+00:00",
      "latitude" : 5.025004791520295,
      "supplier" : "supplier",
      "expiry_time" : "2000-01-23T04:56:07.000+00:00",
      "northing" : 6.683562403749608,
      "longitude" : 9.965781217890562,
      "direction" : "direction"
    },
    "express_stop_count" : 4,
    "geopath" : [ { }, { } ],
    "status" : "status"
  },
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter runRef: (path) The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.      - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API      - parameter expand: (query) List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.      - parameter dateUtc: (query) Date of the request. (optional - defaults to now) (optional)     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3RunResponse> 
     */
    open class func runsForRunAndRouteTypeWithRequestBuilder(runRef: String, routeType: RouteType_runsForRunAndRouteType, expand: [String], dateUtc: Date? = nil, includeGeopath: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunResponse> {
        var path = "/v3/runs/{run_ref}/route_type/{route_type}"
        let runRefPreEscape = "\(runRef)"
        let runRefPostEscape = runRefPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_ref}", with: runRefPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "expand": expand, 
                        "date_utc": dateUtc?.encodeToJSON(), 
                        "include_geopath": includeGeopath, 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
