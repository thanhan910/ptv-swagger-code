//
// OutletsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OutletsAPI {
    /**
     List all ticket outlets
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outletsGetAllOutlets(maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3OutletResponse?,_ error: Error?) -> Void)) {
        outletsGetAllOutletsWithRequestBuilder(maxResults: maxResults, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all ticket outlets
     - GET /v3/outlets
     - examples: [{contentType=application/json, example={
  "outlets" : [ {
    "outlet_business_hour_thur" : "outlet_business_hour_thur",
    "outlet_postcode" : 1,
    "outlet_business_hour_fri" : "outlet_business_hour_fri",
    "outlet_business_hour_wed" : "outlet_business_hour_wed",
    "outlet_suburb" : "outlet_suburb",
    "outlet_longitude" : 6.0274563,
    "outlet_name" : "outlet_name",
    "outlet_business" : "outlet_business",
    "outlet_business_hour_mon" : "outlet_business_hour_mon",
    "outlet_business_hour_sun" : "outlet_business_hour_sun",
    "outlet_slid_spid" : "outlet_slid_spid",
    "outlet_business_hour_sat" : "outlet_business_hour_sat",
    "outlet_notes" : "outlet_notes",
    "outlet_business_hour_tue" : "outlet_business_hour_tue",
    "outlet_latitude" : 0.8008282
  }, {
    "outlet_business_hour_thur" : "outlet_business_hour_thur",
    "outlet_postcode" : 1,
    "outlet_business_hour_fri" : "outlet_business_hour_fri",
    "outlet_business_hour_wed" : "outlet_business_hour_wed",
    "outlet_suburb" : "outlet_suburb",
    "outlet_longitude" : 6.0274563,
    "outlet_name" : "outlet_name",
    "outlet_business" : "outlet_business",
    "outlet_business_hour_mon" : "outlet_business_hour_mon",
    "outlet_business_hour_sun" : "outlet_business_hour_sun",
    "outlet_slid_spid" : "outlet_slid_spid",
    "outlet_business_hour_sat" : "outlet_business_hour_sat",
    "outlet_notes" : "outlet_notes",
    "outlet_business_hour_tue" : "outlet_business_hour_tue",
    "outlet_latitude" : 0.8008282
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3OutletResponse> 
     */
    open class func outletsGetAllOutletsWithRequestBuilder(maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3OutletResponse> {
        let path = "/v3/outlets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "max_results": maxResults?.encodeToJSON(), 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3OutletResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List ticket outlets near a specific location
     - parameter latitude: (path) Geographic coordinate of latitude      - parameter longitude: (path) Geographic coordinate of longitude      - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outletsGetOutletsByGeolocation(latitude: Float, longitude: Float, maxDistance: Double? = nil, maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3OutletGeolocationResponse?,_ error: Error?) -> Void)) {
        outletsGetOutletsByGeolocationWithRequestBuilder(latitude: latitude, longitude: longitude, maxDistance: maxDistance, maxResults: maxResults, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List ticket outlets near a specific location
     - GET /v3/outlets/location/{latitude},{longitude}
     - examples: [{contentType=application/json, example={
  "outlets" : [ {
    "outlet_business_hour_thur" : "outlet_business_hour_thur",
    "outlet_postcode" : 5,
    "outlet_business_hour_fri" : "outlet_business_hour_fri",
    "outlet_business_hour_wed" : "outlet_business_hour_wed",
    "outlet_suburb" : "outlet_suburb",
    "outlet_longitude" : 1.4658129,
    "outlet_name" : "outlet_name",
    "outlet_distance" : 0.8008282,
    "outlet_business" : "outlet_business",
    "outlet_business_hour_mon" : "outlet_business_hour_mon",
    "outlet_business_hour_sun" : "outlet_business_hour_sun",
    "outlet_slid_spid" : "outlet_slid_spid",
    "outlet_business_hour_sat" : "outlet_business_hour_sat",
    "outlet_notes" : "outlet_notes",
    "outlet_business_hour_tue" : "outlet_business_hour_tue",
    "outlet_latitude" : 6.0274563
  }, {
    "outlet_business_hour_thur" : "outlet_business_hour_thur",
    "outlet_postcode" : 5,
    "outlet_business_hour_fri" : "outlet_business_hour_fri",
    "outlet_business_hour_wed" : "outlet_business_hour_wed",
    "outlet_suburb" : "outlet_suburb",
    "outlet_longitude" : 1.4658129,
    "outlet_name" : "outlet_name",
    "outlet_distance" : 0.8008282,
    "outlet_business" : "outlet_business",
    "outlet_business_hour_mon" : "outlet_business_hour_mon",
    "outlet_business_hour_sun" : "outlet_business_hour_sun",
    "outlet_slid_spid" : "outlet_slid_spid",
    "outlet_business_hour_sat" : "outlet_business_hour_sat",
    "outlet_notes" : "outlet_notes",
    "outlet_business_hour_tue" : "outlet_business_hour_tue",
    "outlet_latitude" : 6.0274563
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter latitude: (path) Geographic coordinate of latitude      - parameter longitude: (path) Geographic coordinate of longitude      - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)     - parameter token: (query) Please ignore (optional)     - parameter devid: (query) Your developer id (optional)     - parameter signature: (query) Authentication signature for request (optional)

     - returns: RequestBuilder<V3OutletGeolocationResponse> 
     */
    open class func outletsGetOutletsByGeolocationWithRequestBuilder(latitude: Float, longitude: Float, maxDistance: Double? = nil, maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3OutletGeolocationResponse> {
        var path = "/v3/outlets/location/{latitude},{longitude}"
        let latitudePreEscape = "\(latitude)"
        let latitudePostEscape = latitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{latitude}", with: latitudePostEscape, options: .literal, range: nil)
        let longitudePreEscape = "\(longitude)"
        let longitudePostEscape = longitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{longitude}", with: longitudePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "max_distance": maxDistance, 
                        "max_results": maxResults?.encodeToJSON(), 
                        "token": token, 
                        "devid": devid, 
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3OutletGeolocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
