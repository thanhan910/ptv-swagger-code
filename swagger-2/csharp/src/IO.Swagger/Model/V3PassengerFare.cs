/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V3PassengerFare
    /// </summary>
    [DataContract]
    public partial class V3PassengerFare :  IEquatable<V3PassengerFare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3PassengerFare" /> class.
        /// </summary>
        /// <param name="passengerType">passengerType.</param>
        /// <param name="fare2HourPeak">fare2HourPeak.</param>
        /// <param name="fare2HourOffPeak">fare2HourOffPeak.</param>
        /// <param name="fareDailyPeak">fareDailyPeak.</param>
        /// <param name="fareDailyOffPeak">fareDailyOffPeak.</param>
        /// <param name="pass7Days">pass7Days.</param>
        /// <param name="pass28To69DayPerDay">pass28To69DayPerDay.</param>
        /// <param name="pass70PlusDayPerDay">pass70PlusDayPerDay.</param>
        /// <param name="weekendCap">weekendCap.</param>
        /// <param name="holidayCap">holidayCap.</param>
        public V3PassengerFare(string passengerType = default(string), decimal? fare2HourPeak = default(decimal?), decimal? fare2HourOffPeak = default(decimal?), decimal? fareDailyPeak = default(decimal?), decimal? fareDailyOffPeak = default(decimal?), decimal? pass7Days = default(decimal?), decimal? pass28To69DayPerDay = default(decimal?), decimal? pass70PlusDayPerDay = default(decimal?), decimal? weekendCap = default(decimal?), decimal? holidayCap = default(decimal?))
        {
            this.PassengerType = passengerType;
            this.Fare2HourPeak = fare2HourPeak;
            this.Fare2HourOffPeak = fare2HourOffPeak;
            this.FareDailyPeak = fareDailyPeak;
            this.FareDailyOffPeak = fareDailyOffPeak;
            this.Pass7Days = pass7Days;
            this.Pass28To69DayPerDay = pass28To69DayPerDay;
            this.Pass70PlusDayPerDay = pass70PlusDayPerDay;
            this.WeekendCap = weekendCap;
            this.HolidayCap = holidayCap;
        }
        
        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>
        [DataMember(Name="PassengerType", EmitDefaultValue=false)]
        public string PassengerType { get; set; }

        /// <summary>
        /// Gets or Sets Fare2HourPeak
        /// </summary>
        [DataMember(Name="Fare2HourPeak", EmitDefaultValue=false)]
        public decimal? Fare2HourPeak { get; set; }

        /// <summary>
        /// Gets or Sets Fare2HourOffPeak
        /// </summary>
        [DataMember(Name="Fare2HourOffPeak", EmitDefaultValue=false)]
        public decimal? Fare2HourOffPeak { get; set; }

        /// <summary>
        /// Gets or Sets FareDailyPeak
        /// </summary>
        [DataMember(Name="FareDailyPeak", EmitDefaultValue=false)]
        public decimal? FareDailyPeak { get; set; }

        /// <summary>
        /// Gets or Sets FareDailyOffPeak
        /// </summary>
        [DataMember(Name="FareDailyOffPeak", EmitDefaultValue=false)]
        public decimal? FareDailyOffPeak { get; set; }

        /// <summary>
        /// Gets or Sets Pass7Days
        /// </summary>
        [DataMember(Name="Pass7Days", EmitDefaultValue=false)]
        public decimal? Pass7Days { get; set; }

        /// <summary>
        /// Gets or Sets Pass28To69DayPerDay
        /// </summary>
        [DataMember(Name="Pass28To69DayPerDay", EmitDefaultValue=false)]
        public decimal? Pass28To69DayPerDay { get; set; }

        /// <summary>
        /// Gets or Sets Pass70PlusDayPerDay
        /// </summary>
        [DataMember(Name="Pass70PlusDayPerDay", EmitDefaultValue=false)]
        public decimal? Pass70PlusDayPerDay { get; set; }

        /// <summary>
        /// Gets or Sets WeekendCap
        /// </summary>
        [DataMember(Name="WeekendCap", EmitDefaultValue=false)]
        public decimal? WeekendCap { get; set; }

        /// <summary>
        /// Gets or Sets HolidayCap
        /// </summary>
        [DataMember(Name="HolidayCap", EmitDefaultValue=false)]
        public decimal? HolidayCap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3PassengerFare {\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  Fare2HourPeak: ").Append(Fare2HourPeak).Append("\n");
            sb.Append("  Fare2HourOffPeak: ").Append(Fare2HourOffPeak).Append("\n");
            sb.Append("  FareDailyPeak: ").Append(FareDailyPeak).Append("\n");
            sb.Append("  FareDailyOffPeak: ").Append(FareDailyOffPeak).Append("\n");
            sb.Append("  Pass7Days: ").Append(Pass7Days).Append("\n");
            sb.Append("  Pass28To69DayPerDay: ").Append(Pass28To69DayPerDay).Append("\n");
            sb.Append("  Pass70PlusDayPerDay: ").Append(Pass70PlusDayPerDay).Append("\n");
            sb.Append("  WeekendCap: ").Append(WeekendCap).Append("\n");
            sb.Append("  HolidayCap: ").Append(HolidayCap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3PassengerFare);
        }

        /// <summary>
        /// Returns true if V3PassengerFare instances are equal
        /// </summary>
        /// <param name="input">Instance of V3PassengerFare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3PassengerFare input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PassengerType == input.PassengerType ||
                    (this.PassengerType != null &&
                    this.PassengerType.Equals(input.PassengerType))
                ) && 
                (
                    this.Fare2HourPeak == input.Fare2HourPeak ||
                    (this.Fare2HourPeak != null &&
                    this.Fare2HourPeak.Equals(input.Fare2HourPeak))
                ) && 
                (
                    this.Fare2HourOffPeak == input.Fare2HourOffPeak ||
                    (this.Fare2HourOffPeak != null &&
                    this.Fare2HourOffPeak.Equals(input.Fare2HourOffPeak))
                ) && 
                (
                    this.FareDailyPeak == input.FareDailyPeak ||
                    (this.FareDailyPeak != null &&
                    this.FareDailyPeak.Equals(input.FareDailyPeak))
                ) && 
                (
                    this.FareDailyOffPeak == input.FareDailyOffPeak ||
                    (this.FareDailyOffPeak != null &&
                    this.FareDailyOffPeak.Equals(input.FareDailyOffPeak))
                ) && 
                (
                    this.Pass7Days == input.Pass7Days ||
                    (this.Pass7Days != null &&
                    this.Pass7Days.Equals(input.Pass7Days))
                ) && 
                (
                    this.Pass28To69DayPerDay == input.Pass28To69DayPerDay ||
                    (this.Pass28To69DayPerDay != null &&
                    this.Pass28To69DayPerDay.Equals(input.Pass28To69DayPerDay))
                ) && 
                (
                    this.Pass70PlusDayPerDay == input.Pass70PlusDayPerDay ||
                    (this.Pass70PlusDayPerDay != null &&
                    this.Pass70PlusDayPerDay.Equals(input.Pass70PlusDayPerDay))
                ) && 
                (
                    this.WeekendCap == input.WeekendCap ||
                    (this.WeekendCap != null &&
                    this.WeekendCap.Equals(input.WeekendCap))
                ) && 
                (
                    this.HolidayCap == input.HolidayCap ||
                    (this.HolidayCap != null &&
                    this.HolidayCap.Equals(input.HolidayCap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PassengerType != null)
                    hashCode = hashCode * 59 + this.PassengerType.GetHashCode();
                if (this.Fare2HourPeak != null)
                    hashCode = hashCode * 59 + this.Fare2HourPeak.GetHashCode();
                if (this.Fare2HourOffPeak != null)
                    hashCode = hashCode * 59 + this.Fare2HourOffPeak.GetHashCode();
                if (this.FareDailyPeak != null)
                    hashCode = hashCode * 59 + this.FareDailyPeak.GetHashCode();
                if (this.FareDailyOffPeak != null)
                    hashCode = hashCode * 59 + this.FareDailyOffPeak.GetHashCode();
                if (this.Pass7Days != null)
                    hashCode = hashCode * 59 + this.Pass7Days.GetHashCode();
                if (this.Pass28To69DayPerDay != null)
                    hashCode = hashCode * 59 + this.Pass28To69DayPerDay.GetHashCode();
                if (this.Pass70PlusDayPerDay != null)
                    hashCode = hashCode * 59 + this.Pass70PlusDayPerDay.GetHashCode();
                if (this.WeekendCap != null)
                    hashCode = hashCode * 59 + this.WeekendCap.GetHashCode();
                if (this.HolidayCap != null)
                    hashCode = hashCode * 59 + this.HolidayCap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
