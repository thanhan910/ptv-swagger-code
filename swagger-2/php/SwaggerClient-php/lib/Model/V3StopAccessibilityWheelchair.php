<?php
/**
 * V3StopAccessibilityWheelchair
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V3StopAccessibilityWheelchair Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3StopAccessibilityWheelchair implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V3.StopAccessibilityWheelchair';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessible_ramp' => 'bool',
        'parking' => 'bool',
        'telephone' => 'bool',
        'toilet' => 'bool',
        'low_ticket_counter' => 'bool',
        'manouvering' => 'bool',
        'raised_platform' => 'bool',
        'ramp' => 'bool',
        'secondary_path' => 'bool',
        'raised_platform_shelther' => 'bool',
        'steep_ramp' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accessible_ramp' => null,
        'parking' => null,
        'telephone' => null,
        'toilet' => null,
        'low_ticket_counter' => null,
        'manouvering' => null,
        'raised_platform' => null,
        'ramp' => null,
        'secondary_path' => null,
        'raised_platform_shelther' => null,
        'steep_ramp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessible_ramp' => 'accessible_ramp',
        'parking' => 'parking',
        'telephone' => 'telephone',
        'toilet' => 'toilet',
        'low_ticket_counter' => 'low_ticket_counter',
        'manouvering' => 'manouvering',
        'raised_platform' => 'raised_platform',
        'ramp' => 'ramp',
        'secondary_path' => 'secondary_path',
        'raised_platform_shelther' => 'raised_platform_shelther',
        'steep_ramp' => 'steep_ramp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessible_ramp' => 'setAccessibleRamp',
        'parking' => 'setParking',
        'telephone' => 'setTelephone',
        'toilet' => 'setToilet',
        'low_ticket_counter' => 'setLowTicketCounter',
        'manouvering' => 'setManouvering',
        'raised_platform' => 'setRaisedPlatform',
        'ramp' => 'setRamp',
        'secondary_path' => 'setSecondaryPath',
        'raised_platform_shelther' => 'setRaisedPlatformShelther',
        'steep_ramp' => 'setSteepRamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessible_ramp' => 'getAccessibleRamp',
        'parking' => 'getParking',
        'telephone' => 'getTelephone',
        'toilet' => 'getToilet',
        'low_ticket_counter' => 'getLowTicketCounter',
        'manouvering' => 'getManouvering',
        'raised_platform' => 'getRaisedPlatform',
        'ramp' => 'getRamp',
        'secondary_path' => 'getSecondaryPath',
        'raised_platform_shelther' => 'getRaisedPlatformShelther',
        'steep_ramp' => 'getSteepRamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessible_ramp'] = isset($data['accessible_ramp']) ? $data['accessible_ramp'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['toilet'] = isset($data['toilet']) ? $data['toilet'] : null;
        $this->container['low_ticket_counter'] = isset($data['low_ticket_counter']) ? $data['low_ticket_counter'] : null;
        $this->container['manouvering'] = isset($data['manouvering']) ? $data['manouvering'] : null;
        $this->container['raised_platform'] = isset($data['raised_platform']) ? $data['raised_platform'] : null;
        $this->container['ramp'] = isset($data['ramp']) ? $data['ramp'] : null;
        $this->container['secondary_path'] = isset($data['secondary_path']) ? $data['secondary_path'] : null;
        $this->container['raised_platform_shelther'] = isset($data['raised_platform_shelther']) ? $data['raised_platform_shelther'] : null;
        $this->container['steep_ramp'] = isset($data['steep_ramp']) ? $data['steep_ramp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessible_ramp
     *
     * @return bool
     */
    public function getAccessibleRamp()
    {
        return $this->container['accessible_ramp'];
    }

    /**
     * Sets accessible_ramp
     *
     * @param bool $accessible_ramp accessible_ramp
     *
     * @return $this
     */
    public function setAccessibleRamp($accessible_ramp)
    {
        $this->container['accessible_ramp'] = $accessible_ramp;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return bool
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param bool $parking Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return bool
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param bool $telephone Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets toilet
     *
     * @return bool
     */
    public function getToilet()
    {
        return $this->container['toilet'];
    }

    /**
     * Sets toilet
     *
     * @param bool $toilet Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
     *
     * @return $this
     */
    public function setToilet($toilet)
    {
        $this->container['toilet'] = $toilet;

        return $this;
    }

    /**
     * Gets low_ticket_counter
     *
     * @return bool
     */
    public function getLowTicketCounter()
    {
        return $this->container['low_ticket_counter'];
    }

    /**
     * Sets low_ticket_counter
     *
     * @param bool $low_ticket_counter Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
     *
     * @return $this
     */
    public function setLowTicketCounter($low_ticket_counter)
    {
        $this->container['low_ticket_counter'] = $low_ticket_counter;

        return $this;
    }

    /**
     * Gets manouvering
     *
     * @return bool
     */
    public function getManouvering()
    {
        return $this->container['manouvering'];
    }

    /**
     * Sets manouvering
     *
     * @param bool $manouvering Indicates if there is a space for mobility device to board on or off a transport mode
     *
     * @return $this
     */
    public function setManouvering($manouvering)
    {
        $this->container['manouvering'] = $manouvering;

        return $this;
    }

    /**
     * Gets raised_platform
     *
     * @return bool
     */
    public function getRaisedPlatform()
    {
        return $this->container['raised_platform'];
    }

    /**
     * Sets raised_platform
     *
     * @param bool $raised_platform Indicates if there is a raised platform to board a train
     *
     * @return $this
     */
    public function setRaisedPlatform($raised_platform)
    {
        $this->container['raised_platform'] = $raised_platform;

        return $this;
    }

    /**
     * Gets ramp
     *
     * @return bool
     */
    public function getRamp()
    {
        return $this->container['ramp'];
    }

    /**
     * Sets ramp
     *
     * @param bool $ramp Indicates if there are ramps (&lt;1:14) at the stop/platform
     *
     * @return $this
     */
    public function setRamp($ramp)
    {
        $this->container['ramp'] = $ramp;

        return $this;
    }

    /**
     * Gets secondary_path
     *
     * @return bool
     */
    public function getSecondaryPath()
    {
        return $this->container['secondary_path'];
    }

    /**
     * Sets secondary_path
     *
     * @param bool $secondary_path Indicates if there is a path beyond the stop which is accessible
     *
     * @return $this
     */
    public function setSecondaryPath($secondary_path)
    {
        $this->container['secondary_path'] = $secondary_path;

        return $this;
    }

    /**
     * Gets raised_platform_shelther
     *
     * @return bool
     */
    public function getRaisedPlatformShelther()
    {
        return $this->container['raised_platform_shelther'];
    }

    /**
     * Sets raised_platform_shelther
     *
     * @param bool $raised_platform_shelther Indicates if there is shelter near the raised platform
     *
     * @return $this
     */
    public function setRaisedPlatformShelther($raised_platform_shelther)
    {
        $this->container['raised_platform_shelther'] = $raised_platform_shelther;

        return $this;
    }

    /**
     * Gets steep_ramp
     *
     * @return bool
     */
    public function getSteepRamp()
    {
        return $this->container['steep_ramp'];
    }

    /**
     * Sets steep_ramp
     *
     * @param bool $steep_ramp Indicates if there are ramps (&gt;1:14) at the stop/platform
     *
     * @return $this
     */
    public function setSteepRamp($steep_ramp)
    {
        $this->container['steep_ramp'] = $steep_ramp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


