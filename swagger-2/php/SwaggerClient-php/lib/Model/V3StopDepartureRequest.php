<?php
/**
 * V3StopDepartureRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V3StopDepartureRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3StopDepartureRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V3.StopDepartureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'route_type' => 'int',
        'stop_id' => 'int',
        'max_results' => 'int',
        'gtfs' => 'bool',
        'route_directions' => '\Swagger\Client\Model\V3StopDepartureRequestRouteDirection[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'route_type' => 'int32',
        'stop_id' => 'int32',
        'max_results' => 'int32',
        'gtfs' => null,
        'route_directions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'route_type' => 'route_type',
        'stop_id' => 'stop_id',
        'max_results' => 'max_results',
        'gtfs' => 'gtfs',
        'route_directions' => 'route_directions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'route_type' => 'setRouteType',
        'stop_id' => 'setStopId',
        'max_results' => 'setMaxResults',
        'gtfs' => 'setGtfs',
        'route_directions' => 'setRouteDirections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'route_type' => 'getRouteType',
        'stop_id' => 'getStopId',
        'max_results' => 'getMaxResults',
        'gtfs' => 'getGtfs',
        'route_directions' => 'getRouteDirections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROUTE_TYPE_0 = 0;
    const ROUTE_TYPE_1 = 1;
    const ROUTE_TYPE_2 = 2;
    const ROUTE_TYPE_3 = 3;
    const ROUTE_TYPE_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRouteTypeAllowableValues()
    {
        return [
            self::ROUTE_TYPE_0,
            self::ROUTE_TYPE_1,
            self::ROUTE_TYPE_2,
            self::ROUTE_TYPE_3,
            self::ROUTE_TYPE_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['route_type'] = isset($data['route_type']) ? $data['route_type'] : null;
        $this->container['stop_id'] = isset($data['stop_id']) ? $data['stop_id'] : null;
        $this->container['max_results'] = isset($data['max_results']) ? $data['max_results'] : null;
        $this->container['gtfs'] = isset($data['gtfs']) ? $data['gtfs'] : null;
        $this->container['route_directions'] = isset($data['route_directions']) ? $data['route_directions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRouteTypeAllowableValues();
        if (!is_null($this->container['route_type']) && !in_array($this->container['route_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'route_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['stop_id']) && ($this->container['stop_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'stop_id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['stop_id']) && ($this->container['stop_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'stop_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_results']) && ($this->container['max_results'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_results', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_results']) && ($this->container['max_results'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_results', must be bigger than or equal to 0.";
        }

        if ($this->container['route_directions'] === null) {
            $invalidProperties[] = "'route_directions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets route_type
     *
     * @return int
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param int $route_type Number identifying transport mode; values returned via RouteTypes API
     *
     * @return $this
     */
    public function setRouteType($route_type)
    {
        $allowedValues = $this->getRouteTypeAllowableValues();
        if (!is_null($route_type) && !in_array($route_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'route_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets stop_id
     *
     * @return int
     */
    public function getStopId()
    {
        return $this->container['stop_id'];
    }

    /**
     * Sets stop_id
     *
     * @param int $stop_id Identifier of stop; values returned by Stops API
     *
     * @return $this
     */
    public function setStopId($stop_id)
    {

        if (!is_null($stop_id) && ($stop_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $stop_id when calling V3StopDepartureRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($stop_id) && ($stop_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $stop_id when calling V3StopDepartureRequest., must be bigger than or equal to 0.');
        }

        $this->container['stop_id'] = $stop_id;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int $max_results Maximum number of results returned
     *
     * @return $this
     */
    public function setMaxResults($max_results)
    {

        if (!is_null($max_results) && ($max_results > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_results when calling V3StopDepartureRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_results) && ($max_results < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_results when calling V3StopDepartureRequest., must be bigger than or equal to 0.');
        }

        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets gtfs
     *
     * @return bool
     */
    public function getGtfs()
    {
        return $this->container['gtfs'];
    }

    /**
     * Sets gtfs
     *
     * @param bool $gtfs Indicates that stop_id parameter will accept \"GTFS stop_id\" data and route_directions[x].route_id parameters will accept route_gtfs_id data
     *
     * @return $this
     */
    public function setGtfs($gtfs)
    {
        $this->container['gtfs'] = $gtfs;

        return $this;
    }

    /**
     * Gets route_directions
     *
     * @return \Swagger\Client\Model\V3StopDepartureRequestRouteDirection[]
     */
    public function getRouteDirections()
    {
        return $this->container['route_directions'];
    }

    /**
     * Sets route_directions
     *
     * @param \Swagger\Client\Model\V3StopDepartureRequestRouteDirection[] $route_directions The route directions to find departures for at this stop.
     *
     * @return $this
     */
    public function setRouteDirections($route_directions)
    {
        $this->container['route_directions'] = $route_directions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


