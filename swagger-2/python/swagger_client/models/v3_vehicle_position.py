# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V3VehiclePosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latitude': 'float',
        'longitude': 'float',
        'easting': 'float',
        'northing': 'float',
        'direction': 'str',
        'bearing': 'float',
        'supplier': 'str',
        'datetime_utc': 'datetime',
        'expiry_time': 'datetime'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'easting': 'easting',
        'northing': 'northing',
        'direction': 'direction',
        'bearing': 'bearing',
        'supplier': 'supplier',
        'datetime_utc': 'datetime_utc',
        'expiry_time': 'expiry_time'
    }

    def __init__(self, latitude=None, longitude=None, easting=None, northing=None, direction=None, bearing=None, supplier=None, datetime_utc=None, expiry_time=None, _configuration=None):  # noqa: E501
        """V3VehiclePosition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._latitude = None
        self._longitude = None
        self._easting = None
        self._northing = None
        self._direction = None
        self._bearing = None
        self._supplier = None
        self._datetime_utc = None
        self._expiry_time = None
        self.discriminator = None

        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if easting is not None:
            self.easting = easting
        if northing is not None:
            self.northing = northing
        if direction is not None:
            self.direction = direction
        if bearing is not None:
            self.bearing = bearing
        if supplier is not None:
            self.supplier = supplier
        if datetime_utc is not None:
            self.datetime_utc = datetime_utc
        if expiry_time is not None:
            self.expiry_time = expiry_time

    @property
    def latitude(self):
        """Gets the latitude of this V3VehiclePosition.  # noqa: E501

        Geographic coordinate of latitude of the vehicle when known. May be null.  Only available for some bus runs.  # noqa: E501

        :return: The latitude of this V3VehiclePosition.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V3VehiclePosition.

        Geographic coordinate of latitude of the vehicle when known. May be null.  Only available for some bus runs.  # noqa: E501

        :param latitude: The latitude of this V3VehiclePosition.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this V3VehiclePosition.  # noqa: E501

        Geographic coordinate of longitude of the vehicle when known.   Only available for some bus runs.  # noqa: E501

        :return: The longitude of this V3VehiclePosition.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V3VehiclePosition.

        Geographic coordinate of longitude of the vehicle when known.   Only available for some bus runs.  # noqa: E501

        :param longitude: The longitude of this V3VehiclePosition.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def easting(self):
        """Gets the easting of this V3VehiclePosition.  # noqa: E501

        CIS - Metro Train Vehicle Location Easting coordinate  # noqa: E501

        :return: The easting of this V3VehiclePosition.  # noqa: E501
        :rtype: float
        """
        return self._easting

    @easting.setter
    def easting(self, easting):
        """Sets the easting of this V3VehiclePosition.

        CIS - Metro Train Vehicle Location Easting coordinate  # noqa: E501

        :param easting: The easting of this V3VehiclePosition.  # noqa: E501
        :type: float
        """

        self._easting = easting

    @property
    def northing(self):
        """Gets the northing of this V3VehiclePosition.  # noqa: E501

        CIS - Metro Train Vehicle Location Northing coordinate  # noqa: E501

        :return: The northing of this V3VehiclePosition.  # noqa: E501
        :rtype: float
        """
        return self._northing

    @northing.setter
    def northing(self, northing):
        """Sets the northing of this V3VehiclePosition.

        CIS - Metro Train Vehicle Location Northing coordinate  # noqa: E501

        :param northing: The northing of this V3VehiclePosition.  # noqa: E501
        :type: float
        """

        self._northing = northing

    @property
    def direction(self):
        """Gets the direction of this V3VehiclePosition.  # noqa: E501

        CIS - Metro Train Vehicle Location Direction  # noqa: E501

        :return: The direction of this V3VehiclePosition.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this V3VehiclePosition.

        CIS - Metro Train Vehicle Location Direction  # noqa: E501

        :param direction: The direction of this V3VehiclePosition.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def bearing(self):
        """Gets the bearing of this V3VehiclePosition.  # noqa: E501

        Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.  Only available for some bus runs.  # noqa: E501

        :return: The bearing of this V3VehiclePosition.  # noqa: E501
        :rtype: float
        """
        return self._bearing

    @bearing.setter
    def bearing(self, bearing):
        """Sets the bearing of this V3VehiclePosition.

        Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.  Only available for some bus runs.  # noqa: E501

        :param bearing: The bearing of this V3VehiclePosition.  # noqa: E501
        :type: float
        """

        self._bearing = bearing

    @property
    def supplier(self):
        """Gets the supplier of this V3VehiclePosition.  # noqa: E501

        Supplier of vehicle position data.  # noqa: E501

        :return: The supplier of this V3VehiclePosition.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this V3VehiclePosition.

        Supplier of vehicle position data.  # noqa: E501

        :param supplier: The supplier of this V3VehiclePosition.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def datetime_utc(self):
        """Gets the datetime_utc of this V3VehiclePosition.  # noqa: E501

        Date and time that the vehicle position data was supplied.  # noqa: E501

        :return: The datetime_utc of this V3VehiclePosition.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime_utc

    @datetime_utc.setter
    def datetime_utc(self, datetime_utc):
        """Sets the datetime_utc of this V3VehiclePosition.

        Date and time that the vehicle position data was supplied.  # noqa: E501

        :param datetime_utc: The datetime_utc of this V3VehiclePosition.  # noqa: E501
        :type: datetime
        """

        self._datetime_utc = datetime_utc

    @property
    def expiry_time(self):
        """Gets the expiry_time of this V3VehiclePosition.  # noqa: E501

        CIS - Metro Train Vehicle Location data expiry time  # noqa: E501

        :return: The expiry_time of this V3VehiclePosition.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this V3VehiclePosition.

        CIS - Metro Train Vehicle Location data expiry time  # noqa: E501

        :param expiry_time: The expiry_time of this V3VehiclePosition.  # noqa: E501
        :type: datetime
        """

        self._expiry_time = expiry_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3VehiclePosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3VehiclePosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3VehiclePosition):
            return True

        return self.to_dict() != other.to_dict()
