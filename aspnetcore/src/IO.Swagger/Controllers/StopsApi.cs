/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StopsApiController : ControllerBase
    { 
        /// <summary>
        /// View facilities at a specific stop (Metro and V/Line stations only)
        /// </summary>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopLocation">Indicates if stop location information will be returned (default &#x3D; false)</param>
        /// <param name="stopAmenities">Indicates if stop amenity information will be returned (default &#x3D; false)</param>
        /// <param name="stopAccessibility">Indicates if stop accessibility information will be returned (default &#x3D; false)</param>
        /// <param name="stopContact">Indicates if stop contact information will be returned (default &#x3D; false)</param>
        /// <param name="stopTicket">Indicates if stop ticket information will be returned (default &#x3D; false)</param>
        /// <param name="gtfs">Incdicates whether the stop_id is a GTFS ID or not</param>
        /// <param name="stopStaffing">Indicates if stop staffing information will be returned (default &#x3D; false)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false)</param>
        /// <param name="token">Please ignore</param>
        /// <param name="devid">Your developer id</param>
        /// <param name="signature">Authentication signature for request</param>
        /// <response code="200">Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="403">Access Denied</response>
        [HttpGet]
        [Route("//v3/stops/{stop_id}/route_type/{route_type}")]
        [ValidateModelState]
        [SwaggerOperation("StopsStopDetails")]
        [SwaggerResponse(statusCode: 200, type: typeof(V3StopResponse), description: "Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).")]
        [SwaggerResponse(statusCode: 400, type: typeof(V3ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(V3ErrorResponse), description: "Access Denied")]
        public virtual IActionResult StopsStopDetails([FromRoute][Required]int? stopId, [FromRoute][Required]int? routeType, [FromQuery]bool? stopLocation, [FromQuery]bool? stopAmenities, [FromQuery]bool? stopAccessibility, [FromQuery]bool? stopContact, [FromQuery]bool? stopTicket, [FromQuery]bool? gtfs, [FromQuery]bool? stopStaffing, [FromQuery]bool? stopDisruptions, [FromQuery]string token, [FromQuery]string devid, [FromQuery]string signature)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(V3StopResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(V3ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(V3ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"stop\" : {\r\n    \"station_description\" : \"station_description\",\r\n    \"routes\" : [ { }, { } ],\r\n    \"stop_amenities\" : {\r\n      \"taxi_rank\" : true,\r\n      \"toilet\" : true,\r\n      \"car_parking\" : \"car_parking\",\r\n      \"cctv\" : true\r\n    },\r\n    \"route_type\" : 6,\r\n    \"stop_staffing\" : {\r\n      \"sun_am_to\" : \"sun_am_to\",\r\n      \"sun_am_from\" : \"sun_am_from\",\r\n      \"sun_pm_to\" : \"sun_pm_to\",\r\n      \"tue_am_from\" : \"tue_am_from\",\r\n      \"ph_from\" : \"ph_from\",\r\n      \"sat_am_from\" : \"sat_am_from\",\r\n      \"wed_am_from\" : \"wed_am_from\",\r\n      \"ph_additional_text\" : \"ph_additional_text\",\r\n      \"sun_pm_from\" : \"sun_pm_from\",\r\n      \"thu_pm_to\" : \"thu_pm_to\",\r\n      \"fri_am_to\" : \"fri_am_to\",\r\n      \"fri_pm_from\" : \"fri_pm_from\",\r\n      \"sat_pm_from\" : \"sat_pm_from\",\r\n      \"tue_am_to\" : \"tue_am_to\",\r\n      \"tue_pm_from\" : \"tue_pm_from\",\r\n      \"sat_am_to\" : \"sat_am_to\",\r\n      \"thu_pm_from\" : \"thu_pm_from\",\r\n      \"mon_am_to\" : \"mon_am_to\",\r\n      \"mon_pm_to\" : \"mon_pm_to\",\r\n      \"fri_am_from\" : \"fri_am_from\",\r\n      \"fri_pm_to\" : \"fri_pm_to\",\r\n      \"thu_am_from\" : \"thu_am_from\",\r\n      \"thu_am_to\" : \"thu_am_to\",\r\n      \"mon_pm_from\" : \"mon_pm_from\",\r\n      \"sat_pm_to\" : \"sat_pm_to\",\r\n      \"tue_pm_to\" : \"tue_pm_to\",\r\n      \"ph_to\" : \"ph_to\",\r\n      \"wed_pm_from\" : \"wed_pm_from\",\r\n      \"wed_pm_To\" : \"wed_pm_To\",\r\n      \"mon_am_from\" : \"mon_am_from\",\r\n      \"wed_am_to\" : \"wed_am_to\"\r\n    },\r\n    \"stop_id\" : 2,\r\n    \"stop_location\" : {\r\n      \"gps\" : {\r\n        \"latitude\" : 1.4658129,\r\n        \"longitude\" : 5.962134\r\n      }\r\n    },\r\n    \"stop_accessibility\" : {\r\n      \"wheelchair\" : {\r\n        \"parking\" : true,\r\n        \"raised_platform_shelther\" : true,\r\n        \"toilet\" : true,\r\n        \"low_ticket_counter\" : true,\r\n        \"ramp\" : true,\r\n        \"accessible_ramp\" : true,\r\n        \"manouvering\" : true,\r\n        \"steep_ramp\" : true,\r\n        \"telephone\" : true,\r\n        \"secondary_path\" : true,\r\n        \"raised_platform\" : true\r\n      },\r\n      \"escalator\" : true,\r\n      \"hearing_loop\" : true,\r\n      \"waiting_room\" : true,\r\n      \"stairs\" : true,\r\n      \"platform_number\" : 5,\r\n      \"lift\" : true,\r\n      \"tactile_ground_surface_indicator\" : true,\r\n      \"lighting\" : true,\r\n      \"stop_accessible\" : true,\r\n      \"audio_customer_information\" : true\r\n    },\r\n    \"stop_landmark\" : \"stop_landmark\",\r\n    \"station_type\" : \"station_type\",\r\n    \"disruption_ids\" : [ 0, 0 ],\r\n    \"stop_name\" : \"stop_name\"\r\n  },\r\n  \"disruptions\" : {\r\n    \"key\" : {\r\n      \"last_updated\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"from_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_type\" : \"disruption_type\",\r\n      \"published_on\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"description\" : \"description\",\r\n      \"display_on_board\" : true,\r\n      \"title\" : \"title\",\r\n      \"url\" : \"url\",\r\n      \"routes\" : [ {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      }, {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      } ],\r\n      \"disruption_id\" : 6,\r\n      \"colour\" : \"colour\",\r\n      \"to_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_status\" : \"disruption_status\",\r\n      \"stops\" : [ {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      }, {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      } ],\r\n      \"display_status\" : true\r\n    }\r\n  },\r\n  \"status\" : {\r\n    \"health\" : 6,\r\n    \"version\" : \"version\"\r\n  }\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<V3StopResponse>(exampleJson)
                        : default(V3StopResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// View all stops near a specific location
        /// </summary>
        /// <param name="latitude">Geographic coordinate of latitude</param>
        /// <param name="longitude">Geographic coordinate of longitude</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API</param>
        /// <param name="maxResults">Maximum number of results returned (default &#x3D; 30)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300)</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false)</param>
        /// <param name="token">Please ignore</param>
        /// <param name="devid">Your developer id</param>
        /// <param name="signature">Authentication signature for request</param>
        /// <response code="200">All stops near the specified location.</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="403">Access Denied</response>
        [HttpGet]
        [Route("//v3/stops/location/{latitude},{longitude}")]
        [ValidateModelState]
        [SwaggerOperation("StopsStopsByGeolocation")]
        [SwaggerResponse(statusCode: 200, type: typeof(V3StopsByDistanceResponse), description: "All stops near the specified location.")]
        [SwaggerResponse(statusCode: 400, type: typeof(V3ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(V3ErrorResponse), description: "Access Denied")]
        public virtual IActionResult StopsStopsByGeolocation([FromRoute][Required]float? latitude, [FromRoute][Required]float? longitude, [FromQuery]List<int?> routeTypes, [FromQuery]int? maxResults, [FromQuery]double? maxDistance, [FromQuery]bool? stopDisruptions, [FromQuery]string token, [FromQuery]string devid, [FromQuery]string signature)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(V3StopsByDistanceResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(V3ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(V3ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"disruptions\" : {\r\n    \"key\" : {\r\n      \"last_updated\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"from_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_type\" : \"disruption_type\",\r\n      \"published_on\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"description\" : \"description\",\r\n      \"display_on_board\" : true,\r\n      \"title\" : \"title\",\r\n      \"url\" : \"url\",\r\n      \"routes\" : [ {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      }, {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      } ],\r\n      \"disruption_id\" : 6,\r\n      \"colour\" : \"colour\",\r\n      \"to_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_status\" : \"disruption_status\",\r\n      \"stops\" : [ {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      }, {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      } ],\r\n      \"display_status\" : true\r\n    }\r\n  },\r\n  \"stops\" : [ {\r\n    \"routes\" : [ { }, { } ],\r\n    \"stop_longitude\" : 2.302136,\r\n    \"stop_sequence\" : 7,\r\n    \"stop_id\" : 1,\r\n    \"route_type\" : 5,\r\n    \"stop_landmark\" : \"stop_landmark\",\r\n    \"stop_suburb\" : \"stop_suburb\",\r\n    \"disruption_ids\" : [ 0, 0 ],\r\n    \"stop_distance\" : 6.0274563,\r\n    \"stop_name\" : \"stop_name\",\r\n    \"stop_latitude\" : 5.637377\r\n  }, {\r\n    \"routes\" : [ { }, { } ],\r\n    \"stop_longitude\" : 2.302136,\r\n    \"stop_sequence\" : 7,\r\n    \"stop_id\" : 1,\r\n    \"route_type\" : 5,\r\n    \"stop_landmark\" : \"stop_landmark\",\r\n    \"stop_suburb\" : \"stop_suburb\",\r\n    \"disruption_ids\" : [ 0, 0 ],\r\n    \"stop_distance\" : 6.0274563,\r\n    \"stop_name\" : \"stop_name\",\r\n    \"stop_latitude\" : 5.637377\r\n  } ],\r\n  \"status\" : {\r\n    \"health\" : 6,\r\n    \"version\" : \"version\"\r\n  }\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<V3StopsByDistanceResponse>(exampleJson)
                        : default(V3StopsByDistanceResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// View all stops on a specific route
        /// </summary>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="directionId">An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.</param>
        /// <param name="stopDisruptions">Indicates if stop disruption information will be returned (default &#x3D; false)</param>
        /// <param name="includeGeopath">Indicates if geopath data will be returned (default &#x3D; false)</param>
        /// <param name="geopathUtc">Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date)</param>
        /// <param name="token">Please ignore</param>
        /// <param name="devid">Your developer id</param>
        /// <param name="signature">Authentication signature for request</param>
        /// <response code="200">All stops on the specified route.</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="403">Access Denied</response>
        [HttpGet]
        [Route("//v3/stops/route/{route_id}/route_type/{route_type}")]
        [ValidateModelState]
        [SwaggerOperation("StopsStopsForRoute")]
        [SwaggerResponse(statusCode: 200, type: typeof(V3StopsOnRouteResponse), description: "All stops on the specified route.")]
        [SwaggerResponse(statusCode: 400, type: typeof(V3ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(V3ErrorResponse), description: "Access Denied")]
        public virtual IActionResult StopsStopsForRoute([FromRoute][Required]int? routeId, [FromRoute][Required]int? routeType, [FromQuery]int? directionId, [FromQuery]bool? stopDisruptions, [FromQuery]bool? includeGeopath, [FromQuery]DateTime? geopathUtc, [FromQuery]string token, [FromQuery]string devid, [FromQuery]string signature)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(V3StopsOnRouteResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(V3ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(V3ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\r\n  \"disruptions\" : {\r\n    \"key\" : {\r\n      \"last_updated\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"from_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_type\" : \"disruption_type\",\r\n      \"published_on\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"description\" : \"description\",\r\n      \"display_on_board\" : true,\r\n      \"title\" : \"title\",\r\n      \"url\" : \"url\",\r\n      \"routes\" : [ {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      }, {\r\n        \"route_id\" : 2,\r\n        \"route_name\" : \"route_name\",\r\n        \"route_type\" : 1,\r\n        \"route_number\" : \"route_number\",\r\n        \"route_gtfs_id\" : \"route_gtfs_id\",\r\n        \"direction\" : {\r\n          \"service_time\" : \"service_time\",\r\n          \"direction_id\" : 6,\r\n          \"direction_name\" : \"direction_name\",\r\n          \"route_direction_id\" : 6\r\n        }\r\n      } ],\r\n      \"disruption_id\" : 6,\r\n      \"colour\" : \"colour\",\r\n      \"to_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"disruption_status\" : \"disruption_status\",\r\n      \"stops\" : [ {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      }, {\r\n        \"stop_id\" : 5,\r\n        \"stop_name\" : \"stop_name\"\r\n      } ],\r\n      \"display_status\" : true\r\n    }\r\n  },\r\n  \"stops\" : [ {\r\n    \"stop_ticket\" : {\r\n      \"ticket_type\" : \"ticket_type\",\r\n      \"vline_reservation\" : true,\r\n      \"zone\" : \"zone\",\r\n      \"ticket_machine\" : true,\r\n      \"ticket_zones\" : [ 7, 7 ],\r\n      \"is_free_fare_zone\" : true,\r\n      \"ticket_checks\" : true\r\n    },\r\n    \"stop_longitude\" : 5.962134,\r\n    \"stop_sequence\" : 5,\r\n    \"route_type\" : 6,\r\n    \"stop_id\" : 2,\r\n    \"stop_landmark\" : \"stop_landmark\",\r\n    \"stop_suburb\" : \"stop_suburb\",\r\n    \"disruption_ids\" : [ 0, 0 ],\r\n    \"stop_name\" : \"stop_name\",\r\n    \"stop_latitude\" : 1.4658129\r\n  }, {\r\n    \"stop_ticket\" : {\r\n      \"ticket_type\" : \"ticket_type\",\r\n      \"vline_reservation\" : true,\r\n      \"zone\" : \"zone\",\r\n      \"ticket_machine\" : true,\r\n      \"ticket_zones\" : [ 7, 7 ],\r\n      \"is_free_fare_zone\" : true,\r\n      \"ticket_checks\" : true\r\n    },\r\n    \"stop_longitude\" : 5.962134,\r\n    \"stop_sequence\" : 5,\r\n    \"route_type\" : 6,\r\n    \"stop_id\" : 2,\r\n    \"stop_landmark\" : \"stop_landmark\",\r\n    \"stop_suburb\" : \"stop_suburb\",\r\n    \"disruption_ids\" : [ 0, 0 ],\r\n    \"stop_name\" : \"stop_name\",\r\n    \"stop_latitude\" : 1.4658129\r\n  } ],\r\n  \"geopath\" : [ { }, { } ],\r\n  \"status\" : {\r\n    \"health\" : 6,\r\n    \"version\" : \"version\"\r\n  }\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<V3StopsOnRouteResponse>(exampleJson)
                        : default(V3StopsOnRouteResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
