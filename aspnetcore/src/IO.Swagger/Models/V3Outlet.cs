/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class V3Outlet : IEquatable<V3Outlet>
    { 
        /// <summary>
        /// The SLID / SPID
        /// </summary>
        /// <value>The SLID / SPID</value>

        [DataMember(Name="outlet_slid_spid")]
        public string OutletSlidSpid { get; set; }

        /// <summary>
        /// The location name of the outlet
        /// </summary>
        /// <value>The location name of the outlet</value>

        [DataMember(Name="outlet_name")]
        public string OutletName { get; set; }

        /// <summary>
        /// The business name of the outlet
        /// </summary>
        /// <value>The business name of the outlet</value>

        [DataMember(Name="outlet_business")]
        public string OutletBusiness { get; set; }

        /// <summary>
        /// Geographic coordinate of latitude at outlet
        /// </summary>
        /// <value>Geographic coordinate of latitude at outlet</value>

        [DataMember(Name="outlet_latitude")]
        public float? OutletLatitude { get; set; }

        /// <summary>
        /// Geographic coordinate of longitude at outlet
        /// </summary>
        /// <value>Geographic coordinate of longitude at outlet</value>

        [DataMember(Name="outlet_longitude")]
        public float? OutletLongitude { get; set; }

        /// <summary>
        /// The city/municipality the outlet is in
        /// </summary>
        /// <value>The city/municipality the outlet is in</value>

        [DataMember(Name="outlet_suburb")]
        public string OutletSuburb { get; set; }

        /// <summary>
        /// The postcode for the outlet
        /// </summary>
        /// <value>The postcode for the outlet</value>

        [DataMember(Name="outlet_postcode")]
        public int? OutletPostcode { get; set; }

        /// <summary>
        /// The business hours on Monday
        /// </summary>
        /// <value>The business hours on Monday</value>

        [DataMember(Name="outlet_business_hour_mon")]
        public string OutletBusinessHourMon { get; set; }

        /// <summary>
        /// The business hours on Tuesday
        /// </summary>
        /// <value>The business hours on Tuesday</value>

        [DataMember(Name="outlet_business_hour_tue")]
        public string OutletBusinessHourTue { get; set; }

        /// <summary>
        /// The business hours on Wednesday
        /// </summary>
        /// <value>The business hours on Wednesday</value>

        [DataMember(Name="outlet_business_hour_wed")]
        public string OutletBusinessHourWed { get; set; }

        /// <summary>
        /// The business hours on Thursday
        /// </summary>
        /// <value>The business hours on Thursday</value>

        [DataMember(Name="outlet_business_hour_thur")]
        public string OutletBusinessHourThur { get; set; }

        /// <summary>
        /// The business hours on Friday
        /// </summary>
        /// <value>The business hours on Friday</value>

        [DataMember(Name="outlet_business_hour_fri")]
        public string OutletBusinessHourFri { get; set; }

        /// <summary>
        /// The business hours on Saturday
        /// </summary>
        /// <value>The business hours on Saturday</value>

        [DataMember(Name="outlet_business_hour_sat")]
        public string OutletBusinessHourSat { get; set; }

        /// <summary>
        /// The business hours on Sunday
        /// </summary>
        /// <value>The business hours on Sunday</value>

        [DataMember(Name="outlet_business_hour_sun")]
        public string OutletBusinessHourSun { get; set; }

        /// <summary>
        /// Any additional notes for the outlet such as &#x27;Buy pre-loaded myki cards only&#x27;. May be null/empty.
        /// </summary>
        /// <value>Any additional notes for the outlet such as &#x27;Buy pre-loaded myki cards only&#x27;. May be null/empty.</value>

        [DataMember(Name="outlet_notes")]
        public string OutletNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3Outlet {\n");
            sb.Append("  OutletSlidSpid: ").Append(OutletSlidSpid).Append("\n");
            sb.Append("  OutletName: ").Append(OutletName).Append("\n");
            sb.Append("  OutletBusiness: ").Append(OutletBusiness).Append("\n");
            sb.Append("  OutletLatitude: ").Append(OutletLatitude).Append("\n");
            sb.Append("  OutletLongitude: ").Append(OutletLongitude).Append("\n");
            sb.Append("  OutletSuburb: ").Append(OutletSuburb).Append("\n");
            sb.Append("  OutletPostcode: ").Append(OutletPostcode).Append("\n");
            sb.Append("  OutletBusinessHourMon: ").Append(OutletBusinessHourMon).Append("\n");
            sb.Append("  OutletBusinessHourTue: ").Append(OutletBusinessHourTue).Append("\n");
            sb.Append("  OutletBusinessHourWed: ").Append(OutletBusinessHourWed).Append("\n");
            sb.Append("  OutletBusinessHourThur: ").Append(OutletBusinessHourThur).Append("\n");
            sb.Append("  OutletBusinessHourFri: ").Append(OutletBusinessHourFri).Append("\n");
            sb.Append("  OutletBusinessHourSat: ").Append(OutletBusinessHourSat).Append("\n");
            sb.Append("  OutletBusinessHourSun: ").Append(OutletBusinessHourSun).Append("\n");
            sb.Append("  OutletNotes: ").Append(OutletNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((V3Outlet)obj);
        }

        /// <summary>
        /// Returns true if V3Outlet instances are equal
        /// </summary>
        /// <param name="other">Instance of V3Outlet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3Outlet other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OutletSlidSpid == other.OutletSlidSpid ||
                    OutletSlidSpid != null &&
                    OutletSlidSpid.Equals(other.OutletSlidSpid)
                ) && 
                (
                    OutletName == other.OutletName ||
                    OutletName != null &&
                    OutletName.Equals(other.OutletName)
                ) && 
                (
                    OutletBusiness == other.OutletBusiness ||
                    OutletBusiness != null &&
                    OutletBusiness.Equals(other.OutletBusiness)
                ) && 
                (
                    OutletLatitude == other.OutletLatitude ||
                    OutletLatitude != null &&
                    OutletLatitude.Equals(other.OutletLatitude)
                ) && 
                (
                    OutletLongitude == other.OutletLongitude ||
                    OutletLongitude != null &&
                    OutletLongitude.Equals(other.OutletLongitude)
                ) && 
                (
                    OutletSuburb == other.OutletSuburb ||
                    OutletSuburb != null &&
                    OutletSuburb.Equals(other.OutletSuburb)
                ) && 
                (
                    OutletPostcode == other.OutletPostcode ||
                    OutletPostcode != null &&
                    OutletPostcode.Equals(other.OutletPostcode)
                ) && 
                (
                    OutletBusinessHourMon == other.OutletBusinessHourMon ||
                    OutletBusinessHourMon != null &&
                    OutletBusinessHourMon.Equals(other.OutletBusinessHourMon)
                ) && 
                (
                    OutletBusinessHourTue == other.OutletBusinessHourTue ||
                    OutletBusinessHourTue != null &&
                    OutletBusinessHourTue.Equals(other.OutletBusinessHourTue)
                ) && 
                (
                    OutletBusinessHourWed == other.OutletBusinessHourWed ||
                    OutletBusinessHourWed != null &&
                    OutletBusinessHourWed.Equals(other.OutletBusinessHourWed)
                ) && 
                (
                    OutletBusinessHourThur == other.OutletBusinessHourThur ||
                    OutletBusinessHourThur != null &&
                    OutletBusinessHourThur.Equals(other.OutletBusinessHourThur)
                ) && 
                (
                    OutletBusinessHourFri == other.OutletBusinessHourFri ||
                    OutletBusinessHourFri != null &&
                    OutletBusinessHourFri.Equals(other.OutletBusinessHourFri)
                ) && 
                (
                    OutletBusinessHourSat == other.OutletBusinessHourSat ||
                    OutletBusinessHourSat != null &&
                    OutletBusinessHourSat.Equals(other.OutletBusinessHourSat)
                ) && 
                (
                    OutletBusinessHourSun == other.OutletBusinessHourSun ||
                    OutletBusinessHourSun != null &&
                    OutletBusinessHourSun.Equals(other.OutletBusinessHourSun)
                ) && 
                (
                    OutletNotes == other.OutletNotes ||
                    OutletNotes != null &&
                    OutletNotes.Equals(other.OutletNotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OutletSlidSpid != null)
                    hashCode = hashCode * 59 + OutletSlidSpid.GetHashCode();
                    if (OutletName != null)
                    hashCode = hashCode * 59 + OutletName.GetHashCode();
                    if (OutletBusiness != null)
                    hashCode = hashCode * 59 + OutletBusiness.GetHashCode();
                    if (OutletLatitude != null)
                    hashCode = hashCode * 59 + OutletLatitude.GetHashCode();
                    if (OutletLongitude != null)
                    hashCode = hashCode * 59 + OutletLongitude.GetHashCode();
                    if (OutletSuburb != null)
                    hashCode = hashCode * 59 + OutletSuburb.GetHashCode();
                    if (OutletPostcode != null)
                    hashCode = hashCode * 59 + OutletPostcode.GetHashCode();
                    if (OutletBusinessHourMon != null)
                    hashCode = hashCode * 59 + OutletBusinessHourMon.GetHashCode();
                    if (OutletBusinessHourTue != null)
                    hashCode = hashCode * 59 + OutletBusinessHourTue.GetHashCode();
                    if (OutletBusinessHourWed != null)
                    hashCode = hashCode * 59 + OutletBusinessHourWed.GetHashCode();
                    if (OutletBusinessHourThur != null)
                    hashCode = hashCode * 59 + OutletBusinessHourThur.GetHashCode();
                    if (OutletBusinessHourFri != null)
                    hashCode = hashCode * 59 + OutletBusinessHourFri.GetHashCode();
                    if (OutletBusinessHourSat != null)
                    hashCode = hashCode * 59 + OutletBusinessHourSat.GetHashCode();
                    if (OutletBusinessHourSun != null)
                    hashCode = hashCode * 59 + OutletBusinessHourSun.GetHashCode();
                    if (OutletNotes != null)
                    hashCode = hashCode * 59 + OutletNotes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(V3Outlet left, V3Outlet right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(V3Outlet left, V3Outlet right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
