/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class V3SearchParameters : IEquatable<V3SearchParameters>
    { 
        /// <summary>
        /// Gets or Sets RouteTypes
        /// </summary>
        
        public enum RouteTypesEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            
            NUMBER_0 = 0,
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            
            NUMBER_1 = 1,
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            
            NUMBER_2 = 2,
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            
            NUMBER_3 = 3,
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            
            NUMBER_4 = 4        }

        /// <summary>
        /// Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
        /// </summary>
        /// <value>Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)</value>

        [DataMember(Name="route_types")]
        public List<RouteTypesEnum> RouteTypes { get; set; }

        /// <summary>
        /// Filter by geographic coordinate of latitude
        /// </summary>
        /// <value>Filter by geographic coordinate of latitude</value>

        [DataMember(Name="latitude")]
        public float? Latitude { get; set; }

        /// <summary>
        /// Filter by geographic coordinate of longitude
        /// </summary>
        /// <value>Filter by geographic coordinate of longitude</value>

        [DataMember(Name="longitude")]
        public float? Longitude { get; set; }

        /// <summary>
        /// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
        /// </summary>
        /// <value>Filter by maximum distance (in metres) from location specified via latitude and longitude parameters</value>

        [DataMember(Name="max_distance")]
        public float? MaxDistance { get; set; }

        /// <summary>
        /// Placeholder for future development; currently unavailable
        /// </summary>
        /// <value>Placeholder for future development; currently unavailable</value>

        [DataMember(Name="include_addresses")]
        public bool? IncludeAddresses { get; set; }

        /// <summary>
        /// Indicates if outlets will be returned in response (default &#x3D; true)
        /// </summary>
        /// <value>Indicates if outlets will be returned in response (default &#x3D; true)</value>

        [DataMember(Name="include_outlets")]
        public bool? IncludeOutlets { get; set; }

        /// <summary>
        /// Indicates whether to find stops by suburbs in the search term (default &#x3D; true)
        /// </summary>
        /// <value>Indicates whether to find stops by suburbs in the search term (default &#x3D; true)</value>

        [DataMember(Name="match_stop_by_suburb")]
        public bool? MatchStopBySuburb { get; set; }

        /// <summary>
        /// Indicates whether to find routes by suburbs in the search term (default &#x3D; true)
        /// </summary>
        /// <value>Indicates whether to find routes by suburbs in the search term (default &#x3D; true)</value>

        [DataMember(Name="match_route_by_suburb")]
        public bool? MatchRouteBySuburb { get; set; }

        /// <summary>
        /// Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)
        /// </summary>
        /// <value>Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false)</value>

        [DataMember(Name="match_stop_by_gtfs_stop_id")]
        public bool? MatchStopByGtfsStopId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3SearchParameters {\n");
            sb.Append("  RouteTypes: ").Append(RouteTypes).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("  IncludeAddresses: ").Append(IncludeAddresses).Append("\n");
            sb.Append("  IncludeOutlets: ").Append(IncludeOutlets).Append("\n");
            sb.Append("  MatchStopBySuburb: ").Append(MatchStopBySuburb).Append("\n");
            sb.Append("  MatchRouteBySuburb: ").Append(MatchRouteBySuburb).Append("\n");
            sb.Append("  MatchStopByGtfsStopId: ").Append(MatchStopByGtfsStopId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((V3SearchParameters)obj);
        }

        /// <summary>
        /// Returns true if V3SearchParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of V3SearchParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3SearchParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RouteTypes == other.RouteTypes ||
                    RouteTypes != null &&
                    RouteTypes.SequenceEqual(other.RouteTypes)
                ) && 
                (
                    Latitude == other.Latitude ||
                    Latitude != null &&
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    Longitude != null &&
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    MaxDistance == other.MaxDistance ||
                    MaxDistance != null &&
                    MaxDistance.Equals(other.MaxDistance)
                ) && 
                (
                    IncludeAddresses == other.IncludeAddresses ||
                    IncludeAddresses != null &&
                    IncludeAddresses.Equals(other.IncludeAddresses)
                ) && 
                (
                    IncludeOutlets == other.IncludeOutlets ||
                    IncludeOutlets != null &&
                    IncludeOutlets.Equals(other.IncludeOutlets)
                ) && 
                (
                    MatchStopBySuburb == other.MatchStopBySuburb ||
                    MatchStopBySuburb != null &&
                    MatchStopBySuburb.Equals(other.MatchStopBySuburb)
                ) && 
                (
                    MatchRouteBySuburb == other.MatchRouteBySuburb ||
                    MatchRouteBySuburb != null &&
                    MatchRouteBySuburb.Equals(other.MatchRouteBySuburb)
                ) && 
                (
                    MatchStopByGtfsStopId == other.MatchStopByGtfsStopId ||
                    MatchStopByGtfsStopId != null &&
                    MatchStopByGtfsStopId.Equals(other.MatchStopByGtfsStopId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RouteTypes != null)
                    hashCode = hashCode * 59 + RouteTypes.GetHashCode();
                    if (Latitude != null)
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    if (Longitude != null)
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (MaxDistance != null)
                    hashCode = hashCode * 59 + MaxDistance.GetHashCode();
                    if (IncludeAddresses != null)
                    hashCode = hashCode * 59 + IncludeAddresses.GetHashCode();
                    if (IncludeOutlets != null)
                    hashCode = hashCode * 59 + IncludeOutlets.GetHashCode();
                    if (MatchStopBySuburb != null)
                    hashCode = hashCode * 59 + MatchStopBySuburb.GetHashCode();
                    if (MatchRouteBySuburb != null)
                    hashCode = hashCode * 59 + MatchRouteBySuburb.GetHashCode();
                    if (MatchStopByGtfsStopId != null)
                    hashCode = hashCode * 59 + MatchStopByGtfsStopId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(V3SearchParameters left, V3SearchParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(V3SearchParameters left, V3SearchParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
