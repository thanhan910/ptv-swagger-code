# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3RouteDeparturesSpecificParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, train_scheduled_timetables: bool=None, scheduled_timetables: bool=None, date_utc: datetime=None, max_results: int=None, include_cancelled: bool=None, look_backwards: bool=None, expand: List[str]=None, include_geopath: bool=None):  # noqa: E501
        """V3RouteDeparturesSpecificParameters - a model defined in Swagger

        :param train_scheduled_timetables: The train_scheduled_timetables of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type train_scheduled_timetables: bool
        :param scheduled_timetables: The scheduled_timetables of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type scheduled_timetables: bool
        :param date_utc: The date_utc of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type date_utc: datetime
        :param max_results: The max_results of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type max_results: int
        :param include_cancelled: The include_cancelled of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type include_cancelled: bool
        :param look_backwards: The look_backwards of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type look_backwards: bool
        :param expand: The expand of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type expand: List[str]
        :param include_geopath: The include_geopath of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :type include_geopath: bool
        """
        self.swagger_types = {
            'train_scheduled_timetables': bool,
            'scheduled_timetables': bool,
            'date_utc': datetime,
            'max_results': int,
            'include_cancelled': bool,
            'look_backwards': bool,
            'expand': List[str],
            'include_geopath': bool
        }

        self.attribute_map = {
            'train_scheduled_timetables': 'train_scheduled_timetables',
            'scheduled_timetables': 'scheduled_timetables',
            'date_utc': 'date_utc',
            'max_results': 'max_results',
            'include_cancelled': 'include_cancelled',
            'look_backwards': 'look_backwards',
            'expand': 'expand',
            'include_geopath': 'include_geopath'
        }
        self._train_scheduled_timetables = train_scheduled_timetables
        self._scheduled_timetables = scheduled_timetables
        self._date_utc = date_utc
        self._max_results = max_results
        self._include_cancelled = include_cancelled
        self._look_backwards = look_backwards
        self._expand = expand
        self._include_geopath = include_geopath

    @classmethod
    def from_dict(cls, dikt) -> 'V3RouteDeparturesSpecificParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.RouteDeparturesSpecificParameters of this V3RouteDeparturesSpecificParameters.  # noqa: E501
        :rtype: V3RouteDeparturesSpecificParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def train_scheduled_timetables(self) -> bool:
        """Gets the train_scheduled_timetables of this V3RouteDeparturesSpecificParameters.

        DEPRECATED - use `scheduled_timetables` instead  # noqa: E501

        :return: The train_scheduled_timetables of this V3RouteDeparturesSpecificParameters.
        :rtype: bool
        """
        return self._train_scheduled_timetables

    @train_scheduled_timetables.setter
    def train_scheduled_timetables(self, train_scheduled_timetables: bool):
        """Sets the train_scheduled_timetables of this V3RouteDeparturesSpecificParameters.

        DEPRECATED - use `scheduled_timetables` instead  # noqa: E501

        :param train_scheduled_timetables: The train_scheduled_timetables of this V3RouteDeparturesSpecificParameters.
        :type train_scheduled_timetables: bool
        """

        self._train_scheduled_timetables = train_scheduled_timetables

    @property
    def scheduled_timetables(self) -> bool:
        """Gets the scheduled_timetables of this V3RouteDeparturesSpecificParameters.

        When set to true, all timetable information returned by Chronos will be sourced from the scheduled timetables,  while when set to false (default state), the operational timetables will be used where available.  # noqa: E501

        :return: The scheduled_timetables of this V3RouteDeparturesSpecificParameters.
        :rtype: bool
        """
        return self._scheduled_timetables

    @scheduled_timetables.setter
    def scheduled_timetables(self, scheduled_timetables: bool):
        """Sets the scheduled_timetables of this V3RouteDeparturesSpecificParameters.

        When set to true, all timetable information returned by Chronos will be sourced from the scheduled timetables,  while when set to false (default state), the operational timetables will be used where available.  # noqa: E501

        :param scheduled_timetables: The scheduled_timetables of this V3RouteDeparturesSpecificParameters.
        :type scheduled_timetables: bool
        """

        self._scheduled_timetables = scheduled_timetables

    @property
    def date_utc(self) -> datetime:
        """Gets the date_utc of this V3RouteDeparturesSpecificParameters.

        Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)  # noqa: E501

        :return: The date_utc of this V3RouteDeparturesSpecificParameters.
        :rtype: datetime
        """
        return self._date_utc

    @date_utc.setter
    def date_utc(self, date_utc: datetime):
        """Sets the date_utc of this V3RouteDeparturesSpecificParameters.

        Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)  # noqa: E501

        :param date_utc: The date_utc of this V3RouteDeparturesSpecificParameters.
        :type date_utc: datetime
        """

        self._date_utc = date_utc

    @property
    def max_results(self) -> int:
        """Gets the max_results of this V3RouteDeparturesSpecificParameters.

        Maximum number of results returned  # noqa: E501

        :return: The max_results of this V3RouteDeparturesSpecificParameters.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this V3RouteDeparturesSpecificParameters.

        Maximum number of results returned  # noqa: E501

        :param max_results: The max_results of this V3RouteDeparturesSpecificParameters.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def include_cancelled(self) -> bool:
        """Gets the include_cancelled of this V3RouteDeparturesSpecificParameters.

        Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only  # noqa: E501

        :return: The include_cancelled of this V3RouteDeparturesSpecificParameters.
        :rtype: bool
        """
        return self._include_cancelled

    @include_cancelled.setter
    def include_cancelled(self, include_cancelled: bool):
        """Sets the include_cancelled of this V3RouteDeparturesSpecificParameters.

        Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only  # noqa: E501

        :param include_cancelled: The include_cancelled of this V3RouteDeparturesSpecificParameters.
        :type include_cancelled: bool
        """

        self._include_cancelled = include_cancelled

    @property
    def look_backwards(self) -> bool:
        """Gets the look_backwards of this V3RouteDeparturesSpecificParameters.

        Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.  # noqa: E501

        :return: The look_backwards of this V3RouteDeparturesSpecificParameters.
        :rtype: bool
        """
        return self._look_backwards

    @look_backwards.setter
    def look_backwards(self, look_backwards: bool):
        """Sets the look_backwards of this V3RouteDeparturesSpecificParameters.

        Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.  # noqa: E501

        :param look_backwards: The look_backwards of this V3RouteDeparturesSpecificParameters.
        :type look_backwards: bool
        """

        self._look_backwards = look_backwards

    @property
    def expand(self) -> List[str]:
        """Gets the expand of this V3RouteDeparturesSpecificParameters.

        List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.  # noqa: E501

        :return: The expand of this V3RouteDeparturesSpecificParameters.
        :rtype: List[str]
        """
        return self._expand

    @expand.setter
    def expand(self, expand: List[str]):
        """Sets the expand of this V3RouteDeparturesSpecificParameters.

        List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.  # noqa: E501

        :param expand: The expand of this V3RouteDeparturesSpecificParameters.
        :type expand: List[str]
        """
        allowed_values = ["All", "Stop", "Route", "Run", "Direction", "Disruption", "VehicleDescriptor", "VehiclePosition", "None"]  # noqa: E501
        if not set(expand).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `expand` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(expand) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._expand = expand

    @property
    def include_geopath(self) -> bool:
        """Gets the include_geopath of this V3RouteDeparturesSpecificParameters.

        Indicates if the route geopath should be returned  # noqa: E501

        :return: The include_geopath of this V3RouteDeparturesSpecificParameters.
        :rtype: bool
        """
        return self._include_geopath

    @include_geopath.setter
    def include_geopath(self, include_geopath: bool):
        """Sets the include_geopath of this V3RouteDeparturesSpecificParameters.

        Indicates if the route geopath should be returned  # noqa: E501

        :param include_geopath: The include_geopath of this V3RouteDeparturesSpecificParameters.
        :type include_geopath: bool
        """

        self._include_geopath = include_geopath
