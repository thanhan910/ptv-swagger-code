# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3VehicleDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, operator: str=None, id: str=None, low_floor: bool=None, air_conditioned: bool=None, description: str=None, supplier: str=None, length: str=None):  # noqa: E501
        """V3VehicleDescriptor - a model defined in Swagger

        :param operator: The operator of this V3VehicleDescriptor.  # noqa: E501
        :type operator: str
        :param id: The id of this V3VehicleDescriptor.  # noqa: E501
        :type id: str
        :param low_floor: The low_floor of this V3VehicleDescriptor.  # noqa: E501
        :type low_floor: bool
        :param air_conditioned: The air_conditioned of this V3VehicleDescriptor.  # noqa: E501
        :type air_conditioned: bool
        :param description: The description of this V3VehicleDescriptor.  # noqa: E501
        :type description: str
        :param supplier: The supplier of this V3VehicleDescriptor.  # noqa: E501
        :type supplier: str
        :param length: The length of this V3VehicleDescriptor.  # noqa: E501
        :type length: str
        """
        self.swagger_types = {
            'operator': str,
            'id': str,
            'low_floor': bool,
            'air_conditioned': bool,
            'description': str,
            'supplier': str,
            'length': str
        }

        self.attribute_map = {
            'operator': 'operator',
            'id': 'id',
            'low_floor': 'low_floor',
            'air_conditioned': 'air_conditioned',
            'description': 'description',
            'supplier': 'supplier',
            'length': 'length'
        }
        self._operator = operator
        self._id = id
        self._low_floor = low_floor
        self._air_conditioned = air_conditioned
        self._description = description
        self._supplier = supplier
        self._length = length

    @classmethod
    def from_dict(cls, dikt) -> 'V3VehicleDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.VehicleDescriptor of this V3VehicleDescriptor.  # noqa: E501
        :rtype: V3VehicleDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self) -> str:
        """Gets the operator of this V3VehicleDescriptor.

        Operator name of the vehicle such as \"Metro Trains Melbourne\", \"Yarra Trams\", \"Ventura Bus Line\", \"CDC\" or \"Sita Bus Lines\" . May be null/empty.  Only available for train, tram, v/line and some bus runs.  # noqa: E501

        :return: The operator of this V3VehicleDescriptor.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this V3VehicleDescriptor.

        Operator name of the vehicle such as \"Metro Trains Melbourne\", \"Yarra Trams\", \"Ventura Bus Line\", \"CDC\" or \"Sita Bus Lines\" . May be null/empty.  Only available for train, tram, v/line and some bus runs.  # noqa: E501

        :param operator: The operator of this V3VehicleDescriptor.
        :type operator: str
        """

        self._operator = operator

    @property
    def id(self) -> str:
        """Gets the id of this V3VehicleDescriptor.

        Operator identifier of the vehicle such as \"26094\". May be null/empty. Only available for some tram and bus runs.  # noqa: E501

        :return: The id of this V3VehicleDescriptor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this V3VehicleDescriptor.

        Operator identifier of the vehicle such as \"26094\". May be null/empty. Only available for some tram and bus runs.  # noqa: E501

        :param id: The id of this V3VehicleDescriptor.
        :type id: str
        """

        self._id = id

    @property
    def low_floor(self) -> bool:
        """Gets the low_floor of this V3VehicleDescriptor.

        Indicator if vehicle has a low floor. May be null. Only available for some tram runs.  # noqa: E501

        :return: The low_floor of this V3VehicleDescriptor.
        :rtype: bool
        """
        return self._low_floor

    @low_floor.setter
    def low_floor(self, low_floor: bool):
        """Sets the low_floor of this V3VehicleDescriptor.

        Indicator if vehicle has a low floor. May be null. Only available for some tram runs.  # noqa: E501

        :param low_floor: The low_floor of this V3VehicleDescriptor.
        :type low_floor: bool
        """

        self._low_floor = low_floor

    @property
    def air_conditioned(self) -> bool:
        """Gets the air_conditioned of this V3VehicleDescriptor.

        Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.  # noqa: E501

        :return: The air_conditioned of this V3VehicleDescriptor.
        :rtype: bool
        """
        return self._air_conditioned

    @air_conditioned.setter
    def air_conditioned(self, air_conditioned: bool):
        """Sets the air_conditioned of this V3VehicleDescriptor.

        Indicator if vehicle is air conditioned. May be null. Only available for some tram runs.  # noqa: E501

        :param air_conditioned: The air_conditioned of this V3VehicleDescriptor.
        :type air_conditioned: bool
        """

        self._air_conditioned = air_conditioned

    @property
    def description(self) -> str:
        """Gets the description of this V3VehicleDescriptor.

        Vehicle description such as \"6 Car Comeng\", \"6 Car Xtrapolis\", \"3 Car Comeng\", \"6 Car Siemens\", \"3 Car Siemens\". May be null/empty.  Only available for some metropolitan train runs.  # noqa: E501

        :return: The description of this V3VehicleDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this V3VehicleDescriptor.

        Vehicle description such as \"6 Car Comeng\", \"6 Car Xtrapolis\", \"3 Car Comeng\", \"6 Car Siemens\", \"3 Car Siemens\". May be null/empty.  Only available for some metropolitan train runs.  # noqa: E501

        :param description: The description of this V3VehicleDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def supplier(self) -> str:
        """Gets the supplier of this V3VehicleDescriptor.

        Supplier of vehicle descriptor data.  # noqa: E501

        :return: The supplier of this V3VehicleDescriptor.
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier: str):
        """Sets the supplier of this V3VehicleDescriptor.

        Supplier of vehicle descriptor data.  # noqa: E501

        :param supplier: The supplier of this V3VehicleDescriptor.
        :type supplier: str
        """

        self._supplier = supplier

    @property
    def length(self) -> str:
        """Gets the length of this V3VehicleDescriptor.

        The length of the vehicle. Applies to CIS - Metro Trains  # noqa: E501

        :return: The length of this V3VehicleDescriptor.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length: str):
        """Sets the length of this V3VehicleDescriptor.

        The length of the vehicle. Applies to CIS - Metro Trains  # noqa: E501

        :param length: The length of this V3VehicleDescriptor.
        :type length: str
        """

        self._length = length
