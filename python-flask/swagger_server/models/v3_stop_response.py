# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v3_disruption import V3Disruption  # noqa: F401,E501
from swagger_server.models.v3_status import V3Status  # noqa: F401,E501
from swagger_server.models.v3_stop_details import V3StopDetails  # noqa: F401,E501
from swagger_server import util


class V3StopResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, stop: V3StopDetails=None, disruptions: Dict[str, V3Disruption]=None, status: V3Status=None):  # noqa: E501
        """V3StopResponse - a model defined in Swagger

        :param stop: The stop of this V3StopResponse.  # noqa: E501
        :type stop: V3StopDetails
        :param disruptions: The disruptions of this V3StopResponse.  # noqa: E501
        :type disruptions: Dict[str, V3Disruption]
        :param status: The status of this V3StopResponse.  # noqa: E501
        :type status: V3Status
        """
        self.swagger_types = {
            'stop': V3StopDetails,
            'disruptions': Dict[str, V3Disruption],
            'status': V3Status
        }

        self.attribute_map = {
            'stop': 'stop',
            'disruptions': 'disruptions',
            'status': 'status'
        }
        self._stop = stop
        self._disruptions = disruptions
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'V3StopResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.StopResponse of this V3StopResponse.  # noqa: E501
        :rtype: V3StopResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stop(self) -> V3StopDetails:
        """Gets the stop of this V3StopResponse.


        :return: The stop of this V3StopResponse.
        :rtype: V3StopDetails
        """
        return self._stop

    @stop.setter
    def stop(self, stop: V3StopDetails):
        """Sets the stop of this V3StopResponse.


        :param stop: The stop of this V3StopResponse.
        :type stop: V3StopDetails
        """

        self._stop = stop

    @property
    def disruptions(self) -> Dict[str, V3Disruption]:
        """Gets the disruptions of this V3StopResponse.

        Disruption information applicable to relevant routes or stops  # noqa: E501

        :return: The disruptions of this V3StopResponse.
        :rtype: Dict[str, V3Disruption]
        """
        return self._disruptions

    @disruptions.setter
    def disruptions(self, disruptions: Dict[str, V3Disruption]):
        """Sets the disruptions of this V3StopResponse.

        Disruption information applicable to relevant routes or stops  # noqa: E501

        :param disruptions: The disruptions of this V3StopResponse.
        :type disruptions: Dict[str, V3Disruption]
        """

        self._disruptions = disruptions

    @property
    def status(self) -> V3Status:
        """Gets the status of this V3StopResponse.


        :return: The status of this V3StopResponse.
        :rtype: V3Status
        """
        return self._status

    @status.setter
    def status(self, status: V3Status):
        """Sets the status of this V3StopResponse.


        :param status: The status of this V3StopResponse.
        :type status: V3Status
        """

        self._status = status
