# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3DynamoDbTimetable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, table_name: str=None, parser_version: int=None, parser_mapping_version: str=None, pt_version: int=None, pt_mapping_version: str=None, transport_type: int=None, applicable_local_date: str=None, exists: bool=None):  # noqa: E501
        """V3DynamoDbTimetable - a model defined in Swagger

        :param table_name: The table_name of this V3DynamoDbTimetable.  # noqa: E501
        :type table_name: str
        :param parser_version: The parser_version of this V3DynamoDbTimetable.  # noqa: E501
        :type parser_version: int
        :param parser_mapping_version: The parser_mapping_version of this V3DynamoDbTimetable.  # noqa: E501
        :type parser_mapping_version: str
        :param pt_version: The pt_version of this V3DynamoDbTimetable.  # noqa: E501
        :type pt_version: int
        :param pt_mapping_version: The pt_mapping_version of this V3DynamoDbTimetable.  # noqa: E501
        :type pt_mapping_version: str
        :param transport_type: The transport_type of this V3DynamoDbTimetable.  # noqa: E501
        :type transport_type: int
        :param applicable_local_date: The applicable_local_date of this V3DynamoDbTimetable.  # noqa: E501
        :type applicable_local_date: str
        :param exists: The exists of this V3DynamoDbTimetable.  # noqa: E501
        :type exists: bool
        """
        self.swagger_types = {
            'table_name': str,
            'parser_version': int,
            'parser_mapping_version': str,
            'pt_version': int,
            'pt_mapping_version': str,
            'transport_type': int,
            'applicable_local_date': str,
            'exists': bool
        }

        self.attribute_map = {
            'table_name': 'table_name',
            'parser_version': 'parser_version',
            'parser_mapping_version': 'parser_mapping_version',
            'pt_version': 'pt_version',
            'pt_mapping_version': 'pt_mapping_version',
            'transport_type': 'transport_type',
            'applicable_local_date': 'applicable_local_date',
            'exists': 'exists'
        }
        self._table_name = table_name
        self._parser_version = parser_version
        self._parser_mapping_version = parser_mapping_version
        self._pt_version = pt_version
        self._pt_mapping_version = pt_mapping_version
        self._transport_type = transport_type
        self._applicable_local_date = applicable_local_date
        self._exists = exists

    @classmethod
    def from_dict(cls, dikt) -> 'V3DynamoDbTimetable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.DynamoDbTimetable of this V3DynamoDbTimetable.  # noqa: E501
        :rtype: V3DynamoDbTimetable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self) -> str:
        """Gets the table_name of this V3DynamoDbTimetable.

        Name of corresponding table in DynamoDB.  # noqa: E501

        :return: The table_name of this V3DynamoDbTimetable.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name: str):
        """Sets the table_name of this V3DynamoDbTimetable.

        Name of corresponding table in DynamoDB.  # noqa: E501

        :param table_name: The table_name of this V3DynamoDbTimetable.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def parser_version(self) -> int:
        """Gets the parser_version of this V3DynamoDbTimetable.

        Parser verison  # noqa: E501

        :return: The parser_version of this V3DynamoDbTimetable.
        :rtype: int
        """
        return self._parser_version

    @parser_version.setter
    def parser_version(self, parser_version: int):
        """Sets the parser_version of this V3DynamoDbTimetable.

        Parser verison  # noqa: E501

        :param parser_version: The parser_version of this V3DynamoDbTimetable.
        :type parser_version: int
        """

        self._parser_version = parser_version

    @property
    def parser_mapping_version(self) -> str:
        """Gets the parser_mapping_version of this V3DynamoDbTimetable.

        Diva Mapping Version used to load Parser into DynamoDB  # noqa: E501

        :return: The parser_mapping_version of this V3DynamoDbTimetable.
        :rtype: str
        """
        return self._parser_mapping_version

    @parser_mapping_version.setter
    def parser_mapping_version(self, parser_mapping_version: str):
        """Sets the parser_mapping_version of this V3DynamoDbTimetable.

        Diva Mapping Version used to load Parser into DynamoDB  # noqa: E501

        :param parser_mapping_version: The parser_mapping_version of this V3DynamoDbTimetable.
        :type parser_mapping_version: str
        """

        self._parser_mapping_version = parser_mapping_version

    @property
    def pt_version(self) -> int:
        """Gets the pt_version of this V3DynamoDbTimetable.

        PT version  # noqa: E501

        :return: The pt_version of this V3DynamoDbTimetable.
        :rtype: int
        """
        return self._pt_version

    @pt_version.setter
    def pt_version(self, pt_version: int):
        """Sets the pt_version of this V3DynamoDbTimetable.

        PT version  # noqa: E501

        :param pt_version: The pt_version of this V3DynamoDbTimetable.
        :type pt_version: int
        """

        self._pt_version = pt_version

    @property
    def pt_mapping_version(self) -> str:
        """Gets the pt_mapping_version of this V3DynamoDbTimetable.

        Diva Mapping Version used to load PT into DynamoDB  # noqa: E501

        :return: The pt_mapping_version of this V3DynamoDbTimetable.
        :rtype: str
        """
        return self._pt_mapping_version

    @pt_mapping_version.setter
    def pt_mapping_version(self, pt_mapping_version: str):
        """Sets the pt_mapping_version of this V3DynamoDbTimetable.

        Diva Mapping Version used to load PT into DynamoDB  # noqa: E501

        :param pt_mapping_version: The pt_mapping_version of this V3DynamoDbTimetable.
        :type pt_mapping_version: str
        """

        self._pt_mapping_version = pt_mapping_version

    @property
    def transport_type(self) -> int:
        """Gets the transport_type of this V3DynamoDbTimetable.

        A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)  # noqa: E501

        :return: The transport_type of this V3DynamoDbTimetable.
        :rtype: int
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type: int):
        """Sets the transport_type of this V3DynamoDbTimetable.

        A.k.a. Transport Mode (e.g. Train, Tram, Bus, V/Line, Nightrider)  # noqa: E501

        :param transport_type: The transport_type of this V3DynamoDbTimetable.
        :type transport_type: int
        """
        allowed_values = ["0", "1", "2", "3", "4"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type

    @property
    def applicable_local_date(self) -> str:
        """Gets the applicable_local_date of this V3DynamoDbTimetable.

        Formated date string of applicable date  # noqa: E501

        :return: The applicable_local_date of this V3DynamoDbTimetable.
        :rtype: str
        """
        return self._applicable_local_date

    @applicable_local_date.setter
    def applicable_local_date(self, applicable_local_date: str):
        """Sets the applicable_local_date of this V3DynamoDbTimetable.

        Formated date string of applicable date  # noqa: E501

        :param applicable_local_date: The applicable_local_date of this V3DynamoDbTimetable.
        :type applicable_local_date: str
        """

        self._applicable_local_date = applicable_local_date

    @property
    def exists(self) -> bool:
        """Gets the exists of this V3DynamoDbTimetable.

        True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),  or false if there are no records for this date and transport type.  # noqa: E501

        :return: The exists of this V3DynamoDbTimetable.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists: bool):
        """Sets the exists of this V3DynamoDbTimetable.

        True if the named table has been created in DynamoDB (i.e. at least one departure record has been loaded),  or false if there are no records for this date and transport type.  # noqa: E501

        :param exists: The exists of this V3DynamoDbTimetable.
        :type exists: bool
        """

        self._exists = exists
