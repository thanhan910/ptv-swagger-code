# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v3_vehicle_descriptor import V3VehicleDescriptor  # noqa: F401,E501
from swagger_server.models.v3_vehicle_position import V3VehiclePosition  # noqa: F401,E501
from swagger_server import util


class V3Run(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, run_id: int=None, run_ref: str=None, route_id: int=None, route_type: int=None, final_stop_id: int=None, destination_name: str=None, status: str=None, direction_id: int=None, run_sequence: int=None, express_stop_count: int=None, vehicle_position: V3VehiclePosition=None, vehicle_descriptor: V3VehicleDescriptor=None, geopath: List[object]=None):  # noqa: E501
        """V3Run - a model defined in Swagger

        :param run_id: The run_id of this V3Run.  # noqa: E501
        :type run_id: int
        :param run_ref: The run_ref of this V3Run.  # noqa: E501
        :type run_ref: str
        :param route_id: The route_id of this V3Run.  # noqa: E501
        :type route_id: int
        :param route_type: The route_type of this V3Run.  # noqa: E501
        :type route_type: int
        :param final_stop_id: The final_stop_id of this V3Run.  # noqa: E501
        :type final_stop_id: int
        :param destination_name: The destination_name of this V3Run.  # noqa: E501
        :type destination_name: str
        :param status: The status of this V3Run.  # noqa: E501
        :type status: str
        :param direction_id: The direction_id of this V3Run.  # noqa: E501
        :type direction_id: int
        :param run_sequence: The run_sequence of this V3Run.  # noqa: E501
        :type run_sequence: int
        :param express_stop_count: The express_stop_count of this V3Run.  # noqa: E501
        :type express_stop_count: int
        :param vehicle_position: The vehicle_position of this V3Run.  # noqa: E501
        :type vehicle_position: V3VehiclePosition
        :param vehicle_descriptor: The vehicle_descriptor of this V3Run.  # noqa: E501
        :type vehicle_descriptor: V3VehicleDescriptor
        :param geopath: The geopath of this V3Run.  # noqa: E501
        :type geopath: List[object]
        """
        self.swagger_types = {
            'run_id': int,
            'run_ref': str,
            'route_id': int,
            'route_type': int,
            'final_stop_id': int,
            'destination_name': str,
            'status': str,
            'direction_id': int,
            'run_sequence': int,
            'express_stop_count': int,
            'vehicle_position': V3VehiclePosition,
            'vehicle_descriptor': V3VehicleDescriptor,
            'geopath': List[object]
        }

        self.attribute_map = {
            'run_id': 'run_id',
            'run_ref': 'run_ref',
            'route_id': 'route_id',
            'route_type': 'route_type',
            'final_stop_id': 'final_stop_id',
            'destination_name': 'destination_name',
            'status': 'status',
            'direction_id': 'direction_id',
            'run_sequence': 'run_sequence',
            'express_stop_count': 'express_stop_count',
            'vehicle_position': 'vehicle_position',
            'vehicle_descriptor': 'vehicle_descriptor',
            'geopath': 'geopath'
        }
        self._run_id = run_id
        self._run_ref = run_ref
        self._route_id = route_id
        self._route_type = route_type
        self._final_stop_id = final_stop_id
        self._destination_name = destination_name
        self._status = status
        self._direction_id = direction_id
        self._run_sequence = run_sequence
        self._express_stop_count = express_stop_count
        self._vehicle_position = vehicle_position
        self._vehicle_descriptor = vehicle_descriptor
        self._geopath = geopath

    @classmethod
    def from_dict(cls, dikt) -> 'V3Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.Run of this V3Run.  # noqa: E501
        :rtype: V3Run
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_id(self) -> int:
        """Gets the run_id of this V3Run.

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric  # noqa: E501

        :return: The run_id of this V3Run.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: int):
        """Sets the run_id of this V3Run.

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric  # noqa: E501

        :param run_id: The run_id of this V3Run.
        :type run_id: int
        """

        self._run_id = run_id

    @property
    def run_ref(self) -> str:
        """Gets the run_ref of this V3Run.

        Alphanumeric trip/service run identifier  # noqa: E501

        :return: The run_ref of this V3Run.
        :rtype: str
        """
        return self._run_ref

    @run_ref.setter
    def run_ref(self, run_ref: str):
        """Sets the run_ref of this V3Run.

        Alphanumeric trip/service run identifier  # noqa: E501

        :param run_ref: The run_ref of this V3Run.
        :type run_ref: str
        """

        self._run_ref = run_ref

    @property
    def route_id(self) -> int:
        """Gets the route_id of this V3Run.

        Route identifier  # noqa: E501

        :return: The route_id of this V3Run.
        :rtype: int
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id: int):
        """Sets the route_id of this V3Run.

        Route identifier  # noqa: E501

        :param route_id: The route_id of this V3Run.
        :type route_id: int
        """

        self._route_id = route_id

    @property
    def route_type(self) -> int:
        """Gets the route_type of this V3Run.

        Transport mode identifier  # noqa: E501

        :return: The route_type of this V3Run.
        :rtype: int
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type: int):
        """Sets the route_type of this V3Run.

        Transport mode identifier  # noqa: E501

        :param route_type: The route_type of this V3Run.
        :type route_type: int
        """

        self._route_type = route_type

    @property
    def final_stop_id(self) -> int:
        """Gets the final_stop_id of this V3Run.

        stop_id of final stop of run  # noqa: E501

        :return: The final_stop_id of this V3Run.
        :rtype: int
        """
        return self._final_stop_id

    @final_stop_id.setter
    def final_stop_id(self, final_stop_id: int):
        """Sets the final_stop_id of this V3Run.

        stop_id of final stop of run  # noqa: E501

        :param final_stop_id: The final_stop_id of this V3Run.
        :type final_stop_id: int
        """

        self._final_stop_id = final_stop_id

    @property
    def destination_name(self) -> str:
        """Gets the destination_name of this V3Run.

        Name of destination of run  # noqa: E501

        :return: The destination_name of this V3Run.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name: str):
        """Sets the destination_name of this V3Run.

        Name of destination of run  # noqa: E501

        :param destination_name: The destination_name of this V3Run.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def status(self) -> str:
        """Gets the status of this V3Run.

        Status of metropolitan train run; returns \"scheduled\" for other modes  # noqa: E501

        :return: The status of this V3Run.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this V3Run.

        Status of metropolitan train run; returns \"scheduled\" for other modes  # noqa: E501

        :param status: The status of this V3Run.
        :type status: str
        """

        self._status = status

    @property
    def direction_id(self) -> int:
        """Gets the direction_id of this V3Run.

        Direction of travel identifier  # noqa: E501

        :return: The direction_id of this V3Run.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id: int):
        """Sets the direction_id of this V3Run.

        Direction of travel identifier  # noqa: E501

        :param direction_id: The direction_id of this V3Run.
        :type direction_id: int
        """

        self._direction_id = direction_id

    @property
    def run_sequence(self) -> int:
        """Gets the run_sequence of this V3Run.

        Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.  # noqa: E501

        :return: The run_sequence of this V3Run.
        :rtype: int
        """
        return self._run_sequence

    @run_sequence.setter
    def run_sequence(self, run_sequence: int):
        """Sets the run_sequence of this V3Run.

        Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.  # noqa: E501

        :param run_sequence: The run_sequence of this V3Run.
        :type run_sequence: int
        """

        self._run_sequence = run_sequence

    @property
    def express_stop_count(self) -> int:
        """Gets the express_stop_count of this V3Run.

        The number of remaining skipped/express stations for the run/service from a stop  # noqa: E501

        :return: The express_stop_count of this V3Run.
        :rtype: int
        """
        return self._express_stop_count

    @express_stop_count.setter
    def express_stop_count(self, express_stop_count: int):
        """Sets the express_stop_count of this V3Run.

        The number of remaining skipped/express stations for the run/service from a stop  # noqa: E501

        :param express_stop_count: The express_stop_count of this V3Run.
        :type express_stop_count: int
        """

        self._express_stop_count = express_stop_count

    @property
    def vehicle_position(self) -> V3VehiclePosition:
        """Gets the vehicle_position of this V3Run.


        :return: The vehicle_position of this V3Run.
        :rtype: V3VehiclePosition
        """
        return self._vehicle_position

    @vehicle_position.setter
    def vehicle_position(self, vehicle_position: V3VehiclePosition):
        """Sets the vehicle_position of this V3Run.


        :param vehicle_position: The vehicle_position of this V3Run.
        :type vehicle_position: V3VehiclePosition
        """

        self._vehicle_position = vehicle_position

    @property
    def vehicle_descriptor(self) -> V3VehicleDescriptor:
        """Gets the vehicle_descriptor of this V3Run.


        :return: The vehicle_descriptor of this V3Run.
        :rtype: V3VehicleDescriptor
        """
        return self._vehicle_descriptor

    @vehicle_descriptor.setter
    def vehicle_descriptor(self, vehicle_descriptor: V3VehicleDescriptor):
        """Sets the vehicle_descriptor of this V3Run.


        :param vehicle_descriptor: The vehicle_descriptor of this V3Run.
        :type vehicle_descriptor: V3VehicleDescriptor
        """

        self._vehicle_descriptor = vehicle_descriptor

    @property
    def geopath(self) -> List[object]:
        """Gets the geopath of this V3Run.

        Geopath of the route  # noqa: E501

        :return: The geopath of this V3Run.
        :rtype: List[object]
        """
        return self._geopath

    @geopath.setter
    def geopath(self, geopath: List[object]):
        """Sets the geopath of this V3Run.

        Geopath of the route  # noqa: E501

        :param geopath: The geopath of this V3Run.
        :type geopath: List[object]
        """

        self._geopath = geopath
