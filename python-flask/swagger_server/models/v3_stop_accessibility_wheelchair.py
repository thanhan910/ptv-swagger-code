# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3StopAccessibilityWheelchair(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, accessible_ramp: bool=None, parking: bool=None, telephone: bool=None, toilet: bool=None, low_ticket_counter: bool=None, manouvering: bool=None, raised_platform: bool=None, ramp: bool=None, secondary_path: bool=None, raised_platform_shelther: bool=None, steep_ramp: bool=None):  # noqa: E501
        """V3StopAccessibilityWheelchair - a model defined in Swagger

        :param accessible_ramp: The accessible_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type accessible_ramp: bool
        :param parking: The parking of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type parking: bool
        :param telephone: The telephone of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type telephone: bool
        :param toilet: The toilet of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type toilet: bool
        :param low_ticket_counter: The low_ticket_counter of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type low_ticket_counter: bool
        :param manouvering: The manouvering of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type manouvering: bool
        :param raised_platform: The raised_platform of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type raised_platform: bool
        :param ramp: The ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type ramp: bool
        :param secondary_path: The secondary_path of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type secondary_path: bool
        :param raised_platform_shelther: The raised_platform_shelther of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type raised_platform_shelther: bool
        :param steep_ramp: The steep_ramp of this V3StopAccessibilityWheelchair.  # noqa: E501
        :type steep_ramp: bool
        """
        self.swagger_types = {
            'accessible_ramp': bool,
            'parking': bool,
            'telephone': bool,
            'toilet': bool,
            'low_ticket_counter': bool,
            'manouvering': bool,
            'raised_platform': bool,
            'ramp': bool,
            'secondary_path': bool,
            'raised_platform_shelther': bool,
            'steep_ramp': bool
        }

        self.attribute_map = {
            'accessible_ramp': 'accessible_ramp',
            'parking': 'parking',
            'telephone': 'telephone',
            'toilet': 'toilet',
            'low_ticket_counter': 'low_ticket_counter',
            'manouvering': 'manouvering',
            'raised_platform': 'raised_platform',
            'ramp': 'ramp',
            'secondary_path': 'secondary_path',
            'raised_platform_shelther': 'raised_platform_shelther',
            'steep_ramp': 'steep_ramp'
        }
        self._accessible_ramp = accessible_ramp
        self._parking = parking
        self._telephone = telephone
        self._toilet = toilet
        self._low_ticket_counter = low_ticket_counter
        self._manouvering = manouvering
        self._raised_platform = raised_platform
        self._ramp = ramp
        self._secondary_path = secondary_path
        self._raised_platform_shelther = raised_platform_shelther
        self._steep_ramp = steep_ramp

    @classmethod
    def from_dict(cls, dikt) -> 'V3StopAccessibilityWheelchair':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.StopAccessibilityWheelchair of this V3StopAccessibilityWheelchair.  # noqa: E501
        :rtype: V3StopAccessibilityWheelchair
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessible_ramp(self) -> bool:
        """Gets the accessible_ramp of this V3StopAccessibilityWheelchair.


        :return: The accessible_ramp of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._accessible_ramp

    @accessible_ramp.setter
    def accessible_ramp(self, accessible_ramp: bool):
        """Sets the accessible_ramp of this V3StopAccessibilityWheelchair.


        :param accessible_ramp: The accessible_ramp of this V3StopAccessibilityWheelchair.
        :type accessible_ramp: bool
        """

        self._accessible_ramp = accessible_ramp

    @property
    def parking(self) -> bool:
        """Gets the parking of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The parking of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._parking

    @parking.setter
    def parking(self, parking: bool):
        """Sets the parking of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param parking: The parking of this V3StopAccessibilityWheelchair.
        :type parking: bool
        """

        self._parking = parking

    @property
    def telephone(self) -> bool:
        """Gets the telephone of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The telephone of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: bool):
        """Sets the telephone of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param telephone: The telephone of this V3StopAccessibilityWheelchair.
        :type telephone: bool
        """

        self._telephone = telephone

    @property
    def toilet(self) -> bool:
        """Gets the toilet of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The toilet of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._toilet

    @toilet.setter
    def toilet(self, toilet: bool):
        """Sets the toilet of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param toilet: The toilet of this V3StopAccessibilityWheelchair.
        :type toilet: bool
        """

        self._toilet = toilet

    @property
    def low_ticket_counter(self) -> bool:
        """Gets the low_ticket_counter of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :return: The low_ticket_counter of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._low_ticket_counter

    @low_ticket_counter.setter
    def low_ticket_counter(self, low_ticket_counter: bool):
        """Sets the low_ticket_counter of this V3StopAccessibilityWheelchair.

        Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)  # noqa: E501

        :param low_ticket_counter: The low_ticket_counter of this V3StopAccessibilityWheelchair.
        :type low_ticket_counter: bool
        """

        self._low_ticket_counter = low_ticket_counter

    @property
    def manouvering(self) -> bool:
        """Gets the manouvering of this V3StopAccessibilityWheelchair.

        Indicates if there is a space for mobility device to board on or off a transport mode  # noqa: E501

        :return: The manouvering of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._manouvering

    @manouvering.setter
    def manouvering(self, manouvering: bool):
        """Sets the manouvering of this V3StopAccessibilityWheelchair.

        Indicates if there is a space for mobility device to board on or off a transport mode  # noqa: E501

        :param manouvering: The manouvering of this V3StopAccessibilityWheelchair.
        :type manouvering: bool
        """

        self._manouvering = manouvering

    @property
    def raised_platform(self) -> bool:
        """Gets the raised_platform of this V3StopAccessibilityWheelchair.

        Indicates if there is a raised platform to board a train  # noqa: E501

        :return: The raised_platform of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._raised_platform

    @raised_platform.setter
    def raised_platform(self, raised_platform: bool):
        """Sets the raised_platform of this V3StopAccessibilityWheelchair.

        Indicates if there is a raised platform to board a train  # noqa: E501

        :param raised_platform: The raised_platform of this V3StopAccessibilityWheelchair.
        :type raised_platform: bool
        """

        self._raised_platform = raised_platform

    @property
    def ramp(self) -> bool:
        """Gets the ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&lt;1:14) at the stop/platform  # noqa: E501

        :return: The ramp of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._ramp

    @ramp.setter
    def ramp(self, ramp: bool):
        """Sets the ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&lt;1:14) at the stop/platform  # noqa: E501

        :param ramp: The ramp of this V3StopAccessibilityWheelchair.
        :type ramp: bool
        """

        self._ramp = ramp

    @property
    def secondary_path(self) -> bool:
        """Gets the secondary_path of this V3StopAccessibilityWheelchair.

        Indicates if there is a path beyond the stop which is accessible  # noqa: E501

        :return: The secondary_path of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._secondary_path

    @secondary_path.setter
    def secondary_path(self, secondary_path: bool):
        """Sets the secondary_path of this V3StopAccessibilityWheelchair.

        Indicates if there is a path beyond the stop which is accessible  # noqa: E501

        :param secondary_path: The secondary_path of this V3StopAccessibilityWheelchair.
        :type secondary_path: bool
        """

        self._secondary_path = secondary_path

    @property
    def raised_platform_shelther(self) -> bool:
        """Gets the raised_platform_shelther of this V3StopAccessibilityWheelchair.

        Indicates if there is shelter near the raised platform  # noqa: E501

        :return: The raised_platform_shelther of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._raised_platform_shelther

    @raised_platform_shelther.setter
    def raised_platform_shelther(self, raised_platform_shelther: bool):
        """Sets the raised_platform_shelther of this V3StopAccessibilityWheelchair.

        Indicates if there is shelter near the raised platform  # noqa: E501

        :param raised_platform_shelther: The raised_platform_shelther of this V3StopAccessibilityWheelchair.
        :type raised_platform_shelther: bool
        """

        self._raised_platform_shelther = raised_platform_shelther

    @property
    def steep_ramp(self) -> bool:
        """Gets the steep_ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&gt;1:14) at the stop/platform  # noqa: E501

        :return: The steep_ramp of this V3StopAccessibilityWheelchair.
        :rtype: bool
        """
        return self._steep_ramp

    @steep_ramp.setter
    def steep_ramp(self, steep_ramp: bool):
        """Sets the steep_ramp of this V3StopAccessibilityWheelchair.

        Indicates if there are ramps (&gt;1:14) at the stop/platform  # noqa: E501

        :param steep_ramp: The steep_ramp of this V3StopAccessibilityWheelchair.
        :type steep_ramp: bool
        """

        self._steep_ramp = steep_ramp
