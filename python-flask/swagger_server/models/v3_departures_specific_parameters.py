# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3DeparturesSpecificParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, direction_id: int=None, gtfs: bool=None, date_utc: datetime=None, max_results: int=None, include_cancelled: bool=None, look_backwards: bool=None, expand: List[str]=None, include_geopath: bool=None):  # noqa: E501
        """V3DeparturesSpecificParameters - a model defined in Swagger

        :param direction_id: The direction_id of this V3DeparturesSpecificParameters.  # noqa: E501
        :type direction_id: int
        :param gtfs: The gtfs of this V3DeparturesSpecificParameters.  # noqa: E501
        :type gtfs: bool
        :param date_utc: The date_utc of this V3DeparturesSpecificParameters.  # noqa: E501
        :type date_utc: datetime
        :param max_results: The max_results of this V3DeparturesSpecificParameters.  # noqa: E501
        :type max_results: int
        :param include_cancelled: The include_cancelled of this V3DeparturesSpecificParameters.  # noqa: E501
        :type include_cancelled: bool
        :param look_backwards: The look_backwards of this V3DeparturesSpecificParameters.  # noqa: E501
        :type look_backwards: bool
        :param expand: The expand of this V3DeparturesSpecificParameters.  # noqa: E501
        :type expand: List[str]
        :param include_geopath: The include_geopath of this V3DeparturesSpecificParameters.  # noqa: E501
        :type include_geopath: bool
        """
        self.swagger_types = {
            'direction_id': int,
            'gtfs': bool,
            'date_utc': datetime,
            'max_results': int,
            'include_cancelled': bool,
            'look_backwards': bool,
            'expand': List[str],
            'include_geopath': bool
        }

        self.attribute_map = {
            'direction_id': 'direction_id',
            'gtfs': 'gtfs',
            'date_utc': 'date_utc',
            'max_results': 'max_results',
            'include_cancelled': 'include_cancelled',
            'look_backwards': 'look_backwards',
            'expand': 'expand',
            'include_geopath': 'include_geopath'
        }
        self._direction_id = direction_id
        self._gtfs = gtfs
        self._date_utc = date_utc
        self._max_results = max_results
        self._include_cancelled = include_cancelled
        self._look_backwards = look_backwards
        self._expand = expand
        self._include_geopath = include_geopath

    @classmethod
    def from_dict(cls, dikt) -> 'V3DeparturesSpecificParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.DeparturesSpecificParameters of this V3DeparturesSpecificParameters.  # noqa: E501
        :rtype: V3DeparturesSpecificParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction_id(self) -> int:
        """Gets the direction_id of this V3DeparturesSpecificParameters.

        Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}  # noqa: E501

        :return: The direction_id of this V3DeparturesSpecificParameters.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id: int):
        """Sets the direction_id of this V3DeparturesSpecificParameters.

        Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}  # noqa: E501

        :param direction_id: The direction_id of this V3DeparturesSpecificParameters.
        :type direction_id: int
        """

        self._direction_id = direction_id

    @property
    def gtfs(self) -> bool:
        """Gets the gtfs of this V3DeparturesSpecificParameters.

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data  # noqa: E501

        :return: The gtfs of this V3DeparturesSpecificParameters.
        :rtype: bool
        """
        return self._gtfs

    @gtfs.setter
    def gtfs(self, gtfs: bool):
        """Sets the gtfs of this V3DeparturesSpecificParameters.

        Indicates that stop_id parameter will accept \"GTFS stop_id\" data  # noqa: E501

        :param gtfs: The gtfs of this V3DeparturesSpecificParameters.
        :type gtfs: bool
        """

        self._gtfs = gtfs

    @property
    def date_utc(self) -> datetime:
        """Gets the date_utc of this V3DeparturesSpecificParameters.

        Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)  # noqa: E501

        :return: The date_utc of this V3DeparturesSpecificParameters.
        :rtype: datetime
        """
        return self._date_utc

    @date_utc.setter
    def date_utc(self, date_utc: datetime):
        """Sets the date_utc of this V3DeparturesSpecificParameters.

        Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)  # noqa: E501

        :param date_utc: The date_utc of this V3DeparturesSpecificParameters.
        :type date_utc: datetime
        """

        self._date_utc = date_utc

    @property
    def max_results(self) -> int:
        """Gets the max_results of this V3DeparturesSpecificParameters.

        Maximum number of results returned  # noqa: E501

        :return: The max_results of this V3DeparturesSpecificParameters.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this V3DeparturesSpecificParameters.

        Maximum number of results returned  # noqa: E501

        :param max_results: The max_results of this V3DeparturesSpecificParameters.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def include_cancelled(self) -> bool:
        """Gets the include_cancelled of this V3DeparturesSpecificParameters.

        Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only  # noqa: E501

        :return: The include_cancelled of this V3DeparturesSpecificParameters.
        :rtype: bool
        """
        return self._include_cancelled

    @include_cancelled.setter
    def include_cancelled(self, include_cancelled: bool):
        """Sets the include_cancelled of this V3DeparturesSpecificParameters.

        Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only  # noqa: E501

        :param include_cancelled: The include_cancelled of this V3DeparturesSpecificParameters.
        :type include_cancelled: bool
        """

        self._include_cancelled = include_cancelled

    @property
    def look_backwards(self) -> bool:
        """Gets the look_backwards of this V3DeparturesSpecificParameters.

        Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.  # noqa: E501

        :return: The look_backwards of this V3DeparturesSpecificParameters.
        :rtype: bool
        """
        return self._look_backwards

    @look_backwards.setter
    def look_backwards(self, look_backwards: bool):
        """Sets the look_backwards of this V3DeparturesSpecificParameters.

        Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.  # noqa: E501

        :param look_backwards: The look_backwards of this V3DeparturesSpecificParameters.
        :type look_backwards: bool
        """

        self._look_backwards = look_backwards

    @property
    def expand(self) -> List[str]:
        """Gets the expand of this V3DeparturesSpecificParameters.

        List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.  # noqa: E501

        :return: The expand of this V3DeparturesSpecificParameters.
        :rtype: List[str]
        """
        return self._expand

    @expand.setter
    def expand(self, expand: List[str]):
        """Sets the expand of this V3DeparturesSpecificParameters.

        List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.  # noqa: E501

        :param expand: The expand of this V3DeparturesSpecificParameters.
        :type expand: List[str]
        """
        allowed_values = ["All", "Stop", "Route", "Run", "Direction", "Disruption", "VehicleDescriptor", "VehiclePosition", "None"]  # noqa: E501
        if not set(expand).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `expand` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(expand) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._expand = expand

    @property
    def include_geopath(self) -> bool:
        """Gets the include_geopath of this V3DeparturesSpecificParameters.

        Indicates if the route geopath should be returned  # noqa: E501

        :return: The include_geopath of this V3DeparturesSpecificParameters.
        :rtype: bool
        """
        return self._include_geopath

    @include_geopath.setter
    def include_geopath(self, include_geopath: bool):
        """Sets the include_geopath of this V3DeparturesSpecificParameters.

        Indicates if the route geopath should be returned  # noqa: E501

        :param include_geopath: The include_geopath of this V3DeparturesSpecificParameters.
        :type include_geopath: bool
        """

        self._include_geopath = include_geopath
