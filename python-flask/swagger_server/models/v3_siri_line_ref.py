# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3SiriLineRef(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, line_ref: str=None, direction_ref: int=None):  # noqa: E501
        """V3SiriLineRef - a model defined in Swagger

        :param line_ref: The line_ref of this V3SiriLineRef.  # noqa: E501
        :type line_ref: str
        :param direction_ref: The direction_ref of this V3SiriLineRef.  # noqa: E501
        :type direction_ref: int
        """
        self.swagger_types = {
            'line_ref': str,
            'direction_ref': int
        }

        self.attribute_map = {
            'line_ref': 'line_ref',
            'direction_ref': 'direction_ref'
        }
        self._line_ref = line_ref
        self._direction_ref = direction_ref

    @classmethod
    def from_dict(cls, dikt) -> 'V3SiriLineRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.SiriLineRef of this V3SiriLineRef.  # noqa: E501
        :rtype: V3SiriLineRef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_ref(self) -> str:
        """Gets the line_ref of this V3SiriLineRef.

        Siri LineRef  # noqa: E501

        :return: The line_ref of this V3SiriLineRef.
        :rtype: str
        """
        return self._line_ref

    @line_ref.setter
    def line_ref(self, line_ref: str):
        """Sets the line_ref of this V3SiriLineRef.

        Siri LineRef  # noqa: E501

        :param line_ref: The line_ref of this V3SiriLineRef.
        :type line_ref: str
        """
        if line_ref is None:
            raise ValueError("Invalid value for `line_ref`, must not be `None`")  # noqa: E501

        self._line_ref = line_ref

    @property
    def direction_ref(self) -> int:
        """Gets the direction_ref of this V3SiriLineRef.

        Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)  # noqa: E501

        :return: The direction_ref of this V3SiriLineRef.
        :rtype: int
        """
        return self._direction_ref

    @direction_ref.setter
    def direction_ref(self, direction_ref: int):
        """Sets the direction_ref of this V3SiriLineRef.

        Siri DirectionRef  (in, out, up, down, clockwise, counterclockwise, Inbound, Outbound)  # noqa: E501

        :param direction_ref: The direction_ref of this V3SiriLineRef.
        :type direction_ref: int
        """
        allowed_values = ["1", "2", "5", "10", "16", "32", "65", "130"]  # noqa: E501
        if direction_ref not in allowed_values:
            raise ValueError(
                "Invalid value for `direction_ref` ({0}), must be one of {1}"
                .format(direction_ref, allowed_values)
            )

        self._direction_ref = direction_ref
