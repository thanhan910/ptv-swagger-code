# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v3_siri_subscription_topic import V3SiriSubscriptionTopic  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class V3SiriEstimatedTimetableSubscriptionRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, preview_interval: str=None, subscriber_ref: str=None, subscription_ref: str=None, siri_format: int=None, siri_version: str=None, consumer_address: str=None, initial_termination_time: datetime=None, topics: List[V3SiriSubscriptionTopic]=None):  # noqa: E501
        """V3SiriEstimatedTimetableSubscriptionRequest - a model defined in Swagger

        :param preview_interval: The preview_interval of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type preview_interval: str
        :param subscriber_ref: The subscriber_ref of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type subscriber_ref: str
        :param subscription_ref: The subscription_ref of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type subscription_ref: str
        :param siri_format: The siri_format of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type siri_format: int
        :param siri_version: The siri_version of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type siri_version: str
        :param consumer_address: The consumer_address of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type consumer_address: str
        :param initial_termination_time: The initial_termination_time of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type initial_termination_time: datetime
        :param topics: The topics of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :type topics: List[V3SiriSubscriptionTopic]
        """
        self.swagger_types = {
            'preview_interval': str,
            'subscriber_ref': str,
            'subscription_ref': str,
            'siri_format': int,
            'siri_version': str,
            'consumer_address': str,
            'initial_termination_time': datetime,
            'topics': List[V3SiriSubscriptionTopic]
        }

        self.attribute_map = {
            'preview_interval': 'preview_interval',
            'subscriber_ref': 'subscriber_ref',
            'subscription_ref': 'subscription_ref',
            'siri_format': 'siri_format',
            'siri_version': 'siri_version',
            'consumer_address': 'consumer_address',
            'initial_termination_time': 'initial_termination_time',
            'topics': 'topics'
        }
        self._preview_interval = preview_interval
        self._subscriber_ref = subscriber_ref
        self._subscription_ref = subscription_ref
        self._siri_format = siri_format
        self._siri_version = siri_version
        self._consumer_address = consumer_address
        self._initial_termination_time = initial_termination_time
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt) -> 'V3SiriEstimatedTimetableSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.SiriEstimatedTimetableSubscriptionRequest of this V3SiriEstimatedTimetableSubscriptionRequest.  # noqa: E501
        :rtype: V3SiriEstimatedTimetableSubscriptionRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preview_interval(self) -> str:
        """Gets the preview_interval of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Preview Interval  # noqa: E501

        :return: The preview_interval of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._preview_interval

    @preview_interval.setter
    def preview_interval(self, preview_interval: str):
        """Sets the preview_interval of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Preview Interval  # noqa: E501

        :param preview_interval: The preview_interval of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type preview_interval: str
        """
        if preview_interval is None:
            raise ValueError("Invalid value for `preview_interval`, must not be `None`")  # noqa: E501

        self._preview_interval = preview_interval

    @property
    def subscriber_ref(self) -> str:
        """Gets the subscriber_ref of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Subscriber Ref  # noqa: E501

        :return: The subscriber_ref of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._subscriber_ref

    @subscriber_ref.setter
    def subscriber_ref(self, subscriber_ref: str):
        """Sets the subscriber_ref of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Subscriber Ref  # noqa: E501

        :param subscriber_ref: The subscriber_ref of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type subscriber_ref: str
        """
        if subscriber_ref is None:
            raise ValueError("Invalid value for `subscriber_ref`, must not be `None`")  # noqa: E501

        self._subscriber_ref = subscriber_ref

    @property
    def subscription_ref(self) -> str:
        """Gets the subscription_ref of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Subscription Ref - Unique to a Subscriber Ref  # noqa: E501

        :return: The subscription_ref of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._subscription_ref

    @subscription_ref.setter
    def subscription_ref(self, subscription_ref: str):
        """Sets the subscription_ref of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Subscription Ref - Unique to a Subscriber Ref  # noqa: E501

        :param subscription_ref: The subscription_ref of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type subscription_ref: str
        """
        if subscription_ref is None:
            raise ValueError("Invalid value for `subscription_ref`, must not be `None`")  # noqa: E501

        self._subscription_ref = subscription_ref

    @property
    def siri_format(self) -> int:
        """Gets the siri_format of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Message Format 'xml' or 'json'  # noqa: E501

        :return: The siri_format of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: int
        """
        return self._siri_format

    @siri_format.setter
    def siri_format(self, siri_format: int):
        """Sets the siri_format of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Message Format 'xml' or 'json'  # noqa: E501

        :param siri_format: The siri_format of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type siri_format: int
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if siri_format not in allowed_values:
            raise ValueError(
                "Invalid value for `siri_format` ({0}), must be one of {1}"
                .format(siri_format, allowed_values)
            )

        self._siri_format = siri_format

    @property
    def siri_version(self) -> str:
        """Gets the siri_version of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Message Version '1.3' or '2.0'  # noqa: E501

        :return: The siri_version of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._siri_version

    @siri_version.setter
    def siri_version(self, siri_version: str):
        """Sets the siri_version of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Message Version '1.3' or '2.0'  # noqa: E501

        :param siri_version: The siri_version of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type siri_version: str
        """
        if siri_version is None:
            raise ValueError("Invalid value for `siri_version`, must not be `None`")  # noqa: E501

        self._siri_version = siri_version

    @property
    def consumer_address(self) -> str:
        """Gets the consumer_address of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Consumer Address - Baseline and Updates will be sent to this address  # noqa: E501

        :return: The consumer_address of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: str
        """
        return self._consumer_address

    @consumer_address.setter
    def consumer_address(self, consumer_address: str):
        """Sets the consumer_address of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Consumer Address - Baseline and Updates will be sent to this address  # noqa: E501

        :param consumer_address: The consumer_address of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type consumer_address: str
        """
        if consumer_address is None:
            raise ValueError("Invalid value for `consumer_address`, must not be `None`")  # noqa: E501

        self._consumer_address = consumer_address

    @property
    def initial_termination_time(self) -> datetime:
        """Gets the initial_termination_time of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Initial Termination Time - Expiry of the subscription  # noqa: E501

        :return: The initial_termination_time of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: datetime
        """
        return self._initial_termination_time

    @initial_termination_time.setter
    def initial_termination_time(self, initial_termination_time: datetime):
        """Sets the initial_termination_time of this V3SiriEstimatedTimetableSubscriptionRequest.

        Siri Initial Termination Time - Expiry of the subscription  # noqa: E501

        :param initial_termination_time: The initial_termination_time of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type initial_termination_time: datetime
        """
        if initial_termination_time is None:
            raise ValueError("Invalid value for `initial_termination_time`, must not be `None`")  # noqa: E501

        self._initial_termination_time = initial_termination_time

    @property
    def topics(self) -> List[V3SiriSubscriptionTopic]:
        """Gets the topics of this V3SiriEstimatedTimetableSubscriptionRequest.


        :return: The topics of this V3SiriEstimatedTimetableSubscriptionRequest.
        :rtype: List[V3SiriSubscriptionTopic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics: List[V3SiriSubscriptionTopic]):
        """Sets the topics of this V3SiriEstimatedTimetableSubscriptionRequest.


        :param topics: The topics of this V3SiriEstimatedTimetableSubscriptionRequest.
        :type topics: List[V3SiriSubscriptionTopic]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")  # noqa: E501

        self._topics = topics
