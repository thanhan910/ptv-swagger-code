# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V3StopAmenityDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, toilet: bool=None, taxi_rank: bool=None, car_parking: str=None, cctv: bool=None):  # noqa: E501
        """V3StopAmenityDetails - a model defined in Swagger

        :param toilet: The toilet of this V3StopAmenityDetails.  # noqa: E501
        :type toilet: bool
        :param taxi_rank: The taxi_rank of this V3StopAmenityDetails.  # noqa: E501
        :type taxi_rank: bool
        :param car_parking: The car_parking of this V3StopAmenityDetails.  # noqa: E501
        :type car_parking: str
        :param cctv: The cctv of this V3StopAmenityDetails.  # noqa: E501
        :type cctv: bool
        """
        self.swagger_types = {
            'toilet': bool,
            'taxi_rank': bool,
            'car_parking': str,
            'cctv': bool
        }

        self.attribute_map = {
            'toilet': 'toilet',
            'taxi_rank': 'taxi_rank',
            'car_parking': 'car_parking',
            'cctv': 'cctv'
        }
        self._toilet = toilet
        self._taxi_rank = taxi_rank
        self._car_parking = car_parking
        self._cctv = cctv

    @classmethod
    def from_dict(cls, dikt) -> 'V3StopAmenityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V3.StopAmenityDetails of this V3StopAmenityDetails.  # noqa: E501
        :rtype: V3StopAmenityDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def toilet(self) -> bool:
        """Gets the toilet of this V3StopAmenityDetails.

        Indicates if there is a public toilet at or near the stop  # noqa: E501

        :return: The toilet of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._toilet

    @toilet.setter
    def toilet(self, toilet: bool):
        """Sets the toilet of this V3StopAmenityDetails.

        Indicates if there is a public toilet at or near the stop  # noqa: E501

        :param toilet: The toilet of this V3StopAmenityDetails.
        :type toilet: bool
        """

        self._toilet = toilet

    @property
    def taxi_rank(self) -> bool:
        """Gets the taxi_rank of this V3StopAmenityDetails.

        Indicates if there is a taxi rank at or near the stop  # noqa: E501

        :return: The taxi_rank of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._taxi_rank

    @taxi_rank.setter
    def taxi_rank(self, taxi_rank: bool):
        """Sets the taxi_rank of this V3StopAmenityDetails.

        Indicates if there is a taxi rank at or near the stop  # noqa: E501

        :param taxi_rank: The taxi_rank of this V3StopAmenityDetails.
        :type taxi_rank: bool
        """

        self._taxi_rank = taxi_rank

    @property
    def car_parking(self) -> str:
        """Gets the car_parking of this V3StopAmenityDetails.

        The number of free car parking spots at the stop  # noqa: E501

        :return: The car_parking of this V3StopAmenityDetails.
        :rtype: str
        """
        return self._car_parking

    @car_parking.setter
    def car_parking(self, car_parking: str):
        """Sets the car_parking of this V3StopAmenityDetails.

        The number of free car parking spots at the stop  # noqa: E501

        :param car_parking: The car_parking of this V3StopAmenityDetails.
        :type car_parking: str
        """

        self._car_parking = car_parking

    @property
    def cctv(self) -> bool:
        """Gets the cctv of this V3StopAmenityDetails.

        Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop  # noqa: E501

        :return: The cctv of this V3StopAmenityDetails.
        :rtype: bool
        """
        return self._cctv

    @cctv.setter
    def cctv(self, cctv: bool):
        """Sets the cctv of this V3StopAmenityDetails.

        Indicates if there are CCTV (i.e. closed circuit television) cameras at the stop  # noqa: E501

        :param cctv: The cctv of this V3StopAmenityDetails.
        :type cctv: bool
        """

        self._cctv = cctv
