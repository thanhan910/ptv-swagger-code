
/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * API version: v3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type FareEstimateApiService service
/*
FareEstimateApiService Estimate a fare by zone
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param minZone Minimum Zone travelled through ie. 1
 * @param maxZone Maximum Zone travelled through id. 6
 * @param optional nil or *FareEstimateApiFareEstimateGetFareEstimateByZoneOpts - Optional Parameters:
     * @param "JourneyTouchOnUtc" (optional.Time) -  JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
     * @param "JourneyTouchOffUtc" (optional.Time) -  JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).
     * @param "IsJourneyInFreeTramZone" (optional.Bool) - 
     * @param "TravelledRouteTypes" (optional.Interface of []int32) - 
     * @param "Token" (optional.String) -  Please ignore
     * @param "Devid" (optional.String) -  Your developer id
     * @param "Signature" (optional.String) -  Authentication signature for request
@return V3FareEstimateResponse
*/

type FareEstimateApiFareEstimateGetFareEstimateByZoneOpts struct {
    JourneyTouchOnUtc optional.Time
    JourneyTouchOffUtc optional.Time
    IsJourneyInFreeTramZone optional.Bool
    TravelledRouteTypes optional.Interface
    Token optional.String
    Devid optional.String
    Signature optional.String
}

func (a *FareEstimateApiService) FareEstimateGetFareEstimateByZone(ctx context.Context, minZone int32, maxZone int32, localVarOptionals *FareEstimateApiFareEstimateGetFareEstimateByZoneOpts) (V3FareEstimateResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue V3FareEstimateResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}"
	localVarPath = strings.Replace(localVarPath, "{"+"minZone"+"}", fmt.Sprintf("%v", minZone), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"maxZone"+"}", fmt.Sprintf("%v", maxZone), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.JourneyTouchOnUtc.IsSet() {
		localVarQueryParams.Add("journey_touch_on_utc", parameterToString(localVarOptionals.JourneyTouchOnUtc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JourneyTouchOffUtc.IsSet() {
		localVarQueryParams.Add("journey_touch_off_utc", parameterToString(localVarOptionals.JourneyTouchOffUtc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsJourneyInFreeTramZone.IsSet() {
		localVarQueryParams.Add("is_journey_in_free_tram_zone", parameterToString(localVarOptionals.IsJourneyInFreeTramZone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TravelledRouteTypes.IsSet() {
		localVarQueryParams.Add("travelled_route_types", parameterToString(localVarOptionals.TravelledRouteTypes.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Token.IsSet() {
		localVarQueryParams.Add("token", parameterToString(localVarOptionals.Token.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Devid.IsSet() {
		localVarQueryParams.Add("devid", parameterToString(localVarOptionals.Devid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Signature.IsSet() {
		localVarQueryParams.Add("signature", parameterToString(localVarOptionals.Signature.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json", "text/html"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v V3FareEstimateResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v V3ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v V3ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
