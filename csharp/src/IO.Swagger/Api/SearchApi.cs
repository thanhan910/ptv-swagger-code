/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3SearchResult</returns>
        V3SearchResult SearchSearch (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3SearchResult</returns>
        ApiResponse<V3SearchResult> SearchSearchWithHttpInfo (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3SearchResult</returns>
        System.Threading.Tasks.Task<V3SearchResult> SearchSearchAsync (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3SearchResult>> SearchSearchAsyncWithHttpInfo (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SearchApi : ISearchApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// </summary>
        /// <returns></returns>
        public SearchApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3SearchResult</returns>
        public V3SearchResult SearchSearch (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3SearchResult> localVarResponse = SearchSearchWithHttpInfo(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3SearchResult</returns>
        public ApiResponse< V3SearchResult > SearchSearchWithHttpInfo (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling SearchApi->SearchSearch");

            var localVarPath = "/v3/search/{search_term}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("search_term", this.Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (routeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "route_types", routeTypes)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (maxDistance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_distance", maxDistance)); // query parameter
            if (includeAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_addresses", includeAddresses)); // query parameter
            if (includeOutlets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_outlets", includeOutlets)); // query parameter
            if (matchStopBySuburb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_stop_by_suburb", matchStopBySuburb)); // query parameter
            if (matchRouteBySuburb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_route_by_suburb", matchRouteBySuburb)); // query parameter
            if (matchStopByGtfsStopId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_stop_by_gtfs_stop_id", matchStopByGtfsStopId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3SearchResult)));
        }

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3SearchResult</returns>
        public async System.Threading.Tasks.Task<V3SearchResult> SearchSearchAsync (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3SearchResult> localVarResponse = await SearchSearchAsyncWithHttpInfo(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View stops, routes and myki ticket outlets that match the search term 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)</param>
        /// <param name="routeTypes">Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)</param>
        /// <param name="latitude">Filter by geographic coordinate of latitude (optional)</param>
        /// <param name="longitude">Filter by geographic coordinate of longitude (optional)</param>
        /// <param name="maxDistance">Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)</param>
        /// <param name="includeAddresses">Placeholder for future development; currently unavailable (optional)</param>
        /// <param name="includeOutlets">Indicates if outlets will be returned in response (default &#x3D; true) (optional)</param>
        /// <param name="matchStopBySuburb">Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchRouteBySuburb">Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)</param>
        /// <param name="matchStopByGtfsStopId">Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3SearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V3SearchResult>> SearchSearchAsyncWithHttpInfo (string searchTerm, List<int?> routeTypes = null, float? latitude = null, float? longitude = null, float? maxDistance = null, bool? includeAddresses = null, bool? includeOutlets = null, bool? matchStopBySuburb = null, bool? matchRouteBySuburb = null, bool? matchStopByGtfsStopId = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling SearchApi->SearchSearch");

            var localVarPath = "/v3/search/{search_term}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("search_term", this.Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter
            if (routeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "route_types", routeTypes)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (maxDistance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_distance", maxDistance)); // query parameter
            if (includeAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_addresses", includeAddresses)); // query parameter
            if (includeOutlets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_outlets", includeOutlets)); // query parameter
            if (matchStopBySuburb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_stop_by_suburb", matchStopBySuburb)); // query parameter
            if (matchRouteBySuburb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_route_by_suburb", matchRouteBySuburb)); // query parameter
            if (matchStopByGtfsStopId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_stop_by_gtfs_stop_id", matchStopByGtfsStopId)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3SearchResult)));
        }

    }
}
