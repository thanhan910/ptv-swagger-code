<?php
/**
 * DirectionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DirectionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation directionsForDirection
     *
     * View all routes for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3DirectionsResponse
     */
    public function directionsForDirection($direction_id, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->directionsForDirectionWithHttpInfo($direction_id, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation directionsForDirectionWithHttpInfo
     *
     * View all routes for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3DirectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directionsForDirectionWithHttpInfo($direction_id, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForDirectionRequest($direction_id, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3DirectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directionsForDirectionAsync
     *
     * View all routes for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForDirectionAsync($direction_id, $token = null, $devid = null, $signature = null)
    {
        return $this->directionsForDirectionAsyncWithHttpInfo($direction_id, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directionsForDirectionAsyncWithHttpInfo
     *
     * View all routes for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForDirectionAsyncWithHttpInfo($direction_id, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForDirectionRequest($direction_id, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directionsForDirection'
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directionsForDirectionRequest($direction_id, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'direction_id' is set
        if ($direction_id === null || (is_array($direction_id) && count($direction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction_id when calling directionsForDirection'
            );
        }

        $resourcePath = '/v3/directions/{direction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature);
        }

        // path params
        if ($direction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'direction_id' . '}',
                ObjectSerializer::toPathValue($direction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directionsForDirectionAndType
     *
     * View all routes of a particular type for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3DirectionsResponse
     */
    public function directionsForDirectionAndType($direction_id, $route_type, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->directionsForDirectionAndTypeWithHttpInfo($direction_id, $route_type, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation directionsForDirectionAndTypeWithHttpInfo
     *
     * View all routes of a particular type for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3DirectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directionsForDirectionAndTypeWithHttpInfo($direction_id, $route_type, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForDirectionAndTypeRequest($direction_id, $route_type, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3DirectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directionsForDirectionAndTypeAsync
     *
     * View all routes of a particular type for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForDirectionAndTypeAsync($direction_id, $route_type, $token = null, $devid = null, $signature = null)
    {
        return $this->directionsForDirectionAndTypeAsyncWithHttpInfo($direction_id, $route_type, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directionsForDirectionAndTypeAsyncWithHttpInfo
     *
     * View all routes of a particular type for a direction of travel
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForDirectionAndTypeAsyncWithHttpInfo($direction_id, $route_type, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForDirectionAndTypeRequest($direction_id, $route_type, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directionsForDirectionAndType'
     *
     * @param  int $direction_id Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directionsForDirectionAndTypeRequest($direction_id, $route_type, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'direction_id' is set
        if ($direction_id === null || (is_array($direction_id) && count($direction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction_id when calling directionsForDirectionAndType'
            );
        }
        // verify the required parameter 'route_type' is set
        if ($route_type === null || (is_array($route_type) && count($route_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_type when calling directionsForDirectionAndType'
            );
        }

        $resourcePath = '/v3/directions/{direction_id}/route_type/{route_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature);
        }

        // path params
        if ($direction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'direction_id' . '}',
                ObjectSerializer::toPathValue($direction_id),
                $resourcePath
            );
        }
        // path params
        if ($route_type !== null) {
            $resourcePath = str_replace(
                '{' . 'route_type' . '}',
                ObjectSerializer::toPathValue($route_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directionsForRoute
     *
     * View directions that a route travels in
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3DirectionsResponse
     */
    public function directionsForRoute($route_id, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->directionsForRouteWithHttpInfo($route_id, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation directionsForRouteWithHttpInfo
     *
     * View directions that a route travels in
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3DirectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directionsForRouteWithHttpInfo($route_id, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForRouteRequest($route_id, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3DirectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directionsForRouteAsync
     *
     * View directions that a route travels in
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForRouteAsync($route_id, $token = null, $devid = null, $signature = null)
    {
        return $this->directionsForRouteAsyncWithHttpInfo($route_id, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directionsForRouteAsyncWithHttpInfo
     *
     * View directions that a route travels in
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directionsForRouteAsyncWithHttpInfo($route_id, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3DirectionsResponse';
        $request = $this->directionsForRouteRequest($route_id, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directionsForRoute'
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directionsForRouteRequest($route_id, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'route_id' is set
        if ($route_id === null || (is_array($route_id) && count($route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_id when calling directionsForRoute'
            );
        }

        $resourcePath = '/v3/directions/route/{route_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature);
        }

        // path params
        if ($route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'route_id' . '}',
                ObjectSerializer::toPathValue($route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
