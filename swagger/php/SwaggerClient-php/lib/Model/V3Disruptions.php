<?php
/**
 * V3Disruptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V3Disruptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3Disruptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V3.Disruptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'general' => '\Swagger\Client\Model\V3Disruption[]',
        'metro_train' => '\Swagger\Client\Model\V3Disruption[]',
        'metro_tram' => '\Swagger\Client\Model\V3Disruption[]',
        'metro_bus' => '\Swagger\Client\Model\V3Disruption[]',
        'regional_train' => '\Swagger\Client\Model\V3Disruption[]',
        'regional_coach' => '\Swagger\Client\Model\V3Disruption[]',
        'regional_bus' => '\Swagger\Client\Model\V3Disruption[]',
        'school_bus' => '\Swagger\Client\Model\V3Disruption[]',
        'telebus' => '\Swagger\Client\Model\V3Disruption[]',
        'night_bus' => '\Swagger\Client\Model\V3Disruption[]',
        'ferry' => '\Swagger\Client\Model\V3Disruption[]',
        'interstate_train' => '\Swagger\Client\Model\V3Disruption[]',
        'skybus' => '\Swagger\Client\Model\V3Disruption[]',
        'taxi' => '\Swagger\Client\Model\V3Disruption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'general' => null,
        'metro_train' => null,
        'metro_tram' => null,
        'metro_bus' => null,
        'regional_train' => null,
        'regional_coach' => null,
        'regional_bus' => null,
        'school_bus' => null,
        'telebus' => null,
        'night_bus' => null,
        'ferry' => null,
        'interstate_train' => null,
        'skybus' => null,
        'taxi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'general' => 'general',
        'metro_train' => 'metro_train',
        'metro_tram' => 'metro_tram',
        'metro_bus' => 'metro_bus',
        'regional_train' => 'regional_train',
        'regional_coach' => 'regional_coach',
        'regional_bus' => 'regional_bus',
        'school_bus' => 'school_bus',
        'telebus' => 'telebus',
        'night_bus' => 'night_bus',
        'ferry' => 'ferry',
        'interstate_train' => 'interstate_train',
        'skybus' => 'skybus',
        'taxi' => 'taxi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'general' => 'setGeneral',
        'metro_train' => 'setMetroTrain',
        'metro_tram' => 'setMetroTram',
        'metro_bus' => 'setMetroBus',
        'regional_train' => 'setRegionalTrain',
        'regional_coach' => 'setRegionalCoach',
        'regional_bus' => 'setRegionalBus',
        'school_bus' => 'setSchoolBus',
        'telebus' => 'setTelebus',
        'night_bus' => 'setNightBus',
        'ferry' => 'setFerry',
        'interstate_train' => 'setInterstateTrain',
        'skybus' => 'setSkybus',
        'taxi' => 'setTaxi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'general' => 'getGeneral',
        'metro_train' => 'getMetroTrain',
        'metro_tram' => 'getMetroTram',
        'metro_bus' => 'getMetroBus',
        'regional_train' => 'getRegionalTrain',
        'regional_coach' => 'getRegionalCoach',
        'regional_bus' => 'getRegionalBus',
        'school_bus' => 'getSchoolBus',
        'telebus' => 'getTelebus',
        'night_bus' => 'getNightBus',
        'ferry' => 'getFerry',
        'interstate_train' => 'getInterstateTrain',
        'skybus' => 'getSkybus',
        'taxi' => 'getTaxi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['general'] = isset($data['general']) ? $data['general'] : null;
        $this->container['metro_train'] = isset($data['metro_train']) ? $data['metro_train'] : null;
        $this->container['metro_tram'] = isset($data['metro_tram']) ? $data['metro_tram'] : null;
        $this->container['metro_bus'] = isset($data['metro_bus']) ? $data['metro_bus'] : null;
        $this->container['regional_train'] = isset($data['regional_train']) ? $data['regional_train'] : null;
        $this->container['regional_coach'] = isset($data['regional_coach']) ? $data['regional_coach'] : null;
        $this->container['regional_bus'] = isset($data['regional_bus']) ? $data['regional_bus'] : null;
        $this->container['school_bus'] = isset($data['school_bus']) ? $data['school_bus'] : null;
        $this->container['telebus'] = isset($data['telebus']) ? $data['telebus'] : null;
        $this->container['night_bus'] = isset($data['night_bus']) ? $data['night_bus'] : null;
        $this->container['ferry'] = isset($data['ferry']) ? $data['ferry'] : null;
        $this->container['interstate_train'] = isset($data['interstate_train']) ? $data['interstate_train'] : null;
        $this->container['skybus'] = isset($data['skybus']) ? $data['skybus'] : null;
        $this->container['taxi'] = isset($data['taxi']) ? $data['taxi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets general
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param \Swagger\Client\Model\V3Disruption[] $general Subset of disruption information applicable to multiple route_types
     *
     * @return $this
     */
    public function setGeneral($general)
    {
        $this->container['general'] = $general;

        return $this;
    }

    /**
     * Gets metro_train
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getMetroTrain()
    {
        return $this->container['metro_train'];
    }

    /**
     * Sets metro_train
     *
     * @param \Swagger\Client\Model\V3Disruption[] $metro_train Subset of disruption information applicable to metropolitan train
     *
     * @return $this
     */
    public function setMetroTrain($metro_train)
    {
        $this->container['metro_train'] = $metro_train;

        return $this;
    }

    /**
     * Gets metro_tram
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getMetroTram()
    {
        return $this->container['metro_tram'];
    }

    /**
     * Sets metro_tram
     *
     * @param \Swagger\Client\Model\V3Disruption[] $metro_tram Subset of disruption information applicable to metropolitan tram
     *
     * @return $this
     */
    public function setMetroTram($metro_tram)
    {
        $this->container['metro_tram'] = $metro_tram;

        return $this;
    }

    /**
     * Gets metro_bus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getMetroBus()
    {
        return $this->container['metro_bus'];
    }

    /**
     * Sets metro_bus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $metro_bus Subset of disruption information applicable to metropolitan bus
     *
     * @return $this
     */
    public function setMetroBus($metro_bus)
    {
        $this->container['metro_bus'] = $metro_bus;

        return $this;
    }

    /**
     * Gets regional_train
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getRegionalTrain()
    {
        return $this->container['regional_train'];
    }

    /**
     * Sets regional_train
     *
     * @param \Swagger\Client\Model\V3Disruption[] $regional_train Subset of disruption information applicable to V/Line train
     *
     * @return $this
     */
    public function setRegionalTrain($regional_train)
    {
        $this->container['regional_train'] = $regional_train;

        return $this;
    }

    /**
     * Gets regional_coach
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getRegionalCoach()
    {
        return $this->container['regional_coach'];
    }

    /**
     * Sets regional_coach
     *
     * @param \Swagger\Client\Model\V3Disruption[] $regional_coach Subset of disruption information applicable to V/Line coach
     *
     * @return $this
     */
    public function setRegionalCoach($regional_coach)
    {
        $this->container['regional_coach'] = $regional_coach;

        return $this;
    }

    /**
     * Gets regional_bus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getRegionalBus()
    {
        return $this->container['regional_bus'];
    }

    /**
     * Sets regional_bus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $regional_bus Subset of disruption information applicable to regional bus
     *
     * @return $this
     */
    public function setRegionalBus($regional_bus)
    {
        $this->container['regional_bus'] = $regional_bus;

        return $this;
    }

    /**
     * Gets school_bus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getSchoolBus()
    {
        return $this->container['school_bus'];
    }

    /**
     * Sets school_bus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $school_bus Subset of disruption information applicable to school bus
     *
     * @return $this
     */
    public function setSchoolBus($school_bus)
    {
        $this->container['school_bus'] = $school_bus;

        return $this;
    }

    /**
     * Gets telebus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getTelebus()
    {
        return $this->container['telebus'];
    }

    /**
     * Sets telebus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $telebus Subset of disruption information applicable to telebus services
     *
     * @return $this
     */
    public function setTelebus($telebus)
    {
        $this->container['telebus'] = $telebus;

        return $this;
    }

    /**
     * Gets night_bus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getNightBus()
    {
        return $this->container['night_bus'];
    }

    /**
     * Sets night_bus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $night_bus Subset of disruption information applicable to night bus
     *
     * @return $this
     */
    public function setNightBus($night_bus)
    {
        $this->container['night_bus'] = $night_bus;

        return $this;
    }

    /**
     * Gets ferry
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getFerry()
    {
        return $this->container['ferry'];
    }

    /**
     * Sets ferry
     *
     * @param \Swagger\Client\Model\V3Disruption[] $ferry Subset of disruption information applicable to ferry
     *
     * @return $this
     */
    public function setFerry($ferry)
    {
        $this->container['ferry'] = $ferry;

        return $this;
    }

    /**
     * Gets interstate_train
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getInterstateTrain()
    {
        return $this->container['interstate_train'];
    }

    /**
     * Sets interstate_train
     *
     * @param \Swagger\Client\Model\V3Disruption[] $interstate_train Subset of disruption information applicable to interstate train
     *
     * @return $this
     */
    public function setInterstateTrain($interstate_train)
    {
        $this->container['interstate_train'] = $interstate_train;

        return $this;
    }

    /**
     * Gets skybus
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getSkybus()
    {
        return $this->container['skybus'];
    }

    /**
     * Sets skybus
     *
     * @param \Swagger\Client\Model\V3Disruption[] $skybus Subset of disruption information applicable to skybus
     *
     * @return $this
     */
    public function setSkybus($skybus)
    {
        $this->container['skybus'] = $skybus;

        return $this;
    }

    /**
     * Gets taxi
     *
     * @return \Swagger\Client\Model\V3Disruption[]
     */
    public function getTaxi()
    {
        return $this->container['taxi'];
    }

    /**
     * Sets taxi
     *
     * @param \Swagger\Client\Model\V3Disruption[] $taxi Subset of disruption information applicable to taxi
     *
     * @return $this
     */
    public function setTaxi($taxi)
    {
        $this->container['taxi'] = $taxi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
