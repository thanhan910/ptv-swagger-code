/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DeparturesApi", () => {
  let instance: api.DeparturesApi
  beforeEach(function() {
    instance = new api.DeparturesApi(config)
  });

  test("departuresGetForStop", () => {
    const routeType: number = 56
    const stopId: number = 56
    const platformNumbers: Array<number> = undefined
    const directionId: number = 56
    const gtfs: boolean = true
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const maxResults: number = 56
    const includeCancelled: boolean = true
    const lookBackwards: boolean = true
    const expand: Array<string> = undefined
    const includeGeopath: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.departuresGetForStop(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, {})).resolves.toBe(null)
  })
  test("departuresGetForStopAndRoute", () => {
    const routeType: number = 56
    const stopId: number = 56
    const routeId: string = "routeId_example"
    const directionId: number = 56
    const gtfs: boolean = true
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const maxResults: number = 56
    const includeCancelled: boolean = true
    const lookBackwards: boolean = true
    const expand: Array<string> = undefined
    const includeGeopath: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.departuresGetForStopAndRoute(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("DirectionsApi", () => {
  let instance: api.DirectionsApi
  beforeEach(function() {
    instance = new api.DirectionsApi(config)
  });

  test("directionsForDirection", () => {
    const directionId: number = 56
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.directionsForDirection(directionId, token, devid, signature, {})).resolves.toBe(null)
  })
  test("directionsForDirectionAndType", () => {
    const directionId: number = 56
    const routeType: number = 56
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.directionsForDirectionAndType(directionId, routeType, token, devid, signature, {})).resolves.toBe(null)
  })
  test("directionsForRoute", () => {
    const routeId: number = 56
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.directionsForRoute(routeId, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("DisruptionsApi", () => {
  let instance: api.DisruptionsApi
  beforeEach(function() {
    instance = new api.DisruptionsApi(config)
  });

  test("disruptionsGetAllDisruptions", () => {
    const routeTypes: Array<number> = undefined
    const disruptionModes: Array<number> = undefined
    const disruptionStatus: string = "disruptionStatus_example"
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetAllDisruptions(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, {})).resolves.toBe(null)
  })
  test("disruptionsGetDisruptionById", () => {
    const disruptionId: number = 789
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetDisruptionById(disruptionId, token, devid, signature, {})).resolves.toBe(null)
  })
  test("disruptionsGetDisruptionModes", () => {
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetDisruptionModes(token, devid, signature, {})).resolves.toBe(null)
  })
  test("disruptionsGetDisruptionsByRoute", () => {
    const routeId: number = 56
    const disruptionStatus: string = "disruptionStatus_example"
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetDisruptionsByRoute(routeId, disruptionStatus, token, devid, signature, {})).resolves.toBe(null)
  })
  test("disruptionsGetDisruptionsByRouteAndStop", () => {
    const routeId: number = 56
    const stopId: number = 56
    const disruptionStatus: string = "disruptionStatus_example"
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetDisruptionsByRouteAndStop(routeId, stopId, disruptionStatus, token, devid, signature, {})).resolves.toBe(null)
  })
  test("disruptionsGetDisruptionsByStop", () => {
    const stopId: number = 56
    const disruptionStatus: string = "disruptionStatus_example"
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.disruptionsGetDisruptionsByStop(stopId, disruptionStatus, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("FareEstimateApi", () => {
  let instance: api.FareEstimateApi
  beforeEach(function() {
    instance = new api.FareEstimateApi(config)
  });

  test("fareEstimateGetFareEstimateByZone", () => {
    const minZone: number = 56
    const maxZone: number = 56
    const journeyTouchOnUtc: Date = 2013-10-20T19:20:30+01:00
    const journeyTouchOffUtc: Date = 2013-10-20T19:20:30+01:00
    const isJourneyInFreeTramZone: boolean = true
    const travelledRouteTypes: Array<number> = undefined
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.fareEstimateGetFareEstimateByZone(minZone, maxZone, journeyTouchOnUtc, journeyTouchOffUtc, isJourneyInFreeTramZone, travelledRouteTypes, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("OutletsApi", () => {
  let instance: api.OutletsApi
  beforeEach(function() {
    instance = new api.OutletsApi(config)
  });

  test("outletsGetAllOutlets", () => {
    const maxResults: number = 56
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.outletsGetAllOutlets(maxResults, token, devid, signature, {})).resolves.toBe(null)
  })
  test("outletsGetOutletsByGeolocation", () => {
    const latitude: number = 3.4
    const longitude: number = 3.4
    const maxDistance: number = 1.2
    const maxResults: number = 56
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.outletsGetOutletsByGeolocation(latitude, longitude, maxDistance, maxResults, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("PatternsApi", () => {
  let instance: api.PatternsApi
  beforeEach(function() {
    instance = new api.PatternsApi(config)
  });

  test("patternsGetPatternByRun", () => {
    const runRef: string = "runRef_example"
    const routeType: number = 56
    const expand: Array<string> = undefined
    const stopId: number = 56
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const includeSkippedStops: boolean = true
    const includeGeopath: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.patternsGetPatternByRun(runRef, routeType, expand, stopId, dateUtc, includeSkippedStops, includeGeopath, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("RouteTypesApi", () => {
  let instance: api.RouteTypesApi
  beforeEach(function() {
    instance = new api.RouteTypesApi(config)
  });

  test("routeTypesGetRouteTypes", () => {
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.routeTypesGetRouteTypes(token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("RoutesApi", () => {
  let instance: api.RoutesApi
  beforeEach(function() {
    instance = new api.RoutesApi(config)
  });

  test("routesOneOrMoreRoutes", () => {
    const routeTypes: Array<number> = undefined
    const routeName: string = "routeName_example"
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.routesOneOrMoreRoutes(routeTypes, routeName, token, devid, signature, {})).resolves.toBe(null)
  })
  test("routesRouteFromId", () => {
    const routeId: number = 56
    const includeGeopath: boolean = true
    const geopathUtc: Date = 2013-10-20T19:20:30+01:00
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.routesRouteFromId(routeId, includeGeopath, geopathUtc, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("RunsApi", () => {
  let instance: api.RunsApi
  beforeEach(function() {
    instance = new api.RunsApi(config)
  });

  test("runsForRoute", () => {
    const routeId: number = 56
    const expand: Array<string> = undefined
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.runsForRoute(routeId, expand, dateUtc, token, devid, signature, {})).resolves.toBe(null)
  })
  test("runsForRouteAndRouteType", () => {
    const routeId: number = 56
    const routeType: number = 56
    const expand: Array<string> = undefined
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.runsForRouteAndRouteType(routeId, routeType, expand, dateUtc, token, devid, signature, {})).resolves.toBe(null)
  })
  test("runsForRun", () => {
    const runRef: string = "runRef_example"
    const expand: Array<string> = undefined
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const includeGeopath: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.runsForRun(runRef, expand, dateUtc, includeGeopath, token, devid, signature, {})).resolves.toBe(null)
  })
  test("runsForRunAndRouteType", () => {
    const runRef: string = "runRef_example"
    const routeType: number = 56
    const expand: Array<string> = undefined
    const dateUtc: Date = 2013-10-20T19:20:30+01:00
    const includeGeopath: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.runsForRunAndRouteType(runRef, routeType, expand, dateUtc, includeGeopath, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("searchSearch", () => {
    const searchTerm: string = "searchTerm_example"
    const routeTypes: Array<number> = undefined
    const latitude: number = 3.4
    const longitude: number = 3.4
    const maxDistance: number = 3.4
    const includeAddresses: boolean = true
    const includeOutlets: boolean = true
    const matchStopBySuburb: boolean = true
    const matchRouteBySuburb: boolean = true
    const matchStopByGtfsStopId: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.searchSearch(searchTerm, routeTypes, latitude, longitude, maxDistance, includeAddresses, includeOutlets, matchStopBySuburb, matchRouteBySuburb, matchStopByGtfsStopId, token, devid, signature, {})).resolves.toBe(null)
  })
})

describe("StopsApi", () => {
  let instance: api.StopsApi
  beforeEach(function() {
    instance = new api.StopsApi(config)
  });

  test("stopsStopDetails", () => {
    const stopId: number = 56
    const routeType: number = 56
    const stopLocation: boolean = true
    const stopAmenities: boolean = true
    const stopAccessibility: boolean = true
    const stopContact: boolean = true
    const stopTicket: boolean = true
    const gtfs: boolean = true
    const stopStaffing: boolean = true
    const stopDisruptions: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.stopsStopDetails(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature, {})).resolves.toBe(null)
  })
  test("stopsStopsByGeolocation", () => {
    const latitude: number = 3.4
    const longitude: number = 3.4
    const routeTypes: Array<number> = undefined
    const maxResults: number = 56
    const maxDistance: number = 1.2
    const stopDisruptions: boolean = true
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.stopsStopsByGeolocation(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature, {})).resolves.toBe(null)
  })
  test("stopsStopsForRoute", () => {
    const routeId: number = 56
    const routeType: number = 56
    const directionId: number = 56
    const stopDisruptions: boolean = true
    const includeGeopath: boolean = true
    const geopathUtc: Date = 2013-10-20T19:20:30+01:00
    const token: string = "token_example"
    const devid: string = "devid_example"
    const signature: string = "signature_example"
    return expect(instance.stopsStopsForRoute(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature, {})).resolves.toBe(null)
  })
})

