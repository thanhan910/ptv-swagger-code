/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDeparturesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3DeparturesResponse</returns>
        V3DeparturesResponse DeparturesGetForStop (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        ApiResponse<V3DeparturesResponse> DeparturesGetForStopWithHttpInfo (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);
        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3DeparturesResponse</returns>
        V3DeparturesResponse DeparturesGetForStopAndRoute (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        ApiResponse<V3DeparturesResponse> DeparturesGetForStopAndRouteWithHttpInfo (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAsync (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View departures for all routes from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAsyncWithHttpInfo (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);
        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAndRouteAsync (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View departures for a specific route from a stop
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAndRouteAsyncWithHttpInfo (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DeparturesApi : IDeparturesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeparturesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DeparturesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeparturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeparturesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3DeparturesResponse</returns>
        public V3DeparturesResponse DeparturesGetForStop (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3DeparturesResponse> localVarResponse = DeparturesGetForStopWithHttpInfo(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        public ApiResponse< V3DeparturesResponse > DeparturesGetForStopWithHttpInfo (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'routeType' is set
            if (routeType == null)
                throw new ApiException(400, "Missing required parameter 'routeType' when calling DeparturesApi->DeparturesGetForStop");
            // verify the required parameter 'stopId' is set
            if (stopId == null)
                throw new ApiException(400, "Missing required parameter 'stopId' when calling DeparturesApi->DeparturesGetForStop");

            var localVarPath = "/v3/departures/route_type/{route_type}/stop/{stop_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeType != null) localVarPathParams.Add("route_type", this.Configuration.ApiClient.ParameterToString(routeType)); // path parameter
            if (stopId != null) localVarPathParams.Add("stop_id", this.Configuration.ApiClient.ParameterToString(stopId)); // path parameter
            if (platformNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "platform_numbers", platformNumbers)); // query parameter
            if (directionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction_id", directionId)); // query parameter
            if (gtfs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtfs", gtfs)); // query parameter
            if (dateUtc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_utc", dateUtc)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_results", maxResults)); // query parameter
            if (includeCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_cancelled", includeCancelled)); // query parameter
            if (lookBackwards != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "look_backwards", lookBackwards)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (includeGeopath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geopath", includeGeopath)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeparturesGetForStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3DeparturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3DeparturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3DeparturesResponse)));
        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        public async System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAsync (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3DeparturesResponse> localVarResponse = await DeparturesGetForStopAsyncWithHttpInfo(routeType, stopId, platformNumbers, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View departures for all routes from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="platformNumbers">Filter by platform number at stop (optional)</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAsyncWithHttpInfo (int? routeType, int? stopId, List<int?> platformNumbers = null, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'routeType' is set
            if (routeType == null)
                throw new ApiException(400, "Missing required parameter 'routeType' when calling DeparturesApi->DeparturesGetForStop");
            // verify the required parameter 'stopId' is set
            if (stopId == null)
                throw new ApiException(400, "Missing required parameter 'stopId' when calling DeparturesApi->DeparturesGetForStop");

            var localVarPath = "/v3/departures/route_type/{route_type}/stop/{stop_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeType != null) localVarPathParams.Add("route_type", this.Configuration.ApiClient.ParameterToString(routeType)); // path parameter
            if (stopId != null) localVarPathParams.Add("stop_id", this.Configuration.ApiClient.ParameterToString(stopId)); // path parameter
            if (platformNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "platform_numbers", platformNumbers)); // query parameter
            if (directionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction_id", directionId)); // query parameter
            if (gtfs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtfs", gtfs)); // query parameter
            if (dateUtc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_utc", dateUtc)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_results", maxResults)); // query parameter
            if (includeCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_cancelled", includeCancelled)); // query parameter
            if (lookBackwards != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "look_backwards", lookBackwards)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (includeGeopath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geopath", includeGeopath)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeparturesGetForStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3DeparturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3DeparturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3DeparturesResponse)));
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3DeparturesResponse</returns>
        public V3DeparturesResponse DeparturesGetForStopAndRoute (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3DeparturesResponse> localVarResponse = DeparturesGetForStopAndRouteWithHttpInfo(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3DeparturesResponse</returns>
        public ApiResponse< V3DeparturesResponse > DeparturesGetForStopAndRouteWithHttpInfo (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'routeType' is set
            if (routeType == null)
                throw new ApiException(400, "Missing required parameter 'routeType' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            // verify the required parameter 'stopId' is set
            if (stopId == null)
                throw new ApiException(400, "Missing required parameter 'stopId' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400, "Missing required parameter 'routeId' when calling DeparturesApi->DeparturesGetForStopAndRoute");

            var localVarPath = "/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeType != null) localVarPathParams.Add("route_type", this.Configuration.ApiClient.ParameterToString(routeType)); // path parameter
            if (stopId != null) localVarPathParams.Add("stop_id", this.Configuration.ApiClient.ParameterToString(stopId)); // path parameter
            if (routeId != null) localVarPathParams.Add("route_id", this.Configuration.ApiClient.ParameterToString(routeId)); // path parameter
            if (directionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction_id", directionId)); // query parameter
            if (gtfs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtfs", gtfs)); // query parameter
            if (dateUtc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_utc", dateUtc)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_results", maxResults)); // query parameter
            if (includeCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_cancelled", includeCancelled)); // query parameter
            if (lookBackwards != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "look_backwards", lookBackwards)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (includeGeopath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geopath", includeGeopath)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeparturesGetForStopAndRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3DeparturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3DeparturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3DeparturesResponse)));
        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3DeparturesResponse</returns>
        public async System.Threading.Tasks.Task<V3DeparturesResponse> DeparturesGetForStopAndRouteAsync (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3DeparturesResponse> localVarResponse = await DeparturesGetForStopAndRouteAsyncWithHttpInfo(routeType, stopId, routeId, directionId, gtfs, dateUtc, maxResults, includeCancelled, lookBackwards, expand, includeGeopath, token, devid, signature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View departures for a specific route from a stop 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeType">Number identifying transport mode; values returned via RouteTypes API</param>
        /// <param name="stopId">Identifier of stop; values returned by Stops API</param>
        /// <param name="routeId">Identifier of route; values returned by Routes API - v3/routes</param>
        /// <param name="directionId">Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id} (optional)</param>
        /// <param name="gtfs">Indicates that stop_id parameter will accept \&quot;GTFS stop_id\&quot; data (optional)</param>
        /// <param name="dateUtc">Filter by the date and time of the request (ISO 8601 UTC format) (default &#x3D; current date and time) (optional)</param>
        /// <param name="maxResults">Maximum number of results returned (optional)</param>
        /// <param name="includeCancelled">Indicates if cancelled services (if they exist) are returned (default &#x3D; false) - metropolitan train only (optional)</param>
        /// <param name="lookBackwards">Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default &#x3D; false). Requires max_results &amp;gt; 0. (optional)</param>
        /// <param name="expand">List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information. (optional)</param>
        /// <param name="includeGeopath">Indicates if the route geopath should be returned (optional)</param>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3DeparturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V3DeparturesResponse>> DeparturesGetForStopAndRouteAsyncWithHttpInfo (int? routeType, int? stopId, string routeId, int? directionId = null, bool? gtfs = null, DateTime? dateUtc = null, int? maxResults = null, bool? includeCancelled = null, bool? lookBackwards = null, List<string> expand = null, bool? includeGeopath = null, string token = null, string devid = null, string signature = null)
        {
            // verify the required parameter 'routeType' is set
            if (routeType == null)
                throw new ApiException(400, "Missing required parameter 'routeType' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            // verify the required parameter 'stopId' is set
            if (stopId == null)
                throw new ApiException(400, "Missing required parameter 'stopId' when calling DeparturesApi->DeparturesGetForStopAndRoute");
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400, "Missing required parameter 'routeId' when calling DeparturesApi->DeparturesGetForStopAndRoute");

            var localVarPath = "/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (routeType != null) localVarPathParams.Add("route_type", this.Configuration.ApiClient.ParameterToString(routeType)); // path parameter
            if (stopId != null) localVarPathParams.Add("stop_id", this.Configuration.ApiClient.ParameterToString(stopId)); // path parameter
            if (routeId != null) localVarPathParams.Add("route_id", this.Configuration.ApiClient.ParameterToString(routeId)); // path parameter
            if (directionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction_id", directionId)); // query parameter
            if (gtfs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gtfs", gtfs)); // query parameter
            if (dateUtc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_utc", dateUtc)); // query parameter
            if (maxResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_results", maxResults)); // query parameter
            if (includeCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_cancelled", includeCancelled)); // query parameter
            if (lookBackwards != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "look_backwards", lookBackwards)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "expand", expand)); // query parameter
            if (includeGeopath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geopath", includeGeopath)); // query parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (devid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "devid", devid)); // query parameter
            if (signature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signature", signature)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeparturesGetForStopAndRoute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3DeparturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (V3DeparturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3DeparturesResponse)));
        }

    }
}
