# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V3Run(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'int',
        'run_ref': 'str',
        'route_id': 'int',
        'route_type': 'int',
        'final_stop_id': 'int',
        'destination_name': 'str',
        'status': 'str',
        'direction_id': 'int',
        'run_sequence': 'int',
        'express_stop_count': 'int',
        'vehicle_position': 'V3VehiclePosition',
        'vehicle_descriptor': 'V3VehicleDescriptor',
        'geopath': 'list[object]'
    }

    attribute_map = {
        'run_id': 'run_id',
        'run_ref': 'run_ref',
        'route_id': 'route_id',
        'route_type': 'route_type',
        'final_stop_id': 'final_stop_id',
        'destination_name': 'destination_name',
        'status': 'status',
        'direction_id': 'direction_id',
        'run_sequence': 'run_sequence',
        'express_stop_count': 'express_stop_count',
        'vehicle_position': 'vehicle_position',
        'vehicle_descriptor': 'vehicle_descriptor',
        'geopath': 'geopath'
    }

    def __init__(self, run_id=None, run_ref=None, route_id=None, route_type=None, final_stop_id=None, destination_name=None, status=None, direction_id=None, run_sequence=None, express_stop_count=None, vehicle_position=None, vehicle_descriptor=None, geopath=None, _configuration=None):  # noqa: E501
        """V3Run - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._run_id = None
        self._run_ref = None
        self._route_id = None
        self._route_type = None
        self._final_stop_id = None
        self._destination_name = None
        self._status = None
        self._direction_id = None
        self._run_sequence = None
        self._express_stop_count = None
        self._vehicle_position = None
        self._vehicle_descriptor = None
        self._geopath = None
        self.discriminator = None

        if run_id is not None:
            self.run_id = run_id
        if run_ref is not None:
            self.run_ref = run_ref
        if route_id is not None:
            self.route_id = route_id
        if route_type is not None:
            self.route_type = route_type
        if final_stop_id is not None:
            self.final_stop_id = final_stop_id
        if destination_name is not None:
            self.destination_name = destination_name
        if status is not None:
            self.status = status
        if direction_id is not None:
            self.direction_id = direction_id
        if run_sequence is not None:
            self.run_sequence = run_sequence
        if express_stop_count is not None:
            self.express_stop_count = express_stop_count
        if vehicle_position is not None:
            self.vehicle_position = vehicle_position
        if vehicle_descriptor is not None:
            self.vehicle_descriptor = vehicle_descriptor
        if geopath is not None:
            self.geopath = geopath

    @property
    def run_id(self):
        """Gets the run_id of this V3Run.  # noqa: E501

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric  # noqa: E501

        :return: The run_id of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this V3Run.

        Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric  # noqa: E501

        :param run_id: The run_id of this V3Run.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def run_ref(self):
        """Gets the run_ref of this V3Run.  # noqa: E501

        Alphanumeric trip/service run identifier  # noqa: E501

        :return: The run_ref of this V3Run.  # noqa: E501
        :rtype: str
        """
        return self._run_ref

    @run_ref.setter
    def run_ref(self, run_ref):
        """Sets the run_ref of this V3Run.

        Alphanumeric trip/service run identifier  # noqa: E501

        :param run_ref: The run_ref of this V3Run.  # noqa: E501
        :type: str
        """

        self._run_ref = run_ref

    @property
    def route_id(self):
        """Gets the route_id of this V3Run.  # noqa: E501

        Route identifier  # noqa: E501

        :return: The route_id of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this V3Run.

        Route identifier  # noqa: E501

        :param route_id: The route_id of this V3Run.  # noqa: E501
        :type: int
        """

        self._route_id = route_id

    @property
    def route_type(self):
        """Gets the route_type of this V3Run.  # noqa: E501

        Transport mode identifier  # noqa: E501

        :return: The route_type of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this V3Run.

        Transport mode identifier  # noqa: E501

        :param route_type: The route_type of this V3Run.  # noqa: E501
        :type: int
        """

        self._route_type = route_type

    @property
    def final_stop_id(self):
        """Gets the final_stop_id of this V3Run.  # noqa: E501

        stop_id of final stop of run  # noqa: E501

        :return: The final_stop_id of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._final_stop_id

    @final_stop_id.setter
    def final_stop_id(self, final_stop_id):
        """Sets the final_stop_id of this V3Run.

        stop_id of final stop of run  # noqa: E501

        :param final_stop_id: The final_stop_id of this V3Run.  # noqa: E501
        :type: int
        """

        self._final_stop_id = final_stop_id

    @property
    def destination_name(self):
        """Gets the destination_name of this V3Run.  # noqa: E501

        Name of destination of run  # noqa: E501

        :return: The destination_name of this V3Run.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this V3Run.

        Name of destination of run  # noqa: E501

        :param destination_name: The destination_name of this V3Run.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def status(self):
        """Gets the status of this V3Run.  # noqa: E501

        Status of metropolitan train run; returns \"scheduled\" for other modes  # noqa: E501

        :return: The status of this V3Run.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V3Run.

        Status of metropolitan train run; returns \"scheduled\" for other modes  # noqa: E501

        :param status: The status of this V3Run.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def direction_id(self):
        """Gets the direction_id of this V3Run.  # noqa: E501

        Direction of travel identifier  # noqa: E501

        :return: The direction_id of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """Sets the direction_id of this V3Run.

        Direction of travel identifier  # noqa: E501

        :param direction_id: The direction_id of this V3Run.  # noqa: E501
        :type: int
        """

        self._direction_id = direction_id

    @property
    def run_sequence(self):
        """Gets the run_sequence of this V3Run.  # noqa: E501

        Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.  # noqa: E501

        :return: The run_sequence of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._run_sequence

    @run_sequence.setter
    def run_sequence(self, run_sequence):
        """Sets the run_sequence of this V3Run.

        Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.  # noqa: E501

        :param run_sequence: The run_sequence of this V3Run.  # noqa: E501
        :type: int
        """

        self._run_sequence = run_sequence

    @property
    def express_stop_count(self):
        """Gets the express_stop_count of this V3Run.  # noqa: E501

        The number of remaining skipped/express stations for the run/service from a stop  # noqa: E501

        :return: The express_stop_count of this V3Run.  # noqa: E501
        :rtype: int
        """
        return self._express_stop_count

    @express_stop_count.setter
    def express_stop_count(self, express_stop_count):
        """Sets the express_stop_count of this V3Run.

        The number of remaining skipped/express stations for the run/service from a stop  # noqa: E501

        :param express_stop_count: The express_stop_count of this V3Run.  # noqa: E501
        :type: int
        """

        self._express_stop_count = express_stop_count

    @property
    def vehicle_position(self):
        """Gets the vehicle_position of this V3Run.  # noqa: E501

        Position of the trip/service run. Available for some Bus, Nightrider and Train runs. May be null.  # noqa: E501

        :return: The vehicle_position of this V3Run.  # noqa: E501
        :rtype: V3VehiclePosition
        """
        return self._vehicle_position

    @vehicle_position.setter
    def vehicle_position(self, vehicle_position):
        """Sets the vehicle_position of this V3Run.

        Position of the trip/service run. Available for some Bus, Nightrider and Train runs. May be null.  # noqa: E501

        :param vehicle_position: The vehicle_position of this V3Run.  # noqa: E501
        :type: V3VehiclePosition
        """

        self._vehicle_position = vehicle_position

    @property
    def vehicle_descriptor(self):
        """Gets the vehicle_descriptor of this V3Run.  # noqa: E501

        Descriptor of the trip/service run. Only available for some runs. May be null.  # noqa: E501

        :return: The vehicle_descriptor of this V3Run.  # noqa: E501
        :rtype: V3VehicleDescriptor
        """
        return self._vehicle_descriptor

    @vehicle_descriptor.setter
    def vehicle_descriptor(self, vehicle_descriptor):
        """Sets the vehicle_descriptor of this V3Run.

        Descriptor of the trip/service run. Only available for some runs. May be null.  # noqa: E501

        :param vehicle_descriptor: The vehicle_descriptor of this V3Run.  # noqa: E501
        :type: V3VehicleDescriptor
        """

        self._vehicle_descriptor = vehicle_descriptor

    @property
    def geopath(self):
        """Gets the geopath of this V3Run.  # noqa: E501

        Geopath of the route  # noqa: E501

        :return: The geopath of this V3Run.  # noqa: E501
        :rtype: list[object]
        """
        return self._geopath

    @geopath.setter
    def geopath(self, geopath):
        """Sets the geopath of this V3Run.

        Geopath of the route  # noqa: E501

        :param geopath: The geopath of this V3Run.  # noqa: E501
        :type: list[object]
        """

        self._geopath = geopath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3Run, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3Run):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3Run):
            return True

        return self.to_dict() != other.to_dict()
