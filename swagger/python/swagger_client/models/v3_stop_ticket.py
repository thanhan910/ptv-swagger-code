# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V3StopTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_type': 'str',
        'zone': 'str',
        'is_free_fare_zone': 'bool',
        'ticket_machine': 'bool',
        'ticket_checks': 'bool',
        'vline_reservation': 'bool',
        'ticket_zones': 'list[int]'
    }

    attribute_map = {
        'ticket_type': 'ticket_type',
        'zone': 'zone',
        'is_free_fare_zone': 'is_free_fare_zone',
        'ticket_machine': 'ticket_machine',
        'ticket_checks': 'ticket_checks',
        'vline_reservation': 'vline_reservation',
        'ticket_zones': 'ticket_zones'
    }

    def __init__(self, ticket_type=None, zone=None, is_free_fare_zone=None, ticket_machine=None, ticket_checks=None, vline_reservation=None, ticket_zones=None, _configuration=None):  # noqa: E501
        """V3StopTicket - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ticket_type = None
        self._zone = None
        self._is_free_fare_zone = None
        self._ticket_machine = None
        self._ticket_checks = None
        self._vline_reservation = None
        self._ticket_zones = None
        self.discriminator = None

        if ticket_type is not None:
            self.ticket_type = ticket_type
        if zone is not None:
            self.zone = zone
        if is_free_fare_zone is not None:
            self.is_free_fare_zone = is_free_fare_zone
        if ticket_machine is not None:
            self.ticket_machine = ticket_machine
        if ticket_checks is not None:
            self.ticket_checks = ticket_checks
        if vline_reservation is not None:
            self.vline_reservation = vline_reservation
        if ticket_zones is not None:
            self.ticket_zones = ticket_zones

    @property
    def ticket_type(self):
        """Gets the ticket_type of this V3StopTicket.  # noqa: E501

        Indicates the ticket type for the stop (myki, paper or both)  # noqa: E501

        :return: The ticket_type of this V3StopTicket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """Sets the ticket_type of this V3StopTicket.

        Indicates the ticket type for the stop (myki, paper or both)  # noqa: E501

        :param ticket_type: The ticket_type of this V3StopTicket.  # noqa: E501
        :type: str
        """

        self._ticket_type = ticket_type

    @property
    def zone(self):
        """Gets the zone of this V3StopTicket.  # noqa: E501

        Description of the zone  # noqa: E501

        :return: The zone of this V3StopTicket.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this V3StopTicket.

        Description of the zone  # noqa: E501

        :param zone: The zone of this V3StopTicket.  # noqa: E501
        :type: str
        """

        self._zone = zone

    @property
    def is_free_fare_zone(self):
        """Gets the is_free_fare_zone of this V3StopTicket.  # noqa: E501

        Indicates whether the stop is inside the free fare zone  # noqa: E501

        :return: The is_free_fare_zone of this V3StopTicket.  # noqa: E501
        :rtype: bool
        """
        return self._is_free_fare_zone

    @is_free_fare_zone.setter
    def is_free_fare_zone(self, is_free_fare_zone):
        """Sets the is_free_fare_zone of this V3StopTicket.

        Indicates whether the stop is inside the free fare zone  # noqa: E501

        :param is_free_fare_zone: The is_free_fare_zone of this V3StopTicket.  # noqa: E501
        :type: bool
        """

        self._is_free_fare_zone = is_free_fare_zone

    @property
    def ticket_machine(self):
        """Gets the ticket_machine of this V3StopTicket.  # noqa: E501


        :return: The ticket_machine of this V3StopTicket.  # noqa: E501
        :rtype: bool
        """
        return self._ticket_machine

    @ticket_machine.setter
    def ticket_machine(self, ticket_machine):
        """Sets the ticket_machine of this V3StopTicket.


        :param ticket_machine: The ticket_machine of this V3StopTicket.  # noqa: E501
        :type: bool
        """

        self._ticket_machine = ticket_machine

    @property
    def ticket_checks(self):
        """Gets the ticket_checks of this V3StopTicket.  # noqa: E501


        :return: The ticket_checks of this V3StopTicket.  # noqa: E501
        :rtype: bool
        """
        return self._ticket_checks

    @ticket_checks.setter
    def ticket_checks(self, ticket_checks):
        """Sets the ticket_checks of this V3StopTicket.


        :param ticket_checks: The ticket_checks of this V3StopTicket.  # noqa: E501
        :type: bool
        """

        self._ticket_checks = ticket_checks

    @property
    def vline_reservation(self):
        """Gets the vline_reservation of this V3StopTicket.  # noqa: E501


        :return: The vline_reservation of this V3StopTicket.  # noqa: E501
        :rtype: bool
        """
        return self._vline_reservation

    @vline_reservation.setter
    def vline_reservation(self, vline_reservation):
        """Sets the vline_reservation of this V3StopTicket.


        :param vline_reservation: The vline_reservation of this V3StopTicket.  # noqa: E501
        :type: bool
        """

        self._vline_reservation = vline_reservation

    @property
    def ticket_zones(self):
        """Gets the ticket_zones of this V3StopTicket.  # noqa: E501


        :return: The ticket_zones of this V3StopTicket.  # noqa: E501
        :rtype: list[int]
        """
        return self._ticket_zones

    @ticket_zones.setter
    def ticket_zones(self, ticket_zones):
        """Sets the ticket_zones of this V3StopTicket.


        :param ticket_zones: The ticket_zones of this V3StopTicket.  # noqa: E501
        :type: list[int]
        """

        self._ticket_zones = ticket_zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3StopTicket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3StopTicket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3StopTicket):
            return True

        return self.to_dict() != other.to_dict()
