/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.V3DeparturesResponse;
import io.swagger.model.V3DirectionsResponse;
import io.swagger.model.V3DisruptionModesResponse;
import io.swagger.model.V3DisruptionResponse;
import io.swagger.model.V3DisruptionsResponse;
import io.swagger.model.V3ErrorResponse;
import io.swagger.model.V3FareEstimateResponse;
import io.swagger.model.V3OutletGeolocationResponse;
import io.swagger.model.V3OutletResponse;
import io.swagger.model.V3RouteResponse;
import io.swagger.model.V3RouteTypesResponse;
import io.swagger.model.V3RunResponse;
import io.swagger.model.V3RunsResponse;
import io.swagger.model.V3SearchResult;
import io.swagger.model.V3StopResponse;
import io.swagger.model.V3StoppingPattern;
import io.swagger.model.V3StopsByDistanceResponse;
import io.swagger.model.V3StopsOnRouteResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-14T03:36:08.023681800+10:00[Australia/Sydney]")
@Validated
public interface V3Api {

    @Operation(summary = "View departures for all routes from a stop", description = "", tags={ "Departures" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Service departures from the specified stop for all routes of the specified route type; departures are timetabled and real-time (if applicable).", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DeparturesResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/departures/route_type/{route_type}/stop/{stop_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DeparturesResponse> departuresGetForStop(@Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @Parameter(in = ParameterIn.PATH, description = "Identifier of stop; values returned by Stops API", required=true, schema=@Schema()) @PathVariable("stop_id") Integer stopId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by platform number at stop" ,schema=@Schema()) @Valid @RequestParam(value = "platform_numbers", required = false) List<Integer> platformNumbers
, @Parameter(in = ParameterIn.QUERY, description = "Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}" ,schema=@Schema()) @Valid @RequestParam(value = "direction_id", required = false) Integer directionId
, @Parameter(in = ParameterIn.QUERY, description = "Indicates that stop_id parameter will accept \"GTFS stop_id\" data" ,schema=@Schema()) @Valid @RequestParam(value = "gtfs", required = false) Boolean gtfs
, @Parameter(in = ParameterIn.QUERY, description = "Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Maximum number of results returned" ,schema=@Schema()) @Valid @RequestParam(value = "max_results", required = false) Integer maxResults
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only" ,schema=@Schema()) @Valid @RequestParam(value = "include_cancelled", required = false) Boolean includeCancelled
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0." ,schema=@Schema()) @Valid @RequestParam(value = "look_backwards", required = false) Boolean lookBackwards
, @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information." ,schema=@Schema(allowableValues={ "All", "Stop", "Route", "Run", "Direction", "Disruption", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = false) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if the route geopath should be returned" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View departures for a specific route from a stop", description = "", tags={ "Departures" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DeparturesResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DeparturesResponse> departuresGetForStopAndRoute(@Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @Parameter(in = ParameterIn.PATH, description = "Identifier of stop; values returned by Stops API", required=true, schema=@Schema()) @PathVariable("stop_id") Integer stopId
, @Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes", required=true, schema=@Schema()) @PathVariable("route_id") String routeId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}" ,schema=@Schema()) @Valid @RequestParam(value = "direction_id", required = false) Integer directionId
, @Parameter(in = ParameterIn.QUERY, description = "Indicates that stop_id parameter will accept \"GTFS stop_id\" data" ,schema=@Schema()) @Valid @RequestParam(value = "gtfs", required = false) Boolean gtfs
, @Parameter(in = ParameterIn.QUERY, description = "Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Maximum number of results returned" ,schema=@Schema()) @Valid @RequestParam(value = "max_results", required = false) Integer maxResults
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only" ,schema=@Schema()) @Valid @RequestParam(value = "include_cancelled", required = false) Boolean includeCancelled
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0." ,schema=@Schema()) @Valid @RequestParam(value = "look_backwards", required = false) Boolean lookBackwards
, @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information." ,schema=@Schema(allowableValues={ "All", "Stop", "Route", "Run", "Direction", "Disruption", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = false) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if the route geopath should be returned" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all routes for a direction of travel", description = "", tags={ "Directions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All routes that travel in the specified direction.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DirectionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/directions/{direction_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DirectionsResponse> directionsForDirection(@Parameter(in = ParameterIn.PATH, description = "Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}", required=true, schema=@Schema()) @PathVariable("direction_id") Integer directionId
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all routes of a particular type for a direction of travel", description = "", tags={ "Directions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All routes of the specified route type that travel in the specified direction.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DirectionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/directions/{direction_id}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DirectionsResponse> directionsForDirectionAndType(@Parameter(in = ParameterIn.PATH, description = "Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}", required=true, schema=@Schema()) @PathVariable("direction_id") Integer directionId
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View directions that a route travels in", description = "", tags={ "Directions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The directions that a specified route travels in.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DirectionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/directions/route/{route_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DirectionsResponse> directionsForRoute(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all disruptions for all route types", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All disruption information for all route types.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionsResponse> disruptionsGetAllDisruptions(@Parameter(in = ParameterIn.QUERY, description = "Filter by route_type; values returned via RouteTypes API" ,schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @Valid @RequestParam(value = "route_types", required = false) List<Integer> routeTypes
, @Parameter(in = ParameterIn.QUERY, description = "Filter by disruption_mode; values returned via v3/disruptions/modes API" ,schema=@Schema(allowableValues={ "1", "2", "3", "4", "5", "7", "8", "9", "10", "11", "12", "13", "14", "100" }
)) @Valid @RequestParam(value = "disruption_modes", required = false) List<Integer> disruptionModes
, @Parameter(in = ParameterIn.QUERY, description = "Filter by status of disruption" ,schema=@Schema(allowableValues={ "current", "planned" }
)) @Valid @RequestParam(value = "disruption_status", required = false) String disruptionStatus
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View a specific disruption", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Disruption information for the specified disruption ID.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions/{disruption_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionResponse> disruptionsGetDisruptionById(@Parameter(in = ParameterIn.PATH, description = "Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}", required=true, schema=@Schema()) @PathVariable("disruption_id") Long disruptionId
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "Get all disruption modes", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Disruption specific modes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionModesResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions/modes",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionModesResponse> disruptionsGetDisruptionModes(@Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all disruptions for a particular route", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified route.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions/route/{route_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionsResponse> disruptionsGetDisruptionsByRoute(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by status of disruption" ,schema=@Schema(allowableValues={ "current", "planned" }
)) @Valid @RequestParam(value = "disruption_status", required = false) String disruptionStatus
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all disruptions for a particular route and stop", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified route and stop.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions/route/{route_id}/stop/{stop_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionsResponse> disruptionsGetDisruptionsByRouteAndStop(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.PATH, description = "Identifier of stop; values returned by Stops API - v3/stops", required=true, schema=@Schema()) @PathVariable("stop_id") Integer stopId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by status of disruption" ,schema=@Schema(allowableValues={ "current", "planned" }
)) @Valid @RequestParam(value = "disruption_status", required = false) String disruptionStatus
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all disruptions for a particular stop", description = "", tags={ "Disruptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified stop.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3DisruptionsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/disruptions/stop/{stop_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3DisruptionsResponse> disruptionsGetDisruptionsByStop(@Parameter(in = ParameterIn.PATH, description = "Identifier of stop; values returned by Stops API - v3/stops", required=true, schema=@Schema()) @PathVariable("stop_id") Integer stopId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by status of disruption" ,schema=@Schema(allowableValues={ "current", "planned" }
)) @Valid @RequestParam(value = "disruption_status", required = false) String disruptionStatus
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "Estimate a fare by zone", description = "", tags={ "FareEstimate" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Resultant set fare estimates", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3FareEstimateResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3FareEstimateResponse> fareEstimateGetFareEstimateByZone(@Parameter(in = ParameterIn.PATH, description = "Minimum Zone travelled through ie. 1", required=true, schema=@Schema()) @PathVariable("minZone") Integer minZone
, @Parameter(in = ParameterIn.PATH, description = "Maximum Zone travelled through id. 6", required=true, schema=@Schema()) @PathVariable("maxZone") Integer maxZone
, @Parameter(in = ParameterIn.QUERY, description = "JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53)." ,schema=@Schema()) @Valid @RequestParam(value = "journey_touch_on_utc", required = false) OffsetDateTime journeyTouchOnUtc
, @Parameter(in = ParameterIn.QUERY, description = "JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53)." ,schema=@Schema()) @Valid @RequestParam(value = "journey_touch_off_utc", required = false) OffsetDateTime journeyTouchOffUtc
, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "is_journey_in_free_tram_zone", required = false) Boolean isJourneyInFreeTramZone
, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @Valid @RequestParam(value = "travelled_route_types", required = false) List<Integer> travelledRouteTypes
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "List all ticket outlets", description = "", tags={ "Outlets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ticket outlets.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3OutletResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/outlets",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3OutletResponse> outletsGetAllOutlets(@Parameter(in = ParameterIn.QUERY, description = "Maximum number of results returned (default = 30)" ,schema=@Schema()) @Valid @RequestParam(value = "max_results", required = false) Integer maxResults
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "List ticket outlets near a specific location", description = "", tags={ "Outlets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ticket outlets near the specified location.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3OutletGeolocationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/outlets/location/{latitude},{longitude}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3OutletGeolocationResponse> outletsGetOutletsByGeolocation(@Parameter(in = ParameterIn.PATH, description = "Geographic coordinate of latitude", required=true, schema=@Schema()) @PathVariable("latitude") Float latitude
, @Parameter(in = ParameterIn.PATH, description = "Geographic coordinate of longitude", required=true, schema=@Schema()) @PathVariable("longitude") Float longitude
, @Parameter(in = ParameterIn.QUERY, description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)" ,schema=@Schema()) @Valid @RequestParam(value = "max_distance", required = false) Double maxDistance
, @Parameter(in = ParameterIn.QUERY, description = "Maximum number of results returned (default = 30)" ,schema=@Schema()) @Valid @RequestParam(value = "max_results", required = false) Integer maxResults
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View the stopping pattern for a specific trip/service run", description = "", tags={ "Patterns" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3StoppingPattern.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/pattern/run/{run_ref}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3StoppingPattern> patternsGetPatternByRun(@Parameter(in = ParameterIn.PATH, description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.", required=true, schema=@Schema()) @PathVariable("run_ref") String runRef
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information." ,required=true,schema=@Schema(allowableValues={ "All", "Stop", "Route", "Run", "Direction", "Disruption", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = true) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Filter by stop_id; values returned by Stops API" ,schema=@Schema()) @Valid @RequestParam(value = "stop_id", required = false) Integer stopId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by the date and time of the request (ISO 8601 UTC format)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Include any skipped stops in a stopping pattern. Defaults to false." ,schema=@Schema()) @Valid @RequestParam(value = "include_skipped_stops", required = false) Boolean includeSkippedStops
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if geopath data will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all route types and their names", description = "", tags={ "RouteTypes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All route types (i.e. identifiers of transport modes) and their names.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RouteTypesResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/route_types",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RouteTypesResponse> routeTypesGetRouteTypes(@Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View route names and numbers for all routes", description = "", tags={ "Routes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Route names and numbers for all routes of all route types.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RouteResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/routes",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RouteResponse> routesOneOrMoreRoutes(@Parameter(in = ParameterIn.QUERY, description = "Filter by route_type; values returned via RouteTypes API" ,schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @Valid @RequestParam(value = "route_types", required = false) List<Integer> routeTypes
, @Parameter(in = ParameterIn.QUERY, description = "Filter by name  of route (accepts partial route name matches)" ,schema=@Schema()) @Valid @RequestParam(value = "route_name", required = false) String routeName
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View route name and number for specific route ID", description = "", tags={ "Routes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The route name and number for the specified route ID.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RouteResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/routes/{route_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RouteResponse> routesRouteFromId(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Departures, Directions and Disruptions APIs", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.QUERY, description = "Indicates kif geopath data will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Filter geopaths by date (ISO 8601 UTC format) (default = current date)" ,schema=@Schema()) @Valid @RequestParam(value = "geopath_utc", required = false) OffsetDateTime geopathUtc
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all trip/service runs for a specific route ID", description = "", tags={ "Runs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified route ID.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RunsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/runs/route/{route_id}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RunsResponse> runsForRoute(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes.", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None." ,schema=@Schema(allowableValues={ "All", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = false) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Date of the request. (optional - defaults to now)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all trip/service runs for a specific route ID and route type", description = "", tags={ "Runs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified route ID and route type.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RunsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/runs/route/{route_id}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RunsResponse> runsForRouteAndRouteType(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes.", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All." ,required=true,schema=@Schema(allowableValues={ "All", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = true) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Date of the request. (optional - defaults to now)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all trip/service runs for a specific run_ref", description = "", tags={ "Runs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified run_ref.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RunsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/runs/{run_ref}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RunsResponse> runsForRun(@Parameter(in = ParameterIn.PATH, description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.", required=true, schema=@Schema()) @PathVariable("run_ref") String runRef
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None." ,required=true,schema=@Schema(allowableValues={ "All", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = true) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Date of the request. (optional - defaults to now)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if geopath data will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View the trip/service run for a specific run_ref and route type", description = "", tags={ "Runs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The trip/service run details for the run_ref and route type specified.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3RunResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/runs/{run_ref}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3RunResponse> runsForRunAndRouteType(@Parameter(in = ParameterIn.PATH, description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.", required=true, schema=@Schema()) @PathVariable("run_ref") String runRef
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None." ,required=true,schema=@Schema(allowableValues={ "All", "VehicleDescriptor", "VehiclePosition", "None" }
)) @Valid @RequestParam(value = "expand", required = true) List<String> expand
, @Parameter(in = ParameterIn.QUERY, description = "Date of the request. (optional - defaults to now)" ,schema=@Schema()) @Valid @RequestParam(value = "date_utc", required = false) OffsetDateTime dateUtc
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if geopath data will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View stops, routes and myki ticket outlets that match the search term", description = "", tags={ "Search" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default).", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3SearchResult.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/search/{search_term}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3SearchResult> searchSearch(@Parameter(in = ParameterIn.PATH, description = "Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)", required=true, schema=@Schema()) @PathVariable("search_term") String searchTerm
, @Parameter(in = ParameterIn.QUERY, description = "Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)" ,schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @Valid @RequestParam(value = "route_types", required = false) List<Integer> routeTypes
, @Parameter(in = ParameterIn.QUERY, description = "Filter by geographic coordinate of latitude" ,schema=@Schema()) @Valid @RequestParam(value = "latitude", required = false) Float latitude
, @Parameter(in = ParameterIn.QUERY, description = "Filter by geographic coordinate of longitude" ,schema=@Schema()) @Valid @RequestParam(value = "longitude", required = false) Float longitude
, @Parameter(in = ParameterIn.QUERY, description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters" ,schema=@Schema()) @Valid @RequestParam(value = "max_distance", required = false) Float maxDistance
, @Parameter(in = ParameterIn.QUERY, description = "Placeholder for future development; currently unavailable" ,schema=@Schema()) @Valid @RequestParam(value = "include_addresses", required = false) Boolean includeAddresses
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if outlets will be returned in response (default = true)" ,schema=@Schema()) @Valid @RequestParam(value = "include_outlets", required = false) Boolean includeOutlets
, @Parameter(in = ParameterIn.QUERY, description = "Indicates whether to find stops by suburbs in the search term (default = true)" ,schema=@Schema()) @Valid @RequestParam(value = "match_stop_by_suburb", required = false) Boolean matchStopBySuburb
, @Parameter(in = ParameterIn.QUERY, description = "Indicates whether to find routes by suburbs in the search term (default = true)" ,schema=@Schema()) @Valid @RequestParam(value = "match_route_by_suburb", required = false) Boolean matchRouteBySuburb
, @Parameter(in = ParameterIn.QUERY, description = "Indicates whether to search for stops according to a metlink stop ID (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "match_stop_by_gtfs_stop_id", required = false) Boolean matchStopByGtfsStopId
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View facilities at a specific stop (Metro and V/Line stations only)", description = "", tags={ "Stops" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3StopResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/stops/{stop_id}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3StopResponse> stopsStopDetails(@Parameter(in = ParameterIn.PATH, description = "Identifier of stop; values returned by Stops API", required=true, schema=@Schema()) @PathVariable("stop_id") Integer stopId
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop location information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_location", required = false) Boolean stopLocation
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop amenity information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_amenities", required = false) Boolean stopAmenities
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop accessibility information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_accessibility", required = false) Boolean stopAccessibility
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop contact information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_contact", required = false) Boolean stopContact
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop ticket information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_ticket", required = false) Boolean stopTicket
, @Parameter(in = ParameterIn.QUERY, description = "Incdicates whether the stop_id is a GTFS ID or not" ,schema=@Schema()) @Valid @RequestParam(value = "gtfs", required = false) Boolean gtfs
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop staffing information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_staffing", required = false) Boolean stopStaffing
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop disruption information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_disruptions", required = false) Boolean stopDisruptions
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all stops near a specific location", description = "", tags={ "Stops" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All stops near the specified location.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3StopsByDistanceResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/stops/location/{latitude},{longitude}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3StopsByDistanceResponse> stopsStopsByGeolocation(@Parameter(in = ParameterIn.PATH, description = "Geographic coordinate of latitude", required=true, schema=@Schema()) @PathVariable("latitude") Float latitude
, @Parameter(in = ParameterIn.PATH, description = "Geographic coordinate of longitude", required=true, schema=@Schema()) @PathVariable("longitude") Float longitude
, @Parameter(in = ParameterIn.QUERY, description = "Filter by route_type; values returned via RouteTypes API" ,schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @Valid @RequestParam(value = "route_types", required = false) List<Integer> routeTypes
, @Parameter(in = ParameterIn.QUERY, description = "Maximum number of results returned (default = 30)" ,schema=@Schema()) @Valid @RequestParam(value = "max_results", required = false) Integer maxResults
, @Parameter(in = ParameterIn.QUERY, description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)" ,schema=@Schema()) @Valid @RequestParam(value = "max_distance", required = false) Double maxDistance
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop disruption information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_disruptions", required = false) Boolean stopDisruptions
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);


    @Operation(summary = "View all stops on a specific route", description = "", tags={ "Stops" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "All stops on the specified route.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3StopsOnRouteResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Access Denied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = V3ErrorResponse.class))) })
    @RequestMapping(value = "/v3/stops/route/{route_id}/route_type/{route_type}",
        produces = { "application/json", "text/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<V3StopsOnRouteResponse> stopsStopsForRoute(@Parameter(in = ParameterIn.PATH, description = "Identifier of route; values returned by Routes API - v3/routes", required=true, schema=@Schema()) @PathVariable("route_id") Integer routeId
, @Parameter(in = ParameterIn.PATH, description = "Number identifying transport mode; values returned via RouteTypes API", required=true, schema=@Schema(allowableValues={ "0", "1", "2", "3", "4" }
)) @PathVariable("route_type") Integer routeType
, @Parameter(in = ParameterIn.QUERY, description = "An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response." ,schema=@Schema()) @Valid @RequestParam(value = "direction_id", required = false) Integer directionId
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if stop disruption information will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "stop_disruptions", required = false) Boolean stopDisruptions
, @Parameter(in = ParameterIn.QUERY, description = "Indicates if geopath data will be returned (default = false)" ,schema=@Schema()) @Valid @RequestParam(value = "include_geopath", required = false) Boolean includeGeopath
, @Parameter(in = ParameterIn.QUERY, description = "Filter geopaths by date (ISO 8601 UTC format) (default = current date)" ,schema=@Schema()) @Valid @RequestParam(value = "geopath_utc", required = false) OffsetDateTime geopathUtc
, @Parameter(in = ParameterIn.QUERY, description = "Please ignore" ,schema=@Schema()) @Valid @RequestParam(value = "token", required = false) String token
, @Parameter(in = ParameterIn.QUERY, description = "Your developer id" ,schema=@Schema()) @Valid @RequestParam(value = "devid", required = false) String devid
, @Parameter(in = ParameterIn.QUERY, description = "Authentication signature for request" ,schema=@Schema()) @Valid @RequestParam(value = "signature", required = false) String signature
);

}

