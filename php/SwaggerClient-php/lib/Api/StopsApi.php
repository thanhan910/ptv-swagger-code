<?php
/**
 * StopsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StopsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StopsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation stopsStopDetails
     *
     * View facilities at a specific stop (Metro and V/Line stations only)
     *
     * @param  int $stop_id Identifier of stop; values returned by Stops API (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  bool $stop_location Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_amenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_accessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_contact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_ticket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param  bool $gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param  bool $stop_staffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3StopResponse
     */
    public function stopsStopDetails($stop_id, $route_type, $stop_location = null, $stop_amenities = null, $stop_accessibility = null, $stop_contact = null, $stop_ticket = null, $gtfs = null, $stop_staffing = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->stopsStopDetailsWithHttpInfo($stop_id, $route_type, $stop_location, $stop_amenities, $stop_accessibility, $stop_contact, $stop_ticket, $gtfs, $stop_staffing, $stop_disruptions, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation stopsStopDetailsWithHttpInfo
     *
     * View facilities at a specific stop (Metro and V/Line stations only)
     *
     * @param  int $stop_id Identifier of stop; values returned by Stops API (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  bool $stop_location Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_amenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_accessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_contact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_ticket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param  bool $gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param  bool $stop_staffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3StopResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopsStopDetailsWithHttpInfo($stop_id, $route_type, $stop_location = null, $stop_amenities = null, $stop_accessibility = null, $stop_contact = null, $stop_ticket = null, $gtfs = null, $stop_staffing = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopResponse';
        $request = $this->stopsStopDetailsRequest($stop_id, $route_type, $stop_location, $stop_amenities, $stop_accessibility, $stop_contact, $stop_ticket, $gtfs, $stop_staffing, $stop_disruptions, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3StopResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopsStopDetailsAsync
     *
     * View facilities at a specific stop (Metro and V/Line stations only)
     *
     * @param  int $stop_id Identifier of stop; values returned by Stops API (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  bool $stop_location Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_amenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_accessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_contact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_ticket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param  bool $gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param  bool $stop_staffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopDetailsAsync($stop_id, $route_type, $stop_location = null, $stop_amenities = null, $stop_accessibility = null, $stop_contact = null, $stop_ticket = null, $gtfs = null, $stop_staffing = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        return $this->stopsStopDetailsAsyncWithHttpInfo($stop_id, $route_type, $stop_location, $stop_amenities, $stop_accessibility, $stop_contact, $stop_ticket, $gtfs, $stop_staffing, $stop_disruptions, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopsStopDetailsAsyncWithHttpInfo
     *
     * View facilities at a specific stop (Metro and V/Line stations only)
     *
     * @param  int $stop_id Identifier of stop; values returned by Stops API (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  bool $stop_location Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_amenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_accessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_contact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_ticket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param  bool $gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param  bool $stop_staffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopDetailsAsyncWithHttpInfo($stop_id, $route_type, $stop_location = null, $stop_amenities = null, $stop_accessibility = null, $stop_contact = null, $stop_ticket = null, $gtfs = null, $stop_staffing = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopResponse';
        $request = $this->stopsStopDetailsRequest($stop_id, $route_type, $stop_location, $stop_amenities, $stop_accessibility, $stop_contact, $stop_ticket, $gtfs, $stop_staffing, $stop_disruptions, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopsStopDetails'
     *
     * @param  int $stop_id Identifier of stop; values returned by Stops API (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  bool $stop_location Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_amenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_accessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_contact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_ticket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param  bool $gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param  bool $stop_staffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopsStopDetailsRequest($stop_id, $route_type, $stop_location = null, $stop_amenities = null, $stop_accessibility = null, $stop_contact = null, $stop_ticket = null, $gtfs = null, $stop_staffing = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'stop_id' is set
        if ($stop_id === null || (is_array($stop_id) && count($stop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stop_id when calling stopsStopDetails'
            );
        }
        // verify the required parameter 'route_type' is set
        if ($route_type === null || (is_array($route_type) && count($route_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_type when calling stopsStopDetails'
            );
        }

        $resourcePath = '/v3/stops/{stop_id}/route_type/{route_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stop_location !== null) {
            $queryParams['stop_location'] = ObjectSerializer::toQueryValue($stop_location, null);
        }
        // query params
        if ($stop_amenities !== null) {
            $queryParams['stop_amenities'] = ObjectSerializer::toQueryValue($stop_amenities, null);
        }
        // query params
        if ($stop_accessibility !== null) {
            $queryParams['stop_accessibility'] = ObjectSerializer::toQueryValue($stop_accessibility, null);
        }
        // query params
        if ($stop_contact !== null) {
            $queryParams['stop_contact'] = ObjectSerializer::toQueryValue($stop_contact, null);
        }
        // query params
        if ($stop_ticket !== null) {
            $queryParams['stop_ticket'] = ObjectSerializer::toQueryValue($stop_ticket, null);
        }
        // query params
        if ($gtfs !== null) {
            $queryParams['gtfs'] = ObjectSerializer::toQueryValue($gtfs, null);
        }
        // query params
        if ($stop_staffing !== null) {
            $queryParams['stop_staffing'] = ObjectSerializer::toQueryValue($stop_staffing, null);
        }
        // query params
        if ($stop_disruptions !== null) {
            $queryParams['stop_disruptions'] = ObjectSerializer::toQueryValue($stop_disruptions, null);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid, null);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature, null);
        }

        // path params
        if ($stop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stop_id' . '}',
                ObjectSerializer::toPathValue($stop_id),
                $resourcePath
            );
        }
        // path params
        if ($route_type !== null) {
            $resourcePath = str_replace(
                '{' . 'route_type' . '}',
                ObjectSerializer::toPathValue($route_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopsStopsByGeolocation
     *
     * View all stops near a specific location
     *
     * @param  float $latitude Geographic coordinate of latitude (required)
     * @param  float $longitude Geographic coordinate of longitude (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (optional)
     * @param  int $max_results Maximum number of results returned (default &#x3D; 30) (optional)
     * @param  double $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3StopsByDistanceResponse
     */
    public function stopsStopsByGeolocation($latitude, $longitude, $route_types = null, $max_results = null, $max_distance = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->stopsStopsByGeolocationWithHttpInfo($latitude, $longitude, $route_types, $max_results, $max_distance, $stop_disruptions, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation stopsStopsByGeolocationWithHttpInfo
     *
     * View all stops near a specific location
     *
     * @param  float $latitude Geographic coordinate of latitude (required)
     * @param  float $longitude Geographic coordinate of longitude (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (optional)
     * @param  int $max_results Maximum number of results returned (default &#x3D; 30) (optional)
     * @param  double $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3StopsByDistanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopsStopsByGeolocationWithHttpInfo($latitude, $longitude, $route_types = null, $max_results = null, $max_distance = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopsByDistanceResponse';
        $request = $this->stopsStopsByGeolocationRequest($latitude, $longitude, $route_types, $max_results, $max_distance, $stop_disruptions, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3StopsByDistanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopsStopsByGeolocationAsync
     *
     * View all stops near a specific location
     *
     * @param  float $latitude Geographic coordinate of latitude (required)
     * @param  float $longitude Geographic coordinate of longitude (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (optional)
     * @param  int $max_results Maximum number of results returned (default &#x3D; 30) (optional)
     * @param  double $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopsByGeolocationAsync($latitude, $longitude, $route_types = null, $max_results = null, $max_distance = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        return $this->stopsStopsByGeolocationAsyncWithHttpInfo($latitude, $longitude, $route_types, $max_results, $max_distance, $stop_disruptions, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopsStopsByGeolocationAsyncWithHttpInfo
     *
     * View all stops near a specific location
     *
     * @param  float $latitude Geographic coordinate of latitude (required)
     * @param  float $longitude Geographic coordinate of longitude (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (optional)
     * @param  int $max_results Maximum number of results returned (default &#x3D; 30) (optional)
     * @param  double $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopsByGeolocationAsyncWithHttpInfo($latitude, $longitude, $route_types = null, $max_results = null, $max_distance = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopsByDistanceResponse';
        $request = $this->stopsStopsByGeolocationRequest($latitude, $longitude, $route_types, $max_results, $max_distance, $stop_disruptions, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopsStopsByGeolocation'
     *
     * @param  float $latitude Geographic coordinate of latitude (required)
     * @param  float $longitude Geographic coordinate of longitude (required)
     * @param  int[] $route_types Filter by route_type; values returned via RouteTypes API (optional)
     * @param  int $max_results Maximum number of results returned (default &#x3D; 30) (optional)
     * @param  double $max_distance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopsStopsByGeolocationRequest($latitude, $longitude, $route_types = null, $max_results = null, $max_distance = null, $stop_disruptions = null, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'latitude' is set
        if ($latitude === null || (is_array($latitude) && count($latitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $latitude when calling stopsStopsByGeolocation'
            );
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null || (is_array($longitude) && count($longitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $longitude when calling stopsStopsByGeolocation'
            );
        }

        $resourcePath = '/v3/stops/location/{latitude},{longitude}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($route_types)) {
            $route_types = ObjectSerializer::serializeCollection($route_types, 'multi', true);
        }
        if ($route_types !== null) {
            $queryParams['route_types'] = ObjectSerializer::toQueryValue($route_types, 'int32');
        }
        // query params
        if ($max_results !== null) {
            $queryParams['max_results'] = ObjectSerializer::toQueryValue($max_results, 'int32');
        }
        // query params
        if ($max_distance !== null) {
            $queryParams['max_distance'] = ObjectSerializer::toQueryValue($max_distance, 'double');
        }
        // query params
        if ($stop_disruptions !== null) {
            $queryParams['stop_disruptions'] = ObjectSerializer::toQueryValue($stop_disruptions, null);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid, null);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature, null);
        }

        // path params
        if ($latitude !== null) {
            $resourcePath = str_replace(
                '{' . 'latitude' . '}',
                ObjectSerializer::toPathValue($latitude),
                $resourcePath
            );
        }
        // path params
        if ($longitude !== null) {
            $resourcePath = str_replace(
                '{' . 'longitude' . '}',
                ObjectSerializer::toPathValue($longitude),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopsStopsForRoute
     *
     * View all stops on a specific route
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  int $direction_id An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  \DateTime $geopath_utc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\V3StopsOnRouteResponse
     */
    public function stopsStopsForRoute($route_id, $route_type, $direction_id = null, $stop_disruptions = null, $include_geopath = null, $geopath_utc = null, $token = null, $devid = null, $signature = null)
    {
        list($response) = $this->stopsStopsForRouteWithHttpInfo($route_id, $route_type, $direction_id, $stop_disruptions, $include_geopath, $geopath_utc, $token, $devid, $signature);
        return $response;
    }

    /**
     * Operation stopsStopsForRouteWithHttpInfo
     *
     * View all stops on a specific route
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  int $direction_id An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  \DateTime $geopath_utc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\V3StopsOnRouteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopsStopsForRouteWithHttpInfo($route_id, $route_type, $direction_id = null, $stop_disruptions = null, $include_geopath = null, $geopath_utc = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopsOnRouteResponse';
        $request = $this->stopsStopsForRouteRequest($route_id, $route_type, $direction_id, $stop_disruptions, $include_geopath, $geopath_utc, $token, $devid, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3StopsOnRouteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\V3ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopsStopsForRouteAsync
     *
     * View all stops on a specific route
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  int $direction_id An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  \DateTime $geopath_utc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopsForRouteAsync($route_id, $route_type, $direction_id = null, $stop_disruptions = null, $include_geopath = null, $geopath_utc = null, $token = null, $devid = null, $signature = null)
    {
        return $this->stopsStopsForRouteAsyncWithHttpInfo($route_id, $route_type, $direction_id, $stop_disruptions, $include_geopath, $geopath_utc, $token, $devid, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopsStopsForRouteAsyncWithHttpInfo
     *
     * View all stops on a specific route
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  int $direction_id An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  \DateTime $geopath_utc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopsStopsForRouteAsyncWithHttpInfo($route_id, $route_type, $direction_id = null, $stop_disruptions = null, $include_geopath = null, $geopath_utc = null, $token = null, $devid = null, $signature = null)
    {
        $returnType = '\Swagger\Client\Model\V3StopsOnRouteResponse';
        $request = $this->stopsStopsForRouteRequest($route_id, $route_type, $direction_id, $stop_disruptions, $include_geopath, $geopath_utc, $token, $devid, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopsStopsForRoute'
     *
     * @param  int $route_id Identifier of route; values returned by Routes API - v3/routes (required)
     * @param  int $route_type Number identifying transport mode; values returned via RouteTypes API (required)
     * @param  int $direction_id An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param  bool $stop_disruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param  bool $include_geopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param  \DateTime $geopath_utc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param  string $token Please ignore (optional)
     * @param  string $devid Your developer id (optional)
     * @param  string $signature Authentication signature for request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopsStopsForRouteRequest($route_id, $route_type, $direction_id = null, $stop_disruptions = null, $include_geopath = null, $geopath_utc = null, $token = null, $devid = null, $signature = null)
    {
        // verify the required parameter 'route_id' is set
        if ($route_id === null || (is_array($route_id) && count($route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_id when calling stopsStopsForRoute'
            );
        }
        // verify the required parameter 'route_type' is set
        if ($route_type === null || (is_array($route_type) && count($route_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_type when calling stopsStopsForRoute'
            );
        }

        $resourcePath = '/v3/stops/route/{route_id}/route_type/{route_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($direction_id !== null) {
            $queryParams['direction_id'] = ObjectSerializer::toQueryValue($direction_id, 'int32');
        }
        // query params
        if ($stop_disruptions !== null) {
            $queryParams['stop_disruptions'] = ObjectSerializer::toQueryValue($stop_disruptions, null);
        }
        // query params
        if ($include_geopath !== null) {
            $queryParams['include_geopath'] = ObjectSerializer::toQueryValue($include_geopath, null);
        }
        // query params
        if ($geopath_utc !== null) {
            $queryParams['geopath_utc'] = ObjectSerializer::toQueryValue($geopath_utc, 'date-time');
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }
        // query params
        if ($devid !== null) {
            $queryParams['devid'] = ObjectSerializer::toQueryValue($devid, null);
        }
        // query params
        if ($signature !== null) {
            $queryParams['signature'] = ObjectSerializer::toQueryValue($signature, null);
        }

        // path params
        if ($route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'route_id' . '}',
                ObjectSerializer::toPathValue($route_id),
                $resourcePath
            );
        }
        // path params
        if ($route_type !== null) {
            $resourcePath = str_replace(
                '{' . 'route_type' . '}',
                ObjectSerializer::toPathValue($route_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
