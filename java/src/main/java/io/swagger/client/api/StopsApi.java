/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.V3ErrorResponse;
import io.swagger.client.model.V3StopResponse;
import io.swagger.client.model.V3StopsByDistanceResponse;
import io.swagger.client.model.V3StopsOnRouteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StopsApi {
    private ApiClient apiClient;

    public StopsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StopsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for stopsStopDetails
     * @param stopId Identifier of stop; values returned by Stops API (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopsStopDetailsCall(Integer stopId, Integer routeType, Boolean stopLocation, Boolean stopAmenities, Boolean stopAccessibility, Boolean stopContact, Boolean stopTicket, Boolean gtfs, Boolean stopStaffing, Boolean stopDisruptions, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/stops/{stop_id}/route_type/{route_type}"
            .replaceAll("\\{" + "stop_id" + "\\}", apiClient.escapeString(stopId.toString()))
            .replaceAll("\\{" + "route_type" + "\\}", apiClient.escapeString(routeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stopLocation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_location", stopLocation));
        if (stopAmenities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_amenities", stopAmenities));
        if (stopAccessibility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_accessibility", stopAccessibility));
        if (stopContact != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_contact", stopContact));
        if (stopTicket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_ticket", stopTicket));
        if (gtfs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gtfs", gtfs));
        if (stopStaffing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_staffing", stopStaffing));
        if (stopDisruptions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_disruptions", stopDisruptions));
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (devid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devid", devid));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopsStopDetailsValidateBeforeCall(Integer stopId, Integer routeType, Boolean stopLocation, Boolean stopAmenities, Boolean stopAccessibility, Boolean stopContact, Boolean stopTicket, Boolean gtfs, Boolean stopStaffing, Boolean stopDisruptions, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'stopId' is set
        if (stopId == null) {
            throw new ApiException("Missing the required parameter 'stopId' when calling stopsStopDetails(Async)");
        }
        // verify the required parameter 'routeType' is set
        if (routeType == null) {
            throw new ApiException("Missing the required parameter 'routeType' when calling stopsStopDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = stopsStopDetailsCall(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * View facilities at a specific stop (Metro and V/Line stations only)
     * 
     * @param stopId Identifier of stop; values returned by Stops API (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3StopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V3StopResponse stopsStopDetails(Integer stopId, Integer routeType, Boolean stopLocation, Boolean stopAmenities, Boolean stopAccessibility, Boolean stopContact, Boolean stopTicket, Boolean gtfs, Boolean stopStaffing, Boolean stopDisruptions, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3StopResponse> resp = stopsStopDetailsWithHttpInfo(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature);
        return resp.getData();
    }

    /**
     * View facilities at a specific stop (Metro and V/Line stations only)
     * 
     * @param stopId Identifier of stop; values returned by Stops API (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3StopResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V3StopResponse> stopsStopDetailsWithHttpInfo(Integer stopId, Integer routeType, Boolean stopLocation, Boolean stopAmenities, Boolean stopAccessibility, Boolean stopContact, Boolean stopTicket, Boolean gtfs, Boolean stopStaffing, Boolean stopDisruptions, String token, String devid, String signature) throws ApiException {
        com.squareup.okhttp.Call call = stopsStopDetailsValidateBeforeCall(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature, null, null);
        Type localVarReturnType = new TypeToken<V3StopResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View facilities at a specific stop (Metro and V/Line stations only) (asynchronously)
     * 
     * @param stopId Identifier of stop; values returned by Stops API (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param stopLocation Indicates if stop location information will be returned (default &#x3D; false) (optional)
     * @param stopAmenities Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     * @param stopAccessibility Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     * @param stopContact Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     * @param stopTicket Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     * @param gtfs Incdicates whether the stop_id is a GTFS ID or not (optional)
     * @param stopStaffing Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopsStopDetailsAsync(Integer stopId, Integer routeType, Boolean stopLocation, Boolean stopAmenities, Boolean stopAccessibility, Boolean stopContact, Boolean stopTicket, Boolean gtfs, Boolean stopStaffing, Boolean stopDisruptions, String token, String devid, String signature, final ApiCallback<V3StopResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopsStopDetailsValidateBeforeCall(stopId, routeType, stopLocation, stopAmenities, stopAccessibility, stopContact, stopTicket, gtfs, stopStaffing, stopDisruptions, token, devid, signature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V3StopResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopsStopsByGeolocation
     * @param latitude Geographic coordinate of latitude (required)
     * @param longitude Geographic coordinate of longitude (required)
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopsStopsByGeolocationCall(Float latitude, Float longitude, List<Integer> routeTypes, Integer maxResults, Double maxDistance, Boolean stopDisruptions, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/stops/location/{latitude},{longitude}"
            .replaceAll("\\{" + "latitude" + "\\}", apiClient.escapeString(latitude.toString()))
            .replaceAll("\\{" + "longitude" + "\\}", apiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (routeTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "route_types", routeTypes));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_results", maxResults));
        if (maxDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_distance", maxDistance));
        if (stopDisruptions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_disruptions", stopDisruptions));
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (devid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devid", devid));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopsStopsByGeolocationValidateBeforeCall(Float latitude, Float longitude, List<Integer> routeTypes, Integer maxResults, Double maxDistance, Boolean stopDisruptions, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling stopsStopsByGeolocation(Async)");
        }
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling stopsStopsByGeolocation(Async)");
        }
        
        com.squareup.okhttp.Call call = stopsStopsByGeolocationCall(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * View all stops near a specific location
     * 
     * @param latitude Geographic coordinate of latitude (required)
     * @param longitude Geographic coordinate of longitude (required)
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3StopsByDistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V3StopsByDistanceResponse stopsStopsByGeolocation(Float latitude, Float longitude, List<Integer> routeTypes, Integer maxResults, Double maxDistance, Boolean stopDisruptions, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3StopsByDistanceResponse> resp = stopsStopsByGeolocationWithHttpInfo(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature);
        return resp.getData();
    }

    /**
     * View all stops near a specific location
     * 
     * @param latitude Geographic coordinate of latitude (required)
     * @param longitude Geographic coordinate of longitude (required)
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3StopsByDistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V3StopsByDistanceResponse> stopsStopsByGeolocationWithHttpInfo(Float latitude, Float longitude, List<Integer> routeTypes, Integer maxResults, Double maxDistance, Boolean stopDisruptions, String token, String devid, String signature) throws ApiException {
        com.squareup.okhttp.Call call = stopsStopsByGeolocationValidateBeforeCall(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature, null, null);
        Type localVarReturnType = new TypeToken<V3StopsByDistanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View all stops near a specific location (asynchronously)
     * 
     * @param latitude Geographic coordinate of latitude (required)
     * @param longitude Geographic coordinate of longitude (required)
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param maxResults Maximum number of results returned (default &#x3D; 30) (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopsStopsByGeolocationAsync(Float latitude, Float longitude, List<Integer> routeTypes, Integer maxResults, Double maxDistance, Boolean stopDisruptions, String token, String devid, String signature, final ApiCallback<V3StopsByDistanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopsStopsByGeolocationValidateBeforeCall(latitude, longitude, routeTypes, maxResults, maxDistance, stopDisruptions, token, devid, signature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V3StopsByDistanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopsStopsForRoute
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopsStopsForRouteCall(Integer routeId, Integer routeType, Integer directionId, Boolean stopDisruptions, Boolean includeGeopath, OffsetDateTime geopathUtc, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/stops/route/{route_id}/route_type/{route_type}"
            .replaceAll("\\{" + "route_id" + "\\}", apiClient.escapeString(routeId.toString()))
            .replaceAll("\\{" + "route_type" + "\\}", apiClient.escapeString(routeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (directionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction_id", directionId));
        if (stopDisruptions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_disruptions", stopDisruptions));
        if (includeGeopath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_geopath", includeGeopath));
        if (geopathUtc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geopath_utc", geopathUtc));
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));
        if (devid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devid", devid));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopsStopsForRouteValidateBeforeCall(Integer routeId, Integer routeType, Integer directionId, Boolean stopDisruptions, Boolean includeGeopath, OffsetDateTime geopathUtc, String token, String devid, String signature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling stopsStopsForRoute(Async)");
        }
        // verify the required parameter 'routeType' is set
        if (routeType == null) {
            throw new ApiException("Missing the required parameter 'routeType' when calling stopsStopsForRoute(Async)");
        }
        
        com.squareup.okhttp.Call call = stopsStopsForRouteCall(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * View all stops on a specific route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3StopsOnRouteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V3StopsOnRouteResponse stopsStopsForRoute(Integer routeId, Integer routeType, Integer directionId, Boolean stopDisruptions, Boolean includeGeopath, OffsetDateTime geopathUtc, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3StopsOnRouteResponse> resp = stopsStopsForRouteWithHttpInfo(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature);
        return resp.getData();
    }

    /**
     * View all stops on a specific route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3StopsOnRouteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V3StopsOnRouteResponse> stopsStopsForRouteWithHttpInfo(Integer routeId, Integer routeType, Integer directionId, Boolean stopDisruptions, Boolean includeGeopath, OffsetDateTime geopathUtc, String token, String devid, String signature) throws ApiException {
        com.squareup.okhttp.Call call = stopsStopsForRouteValidateBeforeCall(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature, null, null);
        Type localVarReturnType = new TypeToken<V3StopsOnRouteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View all stops on a specific route (asynchronously)
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param routeType Number identifying transport mode; values returned via RouteTypes API (required)
     * @param directionId An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     * @param stopDisruptions Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     * @param includeGeopath Indicates if geopath data will be returned (default &#x3D; false) (optional)
     * @param geopathUtc Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopsStopsForRouteAsync(Integer routeId, Integer routeType, Integer directionId, Boolean stopDisruptions, Boolean includeGeopath, OffsetDateTime geopathUtc, String token, String devid, String signature, final ApiCallback<V3StopsOnRouteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopsStopsForRouteValidateBeforeCall(routeId, routeType, directionId, stopDisruptions, includeGeopath, geopathUtc, token, devid, signature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V3StopsOnRouteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
