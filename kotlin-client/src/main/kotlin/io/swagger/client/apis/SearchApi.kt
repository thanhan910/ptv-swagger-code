/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.V3ErrorResponse
import io.swagger.client.models.V3SearchResult

import io.swagger.client.infrastructure.*

class SearchApi(basePath: kotlin.String = "https://timetableapi.ptv.vic.gov.au/") : ApiClient(basePath) {

    /**
     * View stops, routes and myki ticket outlets that match the search term
     * 
     * @param searchTerm Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) (optional)
     * @param latitude Filter by geographic coordinate of latitude (optional)
     * @param longitude Filter by geographic coordinate of longitude (optional)
     * @param maxDistance Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (optional)
     * @param includeAddresses Placeholder for future development; currently unavailable (optional)
     * @param includeOutlets Indicates if outlets will be returned in response (default &#x3D; true) (optional)
     * @param matchStopBySuburb Indicates whether to find stops by suburbs in the search term (default &#x3D; true) (optional)
     * @param matchRouteBySuburb Indicates whether to find routes by suburbs in the search term (default &#x3D; true) (optional)
     * @param matchStopByGtfsStopId Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3SearchResult
     */
    @Suppress("UNCHECKED_CAST")
    fun searchSearch(searchTerm: kotlin.String, routeTypes: kotlin.Array<kotlin.Int>? = null, latitude: kotlin.Float? = null, longitude: kotlin.Float? = null, maxDistance: kotlin.Float? = null, includeAddresses: kotlin.Boolean? = null, includeOutlets: kotlin.Boolean? = null, matchStopBySuburb: kotlin.Boolean? = null, matchRouteBySuburb: kotlin.Boolean? = null, matchStopByGtfsStopId: kotlin.Boolean? = null, token: kotlin.String? = null, devid: kotlin.String? = null, signature: kotlin.String? = null): V3SearchResult {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (routeTypes != null) {
                put("route_types", toMultiValue(routeTypes.toList(), "multi"))
            }
            if (latitude != null) {
                put("latitude", listOf(latitude.toString()))
            }
            if (longitude != null) {
                put("longitude", listOf(longitude.toString()))
            }
            if (maxDistance != null) {
                put("max_distance", listOf(maxDistance.toString()))
            }
            if (includeAddresses != null) {
                put("include_addresses", listOf(includeAddresses.toString()))
            }
            if (includeOutlets != null) {
                put("include_outlets", listOf(includeOutlets.toString()))
            }
            if (matchStopBySuburb != null) {
                put("match_stop_by_suburb", listOf(matchStopBySuburb.toString()))
            }
            if (matchRouteBySuburb != null) {
                put("match_route_by_suburb", listOf(matchRouteBySuburb.toString()))
            }
            if (matchStopByGtfsStopId != null) {
                put("match_stop_by_gtfs_stop_id", listOf(matchStopByGtfsStopId.toString()))
            }
            if (token != null) {
                put("token", listOf(token.toString()))
            }
            if (devid != null) {
                put("devid", listOf(devid.toString()))
            }
            if (signature != null) {
                put("signature", listOf(signature.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v3/search/{search_term}".replace("{" + "search_term" + "}", "$searchTerm"), query = localVariableQuery
        )
        val response = request<V3SearchResult>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as V3SearchResult
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
