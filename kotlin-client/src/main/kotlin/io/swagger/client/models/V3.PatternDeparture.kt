/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.V3StopModel

/**
 * 
 * @param skippedStops The stops to be skipped following the current departure in order.
 * @param stopId Stop identifier
 * @param routeId Route identifier
 * @param runId Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
 * @param runRef Alphanumeric trip/service run identifier
 * @param directionId Direction of travel identifier
 * @param disruptionIds Disruption information identifier(s)
 * @param scheduledDepartureUtc Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
 * @param estimatedDepartureUtc Real-time estimate of departure time and date in ISO 8601 UTC format
 * @param atPlatform Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
 * @param platformNumber Platform number at stop (metropolitan train only; returns null for other modes)
 * @param flags Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
 * @param departureSequence Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
 */
data class V3PatternDeparture (

    /* The stops to be skipped following the current departure in order. */
    val skippedStops: kotlin.Array<V3StopModel>? = null,
    /* Stop identifier */
    val stopId: kotlin.Int? = null,
    /* Route identifier */
    val routeId: kotlin.Int? = null,
    /* Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric */
    val runId: kotlin.Int? = null,
    /* Alphanumeric trip/service run identifier */
    val runRef: kotlin.String? = null,
    /* Direction of travel identifier */
    val directionId: kotlin.Int? = null,
    /* Disruption information identifier(s) */
    val disruptionIds: kotlin.Array<kotlin.Long>? = null,
    /* Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format */
    val scheduledDepartureUtc: java.time.LocalDateTime? = null,
    /* Real-time estimate of departure time and date in ISO 8601 UTC format */
    val estimatedDepartureUtc: java.time.LocalDateTime? = null,
    /* Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes */
    val atPlatform: kotlin.Boolean? = null,
    /* Platform number at stop (metropolitan train only; returns null for other modes) */
    val platformNumber: kotlin.String? = null,
    /* Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag) */
    val flags: kotlin.String? = null,
    /* Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4 */
    val departureSequence: kotlin.Int? = null
) {
}