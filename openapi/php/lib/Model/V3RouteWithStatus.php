<?php
/**
 * V3RouteWithStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3RouteWithStatus Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3RouteWithStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.RouteWithStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'route_service_status' => '\OpenAPI\Client\Model\V3RouteServiceStatus',
        'route_type' => 'int',
        'route_id' => 'int',
        'route_name' => 'string',
        'route_number' => 'string',
        'route_gtfs_id' => 'string',
        'geopath' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'route_service_status' => null,
        'route_type' => 'int32',
        'route_id' => 'int32',
        'route_name' => null,
        'route_number' => null,
        'route_gtfs_id' => null,
        'geopath' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'route_service_status' => false,
        'route_type' => false,
        'route_id' => false,
        'route_name' => false,
        'route_number' => false,
        'route_gtfs_id' => false,
        'geopath' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'route_service_status' => 'route_service_status',
        'route_type' => 'route_type',
        'route_id' => 'route_id',
        'route_name' => 'route_name',
        'route_number' => 'route_number',
        'route_gtfs_id' => 'route_gtfs_id',
        'geopath' => 'geopath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'route_service_status' => 'setRouteServiceStatus',
        'route_type' => 'setRouteType',
        'route_id' => 'setRouteId',
        'route_name' => 'setRouteName',
        'route_number' => 'setRouteNumber',
        'route_gtfs_id' => 'setRouteGtfsId',
        'geopath' => 'setGeopath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'route_service_status' => 'getRouteServiceStatus',
        'route_type' => 'getRouteType',
        'route_id' => 'getRouteId',
        'route_name' => 'getRouteName',
        'route_number' => 'getRouteNumber',
        'route_gtfs_id' => 'getRouteGtfsId',
        'geopath' => 'getGeopath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('route_service_status', $data ?? [], null);
        $this->setIfExists('route_type', $data ?? [], null);
        $this->setIfExists('route_id', $data ?? [], null);
        $this->setIfExists('route_name', $data ?? [], null);
        $this->setIfExists('route_number', $data ?? [], null);
        $this->setIfExists('route_gtfs_id', $data ?? [], null);
        $this->setIfExists('geopath', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets route_service_status
     *
     * @return \OpenAPI\Client\Model\V3RouteServiceStatus|null
     */
    public function getRouteServiceStatus()
    {
        return $this->container['route_service_status'];
    }

    /**
     * Sets route_service_status
     *
     * @param \OpenAPI\Client\Model\V3RouteServiceStatus|null $route_service_status route_service_status
     *
     * @return self
     */
    public function setRouteServiceStatus($route_service_status)
    {
        if (is_null($route_service_status)) {
            throw new \InvalidArgumentException('non-nullable route_service_status cannot be null');
        }
        $this->container['route_service_status'] = $route_service_status;

        return $this;
    }

    /**
     * Gets route_type
     *
     * @return int|null
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param int|null $route_type Transport mode identifier
     *
     * @return self
     */
    public function setRouteType($route_type)
    {
        if (is_null($route_type)) {
            throw new \InvalidArgumentException('non-nullable route_type cannot be null');
        }
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets route_id
     *
     * @return int|null
     */
    public function getRouteId()
    {
        return $this->container['route_id'];
    }

    /**
     * Sets route_id
     *
     * @param int|null $route_id Route identifier
     *
     * @return self
     */
    public function setRouteId($route_id)
    {
        if (is_null($route_id)) {
            throw new \InvalidArgumentException('non-nullable route_id cannot be null');
        }
        $this->container['route_id'] = $route_id;

        return $this;
    }

    /**
     * Gets route_name
     *
     * @return string|null
     */
    public function getRouteName()
    {
        return $this->container['route_name'];
    }

    /**
     * Sets route_name
     *
     * @param string|null $route_name Name of route
     *
     * @return self
     */
    public function setRouteName($route_name)
    {
        if (is_null($route_name)) {
            throw new \InvalidArgumentException('non-nullable route_name cannot be null');
        }
        $this->container['route_name'] = $route_name;

        return $this;
    }

    /**
     * Gets route_number
     *
     * @return string|null
     */
    public function getRouteNumber()
    {
        return $this->container['route_number'];
    }

    /**
     * Sets route_number
     *
     * @param string|null $route_number Route number presented to public (nb. not route_id)
     *
     * @return self
     */
    public function setRouteNumber($route_number)
    {
        if (is_null($route_number)) {
            throw new \InvalidArgumentException('non-nullable route_number cannot be null');
        }
        $this->container['route_number'] = $route_number;

        return $this;
    }

    /**
     * Gets route_gtfs_id
     *
     * @return string|null
     */
    public function getRouteGtfsId()
    {
        return $this->container['route_gtfs_id'];
    }

    /**
     * Sets route_gtfs_id
     *
     * @param string|null $route_gtfs_id GTFS Identifer of the route
     *
     * @return self
     */
    public function setRouteGtfsId($route_gtfs_id)
    {
        if (is_null($route_gtfs_id)) {
            throw new \InvalidArgumentException('non-nullable route_gtfs_id cannot be null');
        }
        $this->container['route_gtfs_id'] = $route_gtfs_id;

        return $this;
    }

    /**
     * Gets geopath
     *
     * @return object[]|null
     */
    public function getGeopath()
    {
        return $this->container['geopath'];
    }

    /**
     * Sets geopath
     *
     * @param object[]|null $geopath GeoPath of the route
     *
     * @return self
     */
    public function setGeopath($geopath)
    {
        if (is_null($geopath)) {
            throw new \InvalidArgumentException('non-nullable geopath cannot be null');
        }
        $this->container['geopath'] = $geopath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


