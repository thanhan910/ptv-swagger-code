/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.V3DisruptionModesResponse;
import org.openapitools.client.model.V3DisruptionResponse;
import org.openapitools.client.model.V3DisruptionsResponse;
import org.openapitools.client.model.V3ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisruptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DisruptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisruptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for disruptionsGetAllDisruptions
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param disruptionModes Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information for all route types. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetAllDisruptionsCall(List<Integer> routeTypes, List<Integer> disruptionModes, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "route_types", routeTypes));
        }

        if (disruptionModes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "disruption_modes", disruptionModes));
        }

        if (disruptionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disruption_status", disruptionStatus));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetAllDisruptionsValidateBeforeCall(List<Integer> routeTypes, List<Integer> disruptionModes, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        return disruptionsGetAllDisruptionsCall(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, _callback);

    }

    /**
     * View all disruptions for all route types
     * 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param disruptionModes Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information for all route types. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionsResponse disruptionsGetAllDisruptions(List<Integer> routeTypes, List<Integer> disruptionModes, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionsResponse> localVarResp = disruptionsGetAllDisruptionsWithHttpInfo(routeTypes, disruptionModes, disruptionStatus, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View all disruptions for all route types
     * 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param disruptionModes Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information for all route types. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionsResponse> disruptionsGetAllDisruptionsWithHttpInfo(List<Integer> routeTypes, List<Integer> disruptionModes, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetAllDisruptionsValidateBeforeCall(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View all disruptions for all route types (asynchronously)
     * 
     * @param routeTypes Filter by route_type; values returned via RouteTypes API (optional)
     * @param disruptionModes Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information for all route types. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetAllDisruptionsAsync(List<Integer> routeTypes, List<Integer> disruptionModes, String disruptionStatus, String token, String devid, String signature, final ApiCallback<V3DisruptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetAllDisruptionsValidateBeforeCall(routeTypes, disruptionModes, disruptionStatus, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disruptionsGetDisruptionById
     * @param disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption information for the specified disruption ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionByIdCall(Long disruptionId, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions/{disruption_id}"
            .replace("{" + "disruption_id" + "}", localVarApiClient.escapeString(disruptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetDisruptionByIdValidateBeforeCall(Long disruptionId, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disruptionId' is set
        if (disruptionId == null) {
            throw new ApiException("Missing the required parameter 'disruptionId' when calling disruptionsGetDisruptionById(Async)");
        }

        return disruptionsGetDisruptionByIdCall(disruptionId, token, devid, signature, _callback);

    }

    /**
     * View a specific disruption
     * 
     * @param disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption information for the specified disruption ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionResponse disruptionsGetDisruptionById(Long disruptionId, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionResponse> localVarResp = disruptionsGetDisruptionByIdWithHttpInfo(disruptionId, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View a specific disruption
     * 
     * @param disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption information for the specified disruption ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionResponse> disruptionsGetDisruptionByIdWithHttpInfo(Long disruptionId, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetDisruptionByIdValidateBeforeCall(disruptionId, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a specific disruption (asynchronously)
     * 
     * @param disruptionId Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption information for the specified disruption ID. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionByIdAsync(Long disruptionId, String token, String devid, String signature, final ApiCallback<V3DisruptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetDisruptionByIdValidateBeforeCall(disruptionId, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disruptionsGetDisruptionModes
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption specific modes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionModesCall(String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions/modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetDisruptionModesValidateBeforeCall(String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        return disruptionsGetDisruptionModesCall(token, devid, signature, _callback);

    }

    /**
     * Get all disruption modes
     * 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionModesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption specific modes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionModesResponse disruptionsGetDisruptionModes(String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionModesResponse> localVarResp = disruptionsGetDisruptionModesWithHttpInfo(token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * Get all disruption modes
     * 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionModesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption specific modes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionModesResponse> disruptionsGetDisruptionModesWithHttpInfo(String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetDisruptionModesValidateBeforeCall(token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionModesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all disruption modes (asynchronously)
     * 
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disruption specific modes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionModesAsync(String token, String devid, String signature, final ApiCallback<V3DisruptionModesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetDisruptionModesValidateBeforeCall(token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionModesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disruptionsGetDisruptionsByRoute
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByRouteCall(Integer routeId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions/route/{route_id}"
            .replace("{" + "route_id" + "}", localVarApiClient.escapeString(routeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disruptionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disruption_status", disruptionStatus));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetDisruptionsByRouteValidateBeforeCall(Integer routeId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling disruptionsGetDisruptionsByRoute(Async)");
        }

        return disruptionsGetDisruptionsByRouteCall(routeId, disruptionStatus, token, devid, signature, _callback);

    }

    /**
     * View all disruptions for a particular route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionsResponse disruptionsGetDisruptionsByRoute(Integer routeId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionsResponse> localVarResp = disruptionsGetDisruptionsByRouteWithHttpInfo(routeId, disruptionStatus, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View all disruptions for a particular route
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionsResponse> disruptionsGetDisruptionsByRouteWithHttpInfo(Integer routeId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetDisruptionsByRouteValidateBeforeCall(routeId, disruptionStatus, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View all disruptions for a particular route (asynchronously)
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByRouteAsync(Integer routeId, String disruptionStatus, String token, String devid, String signature, final ApiCallback<V3DisruptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetDisruptionsByRouteValidateBeforeCall(routeId, disruptionStatus, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disruptionsGetDisruptionsByRouteAndStop
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route and stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByRouteAndStopCall(Integer routeId, Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions/route/{route_id}/stop/{stop_id}"
            .replace("{" + "route_id" + "}", localVarApiClient.escapeString(routeId.toString()))
            .replace("{" + "stop_id" + "}", localVarApiClient.escapeString(stopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disruptionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disruption_status", disruptionStatus));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetDisruptionsByRouteAndStopValidateBeforeCall(Integer routeId, Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeId' is set
        if (routeId == null) {
            throw new ApiException("Missing the required parameter 'routeId' when calling disruptionsGetDisruptionsByRouteAndStop(Async)");
        }

        // verify the required parameter 'stopId' is set
        if (stopId == null) {
            throw new ApiException("Missing the required parameter 'stopId' when calling disruptionsGetDisruptionsByRouteAndStop(Async)");
        }

        return disruptionsGetDisruptionsByRouteAndStopCall(routeId, stopId, disruptionStatus, token, devid, signature, _callback);

    }

    /**
     * View all disruptions for a particular route and stop
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route and stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionsResponse disruptionsGetDisruptionsByRouteAndStop(Integer routeId, Integer stopId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionsResponse> localVarResp = disruptionsGetDisruptionsByRouteAndStopWithHttpInfo(routeId, stopId, disruptionStatus, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View all disruptions for a particular route and stop
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route and stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionsResponse> disruptionsGetDisruptionsByRouteAndStopWithHttpInfo(Integer routeId, Integer stopId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetDisruptionsByRouteAndStopValidateBeforeCall(routeId, stopId, disruptionStatus, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View all disruptions for a particular route and stop (asynchronously)
     * 
     * @param routeId Identifier of route; values returned by Routes API - v3/routes (required)
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified route and stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByRouteAndStopAsync(Integer routeId, Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback<V3DisruptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetDisruptionsByRouteAndStopValidateBeforeCall(routeId, stopId, disruptionStatus, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disruptionsGetDisruptionsByStop
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByStopCall(Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/disruptions/stop/{stop_id}"
            .replace("{" + "stop_id" + "}", localVarApiClient.escapeString(stopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disruptionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disruption_status", disruptionStatus));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devid", devid));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disruptionsGetDisruptionsByStopValidateBeforeCall(Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopId' is set
        if (stopId == null) {
            throw new ApiException("Missing the required parameter 'stopId' when calling disruptionsGetDisruptionsByStop(Async)");
        }

        return disruptionsGetDisruptionsByStopCall(stopId, disruptionStatus, token, devid, signature, _callback);

    }

    /**
     * View all disruptions for a particular stop
     * 
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return V3DisruptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public V3DisruptionsResponse disruptionsGetDisruptionsByStop(Integer stopId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        ApiResponse<V3DisruptionsResponse> localVarResp = disruptionsGetDisruptionsByStopWithHttpInfo(stopId, disruptionStatus, token, devid, signature);
        return localVarResp.getData();
    }

    /**
     * View all disruptions for a particular stop
     * 
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @return ApiResponse&lt;V3DisruptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V3DisruptionsResponse> disruptionsGetDisruptionsByStopWithHttpInfo(Integer stopId, String disruptionStatus, String token, String devid, String signature) throws ApiException {
        okhttp3.Call localVarCall = disruptionsGetDisruptionsByStopValidateBeforeCall(stopId, disruptionStatus, token, devid, signature, null);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View all disruptions for a particular stop (asynchronously)
     * 
     * @param stopId Identifier of stop; values returned by Stops API - v3/stops (required)
     * @param disruptionStatus Filter by status of disruption (optional)
     * @param token Please ignore (optional)
     * @param devid Your developer id (optional)
     * @param signature Authentication signature for request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All disruption information (if any exists) for the specified stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disruptionsGetDisruptionsByStopAsync(Integer stopId, String disruptionStatus, String token, String devid, String signature, final ApiCallback<V3DisruptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disruptionsGetDisruptionsByStopValidateBeforeCall(stopId, disruptionStatus, token, devid, signature, _callback);
        Type localVarReturnType = new TypeToken<V3DisruptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
