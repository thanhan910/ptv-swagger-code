/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ptv.Api.Client.Client.OpenAPIDateConverter;

namespace Ptv.Api.Client.Model
{
    /// <summary>
    /// V3VehiclePosition
    /// </summary>
    [DataContract(Name = "V3.VehiclePosition")]
    public partial class V3VehiclePosition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3VehiclePosition" /> class.
        /// </summary>
        /// <param name="latitude">Geographic coordinate of latitude of the vehicle when known. May be null.  Only available for some bus runs..</param>
        /// <param name="longitude">Geographic coordinate of longitude of the vehicle when known.   Only available for some bus runs..</param>
        /// <param name="easting">CIS - Metro Train Vehicle Location Easting coordinate.</param>
        /// <param name="northing">CIS - Metro Train Vehicle Location Northing coordinate.</param>
        /// <param name="direction">CIS - Metro Train Vehicle Location Direction.</param>
        /// <param name="bearing">Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.  Only available for some bus runs..</param>
        /// <param name="supplier">Supplier of vehicle position data..</param>
        /// <param name="datetimeUtc">Date and time that the vehicle position data was supplied..</param>
        /// <param name="expiryTime">CIS - Metro Train Vehicle Location data expiry time.</param>
        public V3VehiclePosition(double latitude = default(double), double longitude = default(double), double easting = default(double), double northing = default(double), string direction = default(string), double bearing = default(double), string supplier = default(string), DateTime datetimeUtc = default(DateTime), DateTime expiryTime = default(DateTime))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Easting = easting;
            this.Northing = northing;
            this.Direction = direction;
            this.Bearing = bearing;
            this.Supplier = supplier;
            this.DatetimeUtc = datetimeUtc;
            this.ExpiryTime = expiryTime;
        }

        /// <summary>
        /// Geographic coordinate of latitude of the vehicle when known. May be null.  Only available for some bus runs.
        /// </summary>
        /// <value>Geographic coordinate of latitude of the vehicle when known. May be null.  Only available for some bus runs.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Geographic coordinate of longitude of the vehicle when known.   Only available for some bus runs.
        /// </summary>
        /// <value>Geographic coordinate of longitude of the vehicle when known.   Only available for some bus runs.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// CIS - Metro Train Vehicle Location Easting coordinate
        /// </summary>
        /// <value>CIS - Metro Train Vehicle Location Easting coordinate</value>
        [DataMember(Name = "easting", EmitDefaultValue = false)]
        public double Easting { get; set; }

        /// <summary>
        /// CIS - Metro Train Vehicle Location Northing coordinate
        /// </summary>
        /// <value>CIS - Metro Train Vehicle Location Northing coordinate</value>
        [DataMember(Name = "northing", EmitDefaultValue = false)]
        public double Northing { get; set; }

        /// <summary>
        /// CIS - Metro Train Vehicle Location Direction
        /// </summary>
        /// <value>CIS - Metro Train Vehicle Location Direction</value>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public string Direction { get; set; }

        /// <summary>
        /// Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.  Only available for some bus runs.
        /// </summary>
        /// <value>Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null.  Only available for some bus runs.</value>
        [DataMember(Name = "bearing", EmitDefaultValue = false)]
        public double Bearing { get; set; }

        /// <summary>
        /// Supplier of vehicle position data.
        /// </summary>
        /// <value>Supplier of vehicle position data.</value>
        [DataMember(Name = "supplier", EmitDefaultValue = false)]
        public string Supplier { get; set; }

        /// <summary>
        /// Date and time that the vehicle position data was supplied.
        /// </summary>
        /// <value>Date and time that the vehicle position data was supplied.</value>
        [DataMember(Name = "datetime_utc", EmitDefaultValue = false)]
        public DateTime DatetimeUtc { get; set; }

        /// <summary>
        /// CIS - Metro Train Vehicle Location data expiry time
        /// </summary>
        /// <value>CIS - Metro Train Vehicle Location data expiry time</value>
        [DataMember(Name = "expiry_time", EmitDefaultValue = false)]
        public DateTime ExpiryTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3VehiclePosition {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Easting: ").Append(Easting).Append("\n");
            sb.Append("  Northing: ").Append(Northing).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Bearing: ").Append(Bearing).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DatetimeUtc: ").Append(DatetimeUtc).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
