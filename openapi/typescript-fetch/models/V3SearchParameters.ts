/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria\'s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V3SearchParameters
 */
export interface V3SearchParameters {
    /**
     * Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
     * @type {Array<number>}
     * @memberof V3SearchParameters
     */
    routeTypes?: Array<V3SearchParametersRouteTypesEnum>;
    /**
     * Filter by geographic coordinate of latitude
     * @type {number}
     * @memberof V3SearchParameters
     */
    latitude?: number;
    /**
     * Filter by geographic coordinate of longitude
     * @type {number}
     * @memberof V3SearchParameters
     */
    longitude?: number;
    /**
     * Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
     * @type {number}
     * @memberof V3SearchParameters
     */
    maxDistance?: number;
    /**
     * Placeholder for future development; currently unavailable
     * @type {boolean}
     * @memberof V3SearchParameters
     */
    includeAddresses?: boolean;
    /**
     * Indicates if outlets will be returned in response (default = true)
     * @type {boolean}
     * @memberof V3SearchParameters
     */
    includeOutlets?: boolean;
    /**
     * Indicates whether to find stops by suburbs in the search term (default = true)
     * @type {boolean}
     * @memberof V3SearchParameters
     */
    matchStopBySuburb?: boolean;
    /**
     * Indicates whether to find routes by suburbs in the search term (default = true)
     * @type {boolean}
     * @memberof V3SearchParameters
     */
    matchRouteBySuburb?: boolean;
    /**
     * Indicates whether to search for stops according to a metlink stop ID (default = false)
     * @type {boolean}
     * @memberof V3SearchParameters
     */
    matchStopByGtfsStopId?: boolean;
}


/**
 * @export
 */
export const V3SearchParametersRouteTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type V3SearchParametersRouteTypesEnum = typeof V3SearchParametersRouteTypesEnum[keyof typeof V3SearchParametersRouteTypesEnum];


/**
 * Check if a given object implements the V3SearchParameters interface.
 */
export function instanceOfV3SearchParameters(value: object): boolean {
    return true;
}

export function V3SearchParametersFromJSON(json: any): V3SearchParameters {
    return V3SearchParametersFromJSONTyped(json, false);
}

export function V3SearchParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): V3SearchParameters {
    if (json == null) {
        return json;
    }
    return {
        
        'routeTypes': json['route_types'] == null ? undefined : json['route_types'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'maxDistance': json['max_distance'] == null ? undefined : json['max_distance'],
        'includeAddresses': json['include_addresses'] == null ? undefined : json['include_addresses'],
        'includeOutlets': json['include_outlets'] == null ? undefined : json['include_outlets'],
        'matchStopBySuburb': json['match_stop_by_suburb'] == null ? undefined : json['match_stop_by_suburb'],
        'matchRouteBySuburb': json['match_route_by_suburb'] == null ? undefined : json['match_route_by_suburb'],
        'matchStopByGtfsStopId': json['match_stop_by_gtfs_stop_id'] == null ? undefined : json['match_stop_by_gtfs_stop_id'],
    };
}

export function V3SearchParametersToJSON(value?: V3SearchParameters | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'route_types': value['routeTypes'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'max_distance': value['maxDistance'],
        'include_addresses': value['includeAddresses'],
        'include_outlets': value['includeOutlets'],
        'match_stop_by_suburb': value['matchStopBySuburb'],
        'match_route_by_suburb': value['matchRouteBySuburb'],
        'match_stop_by_gtfs_stop_id': value['matchStopByGtfsStopId'],
    };
}

