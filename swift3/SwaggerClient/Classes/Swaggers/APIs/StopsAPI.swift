//
// StopsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class StopsAPI: APIBase {
    /**
     * enum for parameter routeType
     */
    public enum RouteType_stopsStopDetails: Int32 { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View facilities at a specific stop (Metro and V/Line stations only)
     - parameter stopId: (path) Identifier of stop; values returned by Stops API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter stopLocation: (query) Indicates if stop location information will be returned (default &#x3D; false) (optional)
     - parameter stopAmenities: (query) Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     - parameter stopAccessibility: (query) Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     - parameter stopContact: (query) Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     - parameter stopTicket: (query) Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     - parameter gtfs: (query) Incdicates whether the stop_id is a GTFS ID or not (optional)
     - parameter stopStaffing: (query) Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopDetails(stopId: Int32, routeType: RouteType_stopsStopDetails, stopLocation: Bool? = nil, stopAmenities: Bool? = nil, stopAccessibility: Bool? = nil, stopContact: Bool? = nil, stopTicket: Bool? = nil, gtfs: Bool? = nil, stopStaffing: Bool? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopResponse?, _ error: ErrorResponse?) -> Void)) {
        stopsStopDetailsWithRequestBuilder(stopId: stopId, routeType: routeType, stopLocation: stopLocation, stopAmenities: stopAmenities, stopAccessibility: stopAccessibility, stopContact: stopContact, stopTicket: stopTicket, gtfs: gtfs, stopStaffing: stopStaffing, stopDisruptions: stopDisruptions, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View facilities at a specific stop (Metro and V/Line stations only)
     - GET /v3/stops/{stop_id}/route_type/{route_type}

     - examples: [{contentType=application/json, example={
  "stop" : {
    "station_description" : "station_description",
    "routes" : [ { }, { } ],
    "stop_amenities" : {
      "taxi_rank" : true,
      "toilet" : true,
      "car_parking" : "car_parking",
      "cctv" : true
    },
    "route_type" : 6,
    "stop_staffing" : {
      "sun_am_to" : "sun_am_to",
      "sun_am_from" : "sun_am_from",
      "sun_pm_to" : "sun_pm_to",
      "tue_am_from" : "tue_am_from",
      "ph_from" : "ph_from",
      "sat_am_from" : "sat_am_from",
      "wed_am_from" : "wed_am_from",
      "ph_additional_text" : "ph_additional_text",
      "sun_pm_from" : "sun_pm_from",
      "thu_pm_to" : "thu_pm_to",
      "fri_am_to" : "fri_am_to",
      "fri_pm_from" : "fri_pm_from",
      "sat_pm_from" : "sat_pm_from",
      "tue_am_to" : "tue_am_to",
      "tue_pm_from" : "tue_pm_from",
      "sat_am_to" : "sat_am_to",
      "thu_pm_from" : "thu_pm_from",
      "mon_am_to" : "mon_am_to",
      "mon_pm_to" : "mon_pm_to",
      "fri_am_from" : "fri_am_from",
      "fri_pm_to" : "fri_pm_to",
      "thu_am_from" : "thu_am_from",
      "thu_am_to" : "thu_am_to",
      "mon_pm_from" : "mon_pm_from",
      "sat_pm_to" : "sat_pm_to",
      "tue_pm_to" : "tue_pm_to",
      "ph_to" : "ph_to",
      "wed_pm_from" : "wed_pm_from",
      "wed_pm_To" : "wed_pm_To",
      "mon_am_from" : "mon_am_from",
      "wed_am_to" : "wed_am_to"
    },
    "stop_id" : 2,
    "stop_location" : {
      "gps" : {
        "latitude" : 1.4658129,
        "longitude" : 5.962134
      }
    },
    "stop_accessibility" : {
      "wheelchair" : {
        "parking" : true,
        "raised_platform_shelther" : true,
        "toilet" : true,
        "low_ticket_counter" : true,
        "ramp" : true,
        "accessible_ramp" : true,
        "manouvering" : true,
        "steep_ramp" : true,
        "telephone" : true,
        "secondary_path" : true,
        "raised_platform" : true
      },
      "escalator" : true,
      "hearing_loop" : true,
      "waiting_room" : true,
      "stairs" : true,
      "platform_number" : 5,
      "lift" : true,
      "tactile_ground_surface_indicator" : true,
      "lighting" : true,
      "stop_accessible" : true,
      "audio_customer_information" : true
    },
    "stop_landmark" : "stop_landmark",
    "station_type" : "station_type",
    "disruption_ids" : [ 0, 0 ],
    "stop_name" : "stop_name"
  },
  "disruptions" : {
    "key" : {
      "last_updated" : "2000-01-23T04:56:07.000+00:00",
      "from_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_type" : "disruption_type",
      "published_on" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "display_on_board" : true,
      "title" : "title",
      "url" : "url",
      "routes" : [ {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      }, {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      } ],
      "disruption_id" : 6,
      "colour" : "colour",
      "to_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_status" : "disruption_status",
      "stops" : [ {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      }, {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      } ],
      "display_status" : true
    }
  },
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter stopId: (path) Identifier of stop; values returned by Stops API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter stopLocation: (query) Indicates if stop location information will be returned (default &#x3D; false) (optional)
     - parameter stopAmenities: (query) Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     - parameter stopAccessibility: (query) Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     - parameter stopContact: (query) Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     - parameter stopTicket: (query) Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     - parameter gtfs: (query) Incdicates whether the stop_id is a GTFS ID or not (optional)
     - parameter stopStaffing: (query) Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopResponse> 
     */
    open class func stopsStopDetailsWithRequestBuilder(stopId: Int32, routeType: RouteType_stopsStopDetails, stopLocation: Bool? = nil, stopAmenities: Bool? = nil, stopAccessibility: Bool? = nil, stopContact: Bool? = nil, stopTicket: Bool? = nil, gtfs: Bool? = nil, stopStaffing: Bool? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopResponse> {
        var path = "/v3/stops/{stop_id}/route_type/{route_type}"
        let stopIdPreEscape = "\(stopId)"
        let stopIdPostEscape = stopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stop_id}", with: stopIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "stop_location": stopLocation,
                        "stop_amenities": stopAmenities,
                        "stop_accessibility": stopAccessibility,
                        "stop_contact": stopContact,
                        "stop_ticket": stopTicket,
                        "gtfs": gtfs,
                        "stop_staffing": stopStaffing,
                        "stop_disruptions": stopDisruptions,
                        "token": token,
                        "devid": devid,
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeTypes
     */
    public enum RouteTypes_stopsStopsByGeolocation: String { 
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
    }

    /**
     View all stops near a specific location
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopsByGeolocation(latitude: Float, longitude: Float, routeTypes: [Int32]? = nil, maxResults: Int32? = nil, maxDistance: Double? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopsByDistanceResponse?, _ error: ErrorResponse?) -> Void)) {
        stopsStopsByGeolocationWithRequestBuilder(latitude: latitude, longitude: longitude, routeTypes: routeTypes, maxResults: maxResults, maxDistance: maxDistance, stopDisruptions: stopDisruptions, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View all stops near a specific location
     - GET /v3/stops/location/{latitude},{longitude}

     - examples: [{contentType=application/json, example={
  "disruptions" : {
    "key" : {
      "last_updated" : "2000-01-23T04:56:07.000+00:00",
      "from_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_type" : "disruption_type",
      "published_on" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "display_on_board" : true,
      "title" : "title",
      "url" : "url",
      "routes" : [ {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      }, {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      } ],
      "disruption_id" : 6,
      "colour" : "colour",
      "to_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_status" : "disruption_status",
      "stops" : [ {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      }, {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      } ],
      "display_status" : true
    }
  },
  "stops" : [ {
    "routes" : [ { }, { } ],
    "stop_longitude" : 2.302136,
    "stop_sequence" : 7,
    "stop_id" : 1,
    "route_type" : 5,
    "stop_landmark" : "stop_landmark",
    "stop_suburb" : "stop_suburb",
    "disruption_ids" : [ 0, 0 ],
    "stop_distance" : 6.0274563,
    "stop_name" : "stop_name",
    "stop_latitude" : 5.637377
  }, {
    "routes" : [ { }, { } ],
    "stop_longitude" : 2.302136,
    "stop_sequence" : 7,
    "stop_id" : 1,
    "route_type" : 5,
    "stop_landmark" : "stop_landmark",
    "stop_suburb" : "stop_suburb",
    "disruption_ids" : [ 0, 0 ],
    "stop_distance" : 6.0274563,
    "stop_name" : "stop_name",
    "stop_latitude" : 5.637377
  } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopsByDistanceResponse> 
     */
    open class func stopsStopsByGeolocationWithRequestBuilder(latitude: Float, longitude: Float, routeTypes: [Int32]? = nil, maxResults: Int32? = nil, maxDistance: Double? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopsByDistanceResponse> {
        var path = "/v3/stops/location/{latitude},{longitude}"
        let latitudePreEscape = "\(latitude)"
        let latitudePostEscape = latitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{latitude}", with: latitudePostEscape, options: .literal, range: nil)
        let longitudePreEscape = "\(longitude)"
        let longitudePostEscape = longitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{longitude}", with: longitudePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "route_types": routeTypes,
                        "max_results": maxResults?.encodeToJSON(),
                        "max_distance": maxDistance,
                        "stop_disruptions": stopDisruptions,
                        "token": token,
                        "devid": devid,
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopsByDistanceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_stopsStopsForRoute: Int32 { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View all stops on a specific route
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter directionId: (query) An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)
     - parameter geopathUtc: (query) Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopsForRoute(routeId: Int32, routeType: RouteType_stopsStopsForRoute, directionId: Int32? = nil, stopDisruptions: Bool? = nil, includeGeopath: Bool? = nil, geopathUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopsOnRouteResponse?, _ error: ErrorResponse?) -> Void)) {
        stopsStopsForRouteWithRequestBuilder(routeId: routeId, routeType: routeType, directionId: directionId, stopDisruptions: stopDisruptions, includeGeopath: includeGeopath, geopathUtc: geopathUtc, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View all stops on a specific route
     - GET /v3/stops/route/{route_id}/route_type/{route_type}

     - examples: [{contentType=application/json, example={
  "disruptions" : {
    "key" : {
      "last_updated" : "2000-01-23T04:56:07.000+00:00",
      "from_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_type" : "disruption_type",
      "published_on" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "display_on_board" : true,
      "title" : "title",
      "url" : "url",
      "routes" : [ {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      }, {
        "route_id" : 2,
        "route_name" : "route_name",
        "route_type" : 1,
        "route_number" : "route_number",
        "route_gtfs_id" : "route_gtfs_id",
        "direction" : {
          "service_time" : "service_time",
          "direction_id" : 6,
          "direction_name" : "direction_name",
          "route_direction_id" : 6
        }
      } ],
      "disruption_id" : 6,
      "colour" : "colour",
      "to_date" : "2000-01-23T04:56:07.000+00:00",
      "disruption_status" : "disruption_status",
      "stops" : [ {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      }, {
        "stop_id" : 5,
        "stop_name" : "stop_name"
      } ],
      "display_status" : true
    }
  },
  "stops" : [ {
    "stop_ticket" : {
      "ticket_type" : "ticket_type",
      "vline_reservation" : true,
      "zone" : "zone",
      "ticket_machine" : true,
      "ticket_zones" : [ 7, 7 ],
      "is_free_fare_zone" : true,
      "ticket_checks" : true
    },
    "stop_longitude" : 5.962134,
    "stop_sequence" : 5,
    "route_type" : 6,
    "stop_id" : 2,
    "stop_landmark" : "stop_landmark",
    "stop_suburb" : "stop_suburb",
    "disruption_ids" : [ 0, 0 ],
    "stop_name" : "stop_name",
    "stop_latitude" : 1.4658129
  }, {
    "stop_ticket" : {
      "ticket_type" : "ticket_type",
      "vline_reservation" : true,
      "zone" : "zone",
      "ticket_machine" : true,
      "ticket_zones" : [ 7, 7 ],
      "is_free_fare_zone" : true,
      "ticket_checks" : true
    },
    "stop_longitude" : 5.962134,
    "stop_sequence" : 5,
    "route_type" : 6,
    "stop_id" : 2,
    "stop_landmark" : "stop_landmark",
    "stop_suburb" : "stop_suburb",
    "disruption_ids" : [ 0, 0 ],
    "stop_name" : "stop_name",
    "stop_latitude" : 1.4658129
  } ],
  "geopath" : [ { }, { } ],
  "status" : {
    "health" : 6,
    "version" : "version"
  }
}}]
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter directionId: (query) An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter includeGeopath: (query) Indicates if geopath data will be returned (default &#x3D; false) (optional)
     - parameter geopathUtc: (query) Filter geopaths by date (ISO 8601 UTC format) (default &#x3D; current date) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopsOnRouteResponse> 
     */
    open class func stopsStopsForRouteWithRequestBuilder(routeId: Int32, routeType: RouteType_stopsStopsForRoute, directionId: Int32? = nil, stopDisruptions: Bool? = nil, includeGeopath: Bool? = nil, geopathUtc: Date? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopsOnRouteResponse> {
        var path = "/v3/stops/route/{route_id}/route_type/{route_type}"
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "direction_id": directionId?.encodeToJSON(),
                        "stop_disruptions": stopDisruptions,
                        "include_geopath": includeGeopath,
                        "geopath_utc": geopathUtc?.encodeToJSON(),
                        "token": token,
                        "devid": devid,
                        "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopsOnRouteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
