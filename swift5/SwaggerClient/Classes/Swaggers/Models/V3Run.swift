//
// V3Run.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct V3Run: Codable {

    /** Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric */
    public var runId: Int?
    /** Alphanumeric trip/service run identifier */
    public var runRef: String?
    /** Route identifier */
    public var routeId: Int?
    /** Transport mode identifier */
    public var routeType: Int?
    /** stop_id of final stop of run */
    public var finalStopId: Int?
    /** Name of destination of run */
    public var destinationName: String?
    /** Status of metropolitan train run; returns \&quot;scheduled\&quot; for other modes */
    public var status: String?
    /** Direction of travel identifier */
    public var directionId: Int?
    /** Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id. */
    public var runSequence: Int?
    /** The number of remaining skipped/express stations for the run/service from a stop */
    public var expressStopCount: Int?
    public var vehiclePosition: V3VehiclePosition?
    public var vehicleDescriptor: V3VehicleDescriptor?
    /** Geopath of the route */
    public var geopath: [Any]?

    public init(runId: Int? = nil, runRef: String? = nil, routeId: Int? = nil, routeType: Int? = nil, finalStopId: Int? = nil, destinationName: String? = nil, status: String? = nil, directionId: Int? = nil, runSequence: Int? = nil, expressStopCount: Int? = nil, vehiclePosition: V3VehiclePosition? = nil, vehicleDescriptor: V3VehicleDescriptor? = nil, geopath: [Any]? = nil) {
        self.runId = runId
        self.runRef = runRef
        self.routeId = routeId
        self.routeType = routeType
        self.finalStopId = finalStopId
        self.destinationName = destinationName
        self.status = status
        self.directionId = directionId
        self.runSequence = runSequence
        self.expressStopCount = expressStopCount
        self.vehiclePosition = vehiclePosition
        self.vehicleDescriptor = vehicleDescriptor
        self.geopath = geopath
    }

    public enum CodingKeys: String, CodingKey { 
        case runId = "run_id"
        case runRef = "run_ref"
        case routeId = "route_id"
        case routeType = "route_type"
        case finalStopId = "final_stop_id"
        case destinationName = "destination_name"
        case status
        case directionId = "direction_id"
        case runSequence = "run_sequence"
        case expressStopCount = "express_stop_count"
        case vehiclePosition = "vehicle_position"
        case vehicleDescriptor = "vehicle_descriptor"
        case geopath
    }

}
