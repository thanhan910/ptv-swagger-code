/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// V3SiriProductionTimetableSubscriptionRequest
    /// </summary>
    [DataContract]
        public partial class V3SiriProductionTimetableSubscriptionRequest :  IEquatable<V3SiriProductionTimetableSubscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Siri Message Format &#x27;xml&#x27; or &#x27;json&#x27;
        /// </summary>
        /// <value>Siri Message Format &#x27;xml&#x27; or &#x27;json&#x27;</value>
                public enum SiriFormatEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1        }
        /// <summary>
        /// Siri Message Format &#x27;xml&#x27; or &#x27;json&#x27;
        /// </summary>
        /// <value>Siri Message Format &#x27;xml&#x27; or &#x27;json&#x27;</value>
        [DataMember(Name="siri_format", EmitDefaultValue=false)]
        public SiriFormatEnum SiriFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3SiriProductionTimetableSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="startTime">Siri Start Time of the Validity Period (required).</param>
        /// <param name="endTime">Siri End Time of the Validity Period (required).</param>
        /// <param name="subscriberRef">Siri Subscriber Ref (required).</param>
        /// <param name="subscriptionRef">Siri Subscription Ref - Unique to a Subscriber Ref (required).</param>
        /// <param name="siriFormat">Siri Message Format &#x27;xml&#x27; or &#x27;json&#x27; (required).</param>
        /// <param name="siriVersion">Siri Message Version &#x27;1.3&#x27; or &#x27;2.0&#x27; (required).</param>
        /// <param name="consumerAddress">Siri Consumer Address - Baseline and Updates will be sent to this address (required).</param>
        /// <param name="initialTerminationTime">Siri Initial Termination Time - Expiry of the subscription (required).</param>
        /// <param name="topics">topics (required).</param>
        public V3SiriProductionTimetableSubscriptionRequest(DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string subscriberRef = default(string), string subscriptionRef = default(string), SiriFormatEnum siriFormat = default(SiriFormatEnum), string siriVersion = default(string), string consumerAddress = default(string), DateTime? initialTerminationTime = default(DateTime?), List<V3SiriSubscriptionTopic> topics = default(List<V3SiriSubscriptionTopic>))
        {
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            // to ensure "subscriberRef" is required (not null)
            if (subscriberRef == null)
            {
                throw new InvalidDataException("subscriberRef is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.SubscriberRef = subscriberRef;
            }
            // to ensure "subscriptionRef" is required (not null)
            if (subscriptionRef == null)
            {
                throw new InvalidDataException("subscriptionRef is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.SubscriptionRef = subscriptionRef;
            }
            // to ensure "siriFormat" is required (not null)
            if (siriFormat == null)
            {
                throw new InvalidDataException("siriFormat is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.SiriFormat = siriFormat;
            }
            // to ensure "siriVersion" is required (not null)
            if (siriVersion == null)
            {
                throw new InvalidDataException("siriVersion is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.SiriVersion = siriVersion;
            }
            // to ensure "consumerAddress" is required (not null)
            if (consumerAddress == null)
            {
                throw new InvalidDataException("consumerAddress is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.ConsumerAddress = consumerAddress;
            }
            // to ensure "initialTerminationTime" is required (not null)
            if (initialTerminationTime == null)
            {
                throw new InvalidDataException("initialTerminationTime is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.InitialTerminationTime = initialTerminationTime;
            }
            // to ensure "topics" is required (not null)
            if (topics == null)
            {
                throw new InvalidDataException("topics is a required property for V3SiriProductionTimetableSubscriptionRequest and cannot be null");
            }
            else
            {
                this.Topics = topics;
            }
        }
        
        /// <summary>
        /// Siri Start Time of the Validity Period
        /// </summary>
        /// <value>Siri Start Time of the Validity Period</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Siri End Time of the Validity Period
        /// </summary>
        /// <value>Siri End Time of the Validity Period</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Siri Subscriber Ref
        /// </summary>
        /// <value>Siri Subscriber Ref</value>
        [DataMember(Name="subscriber_ref", EmitDefaultValue=false)]
        public string SubscriberRef { get; set; }

        /// <summary>
        /// Siri Subscription Ref - Unique to a Subscriber Ref
        /// </summary>
        /// <value>Siri Subscription Ref - Unique to a Subscriber Ref</value>
        [DataMember(Name="subscription_ref", EmitDefaultValue=false)]
        public string SubscriptionRef { get; set; }


        /// <summary>
        /// Siri Message Version &#x27;1.3&#x27; or &#x27;2.0&#x27;
        /// </summary>
        /// <value>Siri Message Version &#x27;1.3&#x27; or &#x27;2.0&#x27;</value>
        [DataMember(Name="siri_version", EmitDefaultValue=false)]
        public string SiriVersion { get; set; }

        /// <summary>
        /// Siri Consumer Address - Baseline and Updates will be sent to this address
        /// </summary>
        /// <value>Siri Consumer Address - Baseline and Updates will be sent to this address</value>
        [DataMember(Name="consumer_address", EmitDefaultValue=false)]
        public string ConsumerAddress { get; set; }

        /// <summary>
        /// Siri Initial Termination Time - Expiry of the subscription
        /// </summary>
        /// <value>Siri Initial Termination Time - Expiry of the subscription</value>
        [DataMember(Name="initial_termination_time", EmitDefaultValue=false)]
        public DateTime? InitialTerminationTime { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public List<V3SiriSubscriptionTopic> Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3SiriProductionTimetableSubscriptionRequest {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SubscriberRef: ").Append(SubscriberRef).Append("\n");
            sb.Append("  SubscriptionRef: ").Append(SubscriptionRef).Append("\n");
            sb.Append("  SiriFormat: ").Append(SiriFormat).Append("\n");
            sb.Append("  SiriVersion: ").Append(SiriVersion).Append("\n");
            sb.Append("  ConsumerAddress: ").Append(ConsumerAddress).Append("\n");
            sb.Append("  InitialTerminationTime: ").Append(InitialTerminationTime).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3SiriProductionTimetableSubscriptionRequest);
        }

        /// <summary>
        /// Returns true if V3SiriProductionTimetableSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of V3SiriProductionTimetableSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3SiriProductionTimetableSubscriptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.SubscriberRef == input.SubscriberRef ||
                    (this.SubscriberRef != null &&
                    this.SubscriberRef.Equals(input.SubscriberRef))
                ) && 
                (
                    this.SubscriptionRef == input.SubscriptionRef ||
                    (this.SubscriptionRef != null &&
                    this.SubscriptionRef.Equals(input.SubscriptionRef))
                ) && 
                (
                    this.SiriFormat == input.SiriFormat ||
                    (this.SiriFormat != null &&
                    this.SiriFormat.Equals(input.SiriFormat))
                ) && 
                (
                    this.SiriVersion == input.SiriVersion ||
                    (this.SiriVersion != null &&
                    this.SiriVersion.Equals(input.SiriVersion))
                ) && 
                (
                    this.ConsumerAddress == input.ConsumerAddress ||
                    (this.ConsumerAddress != null &&
                    this.ConsumerAddress.Equals(input.ConsumerAddress))
                ) && 
                (
                    this.InitialTerminationTime == input.InitialTerminationTime ||
                    (this.InitialTerminationTime != null &&
                    this.InitialTerminationTime.Equals(input.InitialTerminationTime))
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    input.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.SubscriberRef != null)
                    hashCode = hashCode * 59 + this.SubscriberRef.GetHashCode();
                if (this.SubscriptionRef != null)
                    hashCode = hashCode * 59 + this.SubscriptionRef.GetHashCode();
                if (this.SiriFormat != null)
                    hashCode = hashCode * 59 + this.SiriFormat.GetHashCode();
                if (this.SiriVersion != null)
                    hashCode = hashCode * 59 + this.SiriVersion.GetHashCode();
                if (this.ConsumerAddress != null)
                    hashCode = hashCode * 59 + this.ConsumerAddress.GetHashCode();
                if (this.InitialTerminationTime != null)
                    hashCode = hashCode * 59 + this.InitialTerminationTime.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
