<?php
/**
 * V3Run
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V3Run Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V3Run implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V3.Run';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'run_id' => 'int',
        'run_ref' => 'string',
        'route_id' => 'int',
        'route_type' => 'int',
        'final_stop_id' => 'int',
        'destination_name' => 'string',
        'status' => 'string',
        'direction_id' => 'int',
        'run_sequence' => 'int',
        'express_stop_count' => 'int',
        'vehicle_position' => '\OpenAPI\Client\Model\V3VehiclePosition',
        'vehicle_descriptor' => '\OpenAPI\Client\Model\V3VehicleDescriptor',
        'geopath' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'run_id' => 'int32',
        'run_ref' => null,
        'route_id' => 'int32',
        'route_type' => 'int32',
        'final_stop_id' => 'int32',
        'destination_name' => null,
        'status' => null,
        'direction_id' => 'int32',
        'run_sequence' => 'int32',
        'express_stop_count' => 'int32',
        'vehicle_position' => null,
        'vehicle_descriptor' => null,
        'geopath' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'run_id' => false,
        'run_ref' => false,
        'route_id' => false,
        'route_type' => false,
        'final_stop_id' => false,
        'destination_name' => false,
        'status' => false,
        'direction_id' => false,
        'run_sequence' => false,
        'express_stop_count' => false,
        'vehicle_position' => false,
        'vehicle_descriptor' => false,
        'geopath' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'run_id' => 'run_id',
        'run_ref' => 'run_ref',
        'route_id' => 'route_id',
        'route_type' => 'route_type',
        'final_stop_id' => 'final_stop_id',
        'destination_name' => 'destination_name',
        'status' => 'status',
        'direction_id' => 'direction_id',
        'run_sequence' => 'run_sequence',
        'express_stop_count' => 'express_stop_count',
        'vehicle_position' => 'vehicle_position',
        'vehicle_descriptor' => 'vehicle_descriptor',
        'geopath' => 'geopath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'run_id' => 'setRunId',
        'run_ref' => 'setRunRef',
        'route_id' => 'setRouteId',
        'route_type' => 'setRouteType',
        'final_stop_id' => 'setFinalStopId',
        'destination_name' => 'setDestinationName',
        'status' => 'setStatus',
        'direction_id' => 'setDirectionId',
        'run_sequence' => 'setRunSequence',
        'express_stop_count' => 'setExpressStopCount',
        'vehicle_position' => 'setVehiclePosition',
        'vehicle_descriptor' => 'setVehicleDescriptor',
        'geopath' => 'setGeopath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'run_id' => 'getRunId',
        'run_ref' => 'getRunRef',
        'route_id' => 'getRouteId',
        'route_type' => 'getRouteType',
        'final_stop_id' => 'getFinalStopId',
        'destination_name' => 'getDestinationName',
        'status' => 'getStatus',
        'direction_id' => 'getDirectionId',
        'run_sequence' => 'getRunSequence',
        'express_stop_count' => 'getExpressStopCount',
        'vehicle_position' => 'getVehiclePosition',
        'vehicle_descriptor' => 'getVehicleDescriptor',
        'geopath' => 'getGeopath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('run_id', $data ?? [], null);
        $this->setIfExists('run_ref', $data ?? [], null);
        $this->setIfExists('route_id', $data ?? [], null);
        $this->setIfExists('route_type', $data ?? [], null);
        $this->setIfExists('final_stop_id', $data ?? [], null);
        $this->setIfExists('destination_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('direction_id', $data ?? [], null);
        $this->setIfExists('run_sequence', $data ?? [], null);
        $this->setIfExists('express_stop_count', $data ?? [], null);
        $this->setIfExists('vehicle_position', $data ?? [], null);
        $this->setIfExists('vehicle_descriptor', $data ?? [], null);
        $this->setIfExists('geopath', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets run_id
     *
     * @return int|null
     */
    public function getRunId()
    {
        return $this->container['run_id'];
    }

    /**
     * Sets run_id
     *
     * @param int|null $run_id Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
     *
     * @return self
     */
    public function setRunId($run_id)
    {
        if (is_null($run_id)) {
            throw new \InvalidArgumentException('non-nullable run_id cannot be null');
        }
        $this->container['run_id'] = $run_id;

        return $this;
    }

    /**
     * Gets run_ref
     *
     * @return string|null
     */
    public function getRunRef()
    {
        return $this->container['run_ref'];
    }

    /**
     * Sets run_ref
     *
     * @param string|null $run_ref Alphanumeric trip/service run identifier
     *
     * @return self
     */
    public function setRunRef($run_ref)
    {
        if (is_null($run_ref)) {
            throw new \InvalidArgumentException('non-nullable run_ref cannot be null');
        }
        $this->container['run_ref'] = $run_ref;

        return $this;
    }

    /**
     * Gets route_id
     *
     * @return int|null
     */
    public function getRouteId()
    {
        return $this->container['route_id'];
    }

    /**
     * Sets route_id
     *
     * @param int|null $route_id Route identifier
     *
     * @return self
     */
    public function setRouteId($route_id)
    {
        if (is_null($route_id)) {
            throw new \InvalidArgumentException('non-nullable route_id cannot be null');
        }
        $this->container['route_id'] = $route_id;

        return $this;
    }

    /**
     * Gets route_type
     *
     * @return int|null
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param int|null $route_type Transport mode identifier
     *
     * @return self
     */
    public function setRouteType($route_type)
    {
        if (is_null($route_type)) {
            throw new \InvalidArgumentException('non-nullable route_type cannot be null');
        }
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets final_stop_id
     *
     * @return int|null
     */
    public function getFinalStopId()
    {
        return $this->container['final_stop_id'];
    }

    /**
     * Sets final_stop_id
     *
     * @param int|null $final_stop_id stop_id of final stop of run
     *
     * @return self
     */
    public function setFinalStopId($final_stop_id)
    {
        if (is_null($final_stop_id)) {
            throw new \InvalidArgumentException('non-nullable final_stop_id cannot be null');
        }
        $this->container['final_stop_id'] = $final_stop_id;

        return $this;
    }

    /**
     * Gets destination_name
     *
     * @return string|null
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     *
     * @param string|null $destination_name Name of destination of run
     *
     * @return self
     */
    public function setDestinationName($destination_name)
    {
        if (is_null($destination_name)) {
            throw new \InvalidArgumentException('non-nullable destination_name cannot be null');
        }
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of metropolitan train run; returns \"scheduled\" for other modes
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets direction_id
     *
     * @return int|null
     */
    public function getDirectionId()
    {
        return $this->container['direction_id'];
    }

    /**
     * Sets direction_id
     *
     * @param int|null $direction_id Direction of travel identifier
     *
     * @return self
     */
    public function setDirectionId($direction_id)
    {
        if (is_null($direction_id)) {
            throw new \InvalidArgumentException('non-nullable direction_id cannot be null');
        }
        $this->container['direction_id'] = $direction_id;

        return $this;
    }

    /**
     * Gets run_sequence
     *
     * @return int|null
     */
    public function getRunSequence()
    {
        return $this->container['run_sequence'];
    }

    /**
     * Sets run_sequence
     *
     * @param int|null $run_sequence Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.
     *
     * @return self
     */
    public function setRunSequence($run_sequence)
    {
        if (is_null($run_sequence)) {
            throw new \InvalidArgumentException('non-nullable run_sequence cannot be null');
        }
        $this->container['run_sequence'] = $run_sequence;

        return $this;
    }

    /**
     * Gets express_stop_count
     *
     * @return int|null
     */
    public function getExpressStopCount()
    {
        return $this->container['express_stop_count'];
    }

    /**
     * Sets express_stop_count
     *
     * @param int|null $express_stop_count The number of remaining skipped/express stations for the run/service from a stop
     *
     * @return self
     */
    public function setExpressStopCount($express_stop_count)
    {
        if (is_null($express_stop_count)) {
            throw new \InvalidArgumentException('non-nullable express_stop_count cannot be null');
        }
        $this->container['express_stop_count'] = $express_stop_count;

        return $this;
    }

    /**
     * Gets vehicle_position
     *
     * @return \OpenAPI\Client\Model\V3VehiclePosition|null
     */
    public function getVehiclePosition()
    {
        return $this->container['vehicle_position'];
    }

    /**
     * Sets vehicle_position
     *
     * @param \OpenAPI\Client\Model\V3VehiclePosition|null $vehicle_position vehicle_position
     *
     * @return self
     */
    public function setVehiclePosition($vehicle_position)
    {
        if (is_null($vehicle_position)) {
            throw new \InvalidArgumentException('non-nullable vehicle_position cannot be null');
        }
        $this->container['vehicle_position'] = $vehicle_position;

        return $this;
    }

    /**
     * Gets vehicle_descriptor
     *
     * @return \OpenAPI\Client\Model\V3VehicleDescriptor|null
     */
    public function getVehicleDescriptor()
    {
        return $this->container['vehicle_descriptor'];
    }

    /**
     * Sets vehicle_descriptor
     *
     * @param \OpenAPI\Client\Model\V3VehicleDescriptor|null $vehicle_descriptor vehicle_descriptor
     *
     * @return self
     */
    public function setVehicleDescriptor($vehicle_descriptor)
    {
        if (is_null($vehicle_descriptor)) {
            throw new \InvalidArgumentException('non-nullable vehicle_descriptor cannot be null');
        }
        $this->container['vehicle_descriptor'] = $vehicle_descriptor;

        return $this;
    }

    /**
     * Gets geopath
     *
     * @return object[]|null
     */
    public function getGeopath()
    {
        return $this->container['geopath'];
    }

    /**
     * Sets geopath
     *
     * @param object[]|null $geopath Geopath of the route
     *
     * @return self
     */
    public function setGeopath($geopath)
    {
        if (is_null($geopath)) {
            throw new \InvalidArgumentException('non-nullable geopath cannot be null');
        }
        $this->container['geopath'] = $geopath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


