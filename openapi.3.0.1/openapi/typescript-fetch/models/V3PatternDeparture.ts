/* tslint:disable */
/* eslint-disable */
/**
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria\'s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V3StopModel } from './V3StopModel';
import {
    V3StopModelFromJSON,
    V3StopModelFromJSONTyped,
    V3StopModelToJSON,
} from './V3StopModel';

/**
 * 
 * @export
 * @interface V3PatternDeparture
 */
export interface V3PatternDeparture {
    /**
     * The stops to be skipped following the current departure in order.
     * @type {Array<V3StopModel>}
     * @memberof V3PatternDeparture
     */
    skippedStops?: Array<V3StopModel>;
    /**
     * Stop identifier
     * @type {number}
     * @memberof V3PatternDeparture
     */
    stopId?: number;
    /**
     * Route identifier
     * @type {number}
     * @memberof V3PatternDeparture
     */
    routeId?: number;
    /**
     * Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
     * @type {number}
     * @memberof V3PatternDeparture
     */
    readonly runId?: number;
    /**
     * Alphanumeric trip/service run identifier
     * @type {string}
     * @memberof V3PatternDeparture
     */
    runRef?: string;
    /**
     * Direction of travel identifier
     * @type {number}
     * @memberof V3PatternDeparture
     */
    directionId?: number;
    /**
     * Disruption information identifier(s)
     * @type {Array<number>}
     * @memberof V3PatternDeparture
     */
    disruptionIds?: Array<number>;
    /**
     * Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
     * @type {Date}
     * @memberof V3PatternDeparture
     */
    scheduledDepartureUtc?: Date;
    /**
     * Real-time estimate of departure time and date in ISO 8601 UTC format
     * @type {Date}
     * @memberof V3PatternDeparture
     */
    estimatedDepartureUtc?: Date;
    /**
     * Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
     * @type {boolean}
     * @memberof V3PatternDeparture
     */
    atPlatform?: boolean;
    /**
     * Platform number at stop (metropolitan train only; returns null for other modes)
     * @type {string}
     * @memberof V3PatternDeparture
     */
    platformNumber?: string;
    /**
     * Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
     * @type {string}
     * @memberof V3PatternDeparture
     */
    flags?: string;
    /**
     * Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
     * @type {number}
     * @memberof V3PatternDeparture
     */
    departureSequence?: number;
}

/**
 * Check if a given object implements the V3PatternDeparture interface.
 */
export function instanceOfV3PatternDeparture(value: object): boolean {
    return true;
}

export function V3PatternDepartureFromJSON(json: any): V3PatternDeparture {
    return V3PatternDepartureFromJSONTyped(json, false);
}

export function V3PatternDepartureFromJSONTyped(json: any, ignoreDiscriminator: boolean): V3PatternDeparture {
    if (json == null) {
        return json;
    }
    return {
        
        'skippedStops': json['skipped_stops'] == null ? undefined : ((json['skipped_stops'] as Array<any>).map(V3StopModelFromJSON)),
        'stopId': json['stop_id'] == null ? undefined : json['stop_id'],
        'routeId': json['route_id'] == null ? undefined : json['route_id'],
        'runId': json['run_id'] == null ? undefined : json['run_id'],
        'runRef': json['run_ref'] == null ? undefined : json['run_ref'],
        'directionId': json['direction_id'] == null ? undefined : json['direction_id'],
        'disruptionIds': json['disruption_ids'] == null ? undefined : json['disruption_ids'],
        'scheduledDepartureUtc': json['scheduled_departure_utc'] == null ? undefined : (new Date(json['scheduled_departure_utc'])),
        'estimatedDepartureUtc': json['estimated_departure_utc'] == null ? undefined : (new Date(json['estimated_departure_utc'])),
        'atPlatform': json['at_platform'] == null ? undefined : json['at_platform'],
        'platformNumber': json['platform_number'] == null ? undefined : json['platform_number'],
        'flags': json['flags'] == null ? undefined : json['flags'],
        'departureSequence': json['departure_sequence'] == null ? undefined : json['departure_sequence'],
    };
}

export function V3PatternDepartureToJSON(value?: Omit<V3PatternDeparture, 'run_id'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'skipped_stops': value['skippedStops'] == null ? undefined : ((value['skippedStops'] as Array<any>).map(V3StopModelToJSON)),
        'stop_id': value['stopId'],
        'route_id': value['routeId'],
        'run_ref': value['runRef'],
        'direction_id': value['directionId'],
        'disruption_ids': value['disruptionIds'],
        'scheduled_departure_utc': value['scheduledDepartureUtc'] == null ? undefined : ((value['scheduledDepartureUtc']).toISOString()),
        'estimated_departure_utc': value['estimatedDepartureUtc'] == null ? undefined : ((value['estimatedDepartureUtc']).toISOString()),
        'at_platform': value['atPlatform'],
        'platform_number': value['platformNumber'],
        'flags': value['flags'],
        'departure_sequence': value['departureSequence'],
    };
}

