/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ptv.Api.Client.Client.OpenAPIDateConverter;

namespace Ptv.Api.Client.Model
{
    /// <summary>
    /// V3RouteWithStatus
    /// </summary>
    [DataContract(Name = "V3.RouteWithStatus")]
    public partial class V3RouteWithStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3RouteWithStatus" /> class.
        /// </summary>
        /// <param name="routeServiceStatus">routeServiceStatus.</param>
        /// <param name="routeType">Transport mode identifier.</param>
        /// <param name="routeId">Route identifier.</param>
        /// <param name="routeName">Name of route.</param>
        /// <param name="routeNumber">Route number presented to public (nb. not route_id).</param>
        /// <param name="routeGtfsId">GTFS Identifer of the route.</param>
        /// <param name="geopath">GeoPath of the route.</param>
        public V3RouteWithStatus(V3RouteServiceStatus routeServiceStatus = default(V3RouteServiceStatus), int routeType = default(int), int routeId = default(int), string routeName = default(string), string routeNumber = default(string), string routeGtfsId = default(string), List<Object> geopath = default(List<Object>))
        {
            this.RouteServiceStatus = routeServiceStatus;
            this.RouteType = routeType;
            this.RouteId = routeId;
            this.RouteName = routeName;
            this.RouteNumber = routeNumber;
            this.RouteGtfsId = routeGtfsId;
            this.Geopath = geopath;
        }

        /// <summary>
        /// Gets or Sets RouteServiceStatus
        /// </summary>
        [DataMember(Name = "route_service_status", EmitDefaultValue = false)]
        public V3RouteServiceStatus RouteServiceStatus { get; set; }

        /// <summary>
        /// Transport mode identifier
        /// </summary>
        /// <value>Transport mode identifier</value>
        [DataMember(Name = "route_type", EmitDefaultValue = false)]
        public int RouteType { get; set; }

        /// <summary>
        /// Route identifier
        /// </summary>
        /// <value>Route identifier</value>
        [DataMember(Name = "route_id", EmitDefaultValue = false)]
        public int RouteId { get; set; }

        /// <summary>
        /// Name of route
        /// </summary>
        /// <value>Name of route</value>
        [DataMember(Name = "route_name", EmitDefaultValue = false)]
        public string RouteName { get; set; }

        /// <summary>
        /// Route number presented to public (nb. not route_id)
        /// </summary>
        /// <value>Route number presented to public (nb. not route_id)</value>
        [DataMember(Name = "route_number", EmitDefaultValue = false)]
        public string RouteNumber { get; set; }

        /// <summary>
        /// GTFS Identifer of the route
        /// </summary>
        /// <value>GTFS Identifer of the route</value>
        [DataMember(Name = "route_gtfs_id", EmitDefaultValue = false)]
        public string RouteGtfsId { get; set; }

        /// <summary>
        /// GeoPath of the route
        /// </summary>
        /// <value>GeoPath of the route</value>
        [DataMember(Name = "geopath", EmitDefaultValue = false)]
        public List<Object> Geopath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3RouteWithStatus {\n");
            sb.Append("  RouteServiceStatus: ").Append(RouteServiceStatus).Append("\n");
            sb.Append("  RouteType: ").Append(RouteType).Append("\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  RouteName: ").Append(RouteName).Append("\n");
            sb.Append("  RouteNumber: ").Append(RouteNumber).Append("\n");
            sb.Append("  RouteGtfsId: ").Append(RouteGtfsId).Append("\n");
            sb.Append("  Geopath: ").Append(Geopath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
