/*
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ptv.Api.Client.Client.OpenAPIDateConverter;

namespace Ptv.Api.Client.Model
{
    /// <summary>
    /// V3StopAccessibility
    /// </summary>
    [DataContract(Name = "V3.StopAccessibility")]
    public partial class V3StopAccessibility : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3StopAccessibility" /> class.
        /// </summary>
        /// <param name="lighting">Indicates if there is lighting at the stop.</param>
        /// <param name="platformNumber">Indicates the platform number for xivic information (Platform 0 indicates general stop facilities).</param>
        /// <param name="audioCustomerInformation">Indicates if there is at least one audio customer information at the stop/platform.</param>
        /// <param name="escalator">Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992).</param>
        /// <param name="hearingLoop">Indicates if there is a hearing loop facility at the stop/platform.</param>
        /// <param name="lift">Indicates if there is an elevator at the stop/platform.</param>
        /// <param name="stairs">Indicates if there are stairs available in the stop.</param>
        /// <param name="stopAccessible">Indicates if the stop is accessible.</param>
        /// <param name="tactileGroundSurfaceIndicator">Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop.</param>
        /// <param name="waitingRoom">Indicates if there is a general waiting area at the stop.</param>
        /// <param name="wheelchair">wheelchair.</param>
        public V3StopAccessibility(bool lighting = default(bool), int platformNumber = default(int), bool audioCustomerInformation = default(bool), bool escalator = default(bool), bool hearingLoop = default(bool), bool lift = default(bool), bool stairs = default(bool), bool stopAccessible = default(bool), bool tactileGroundSurfaceIndicator = default(bool), bool waitingRoom = default(bool), V3StopAccessibilityWheelchair wheelchair = default(V3StopAccessibilityWheelchair))
        {
            this.Lighting = lighting;
            this.PlatformNumber = platformNumber;
            this.AudioCustomerInformation = audioCustomerInformation;
            this.Escalator = escalator;
            this.HearingLoop = hearingLoop;
            this.Lift = lift;
            this.Stairs = stairs;
            this.StopAccessible = stopAccessible;
            this.TactileGroundSurfaceIndicator = tactileGroundSurfaceIndicator;
            this.WaitingRoom = waitingRoom;
            this.Wheelchair = wheelchair;
        }

        /// <summary>
        /// Indicates if there is lighting at the stop
        /// </summary>
        /// <value>Indicates if there is lighting at the stop</value>
        [DataMember(Name = "lighting", EmitDefaultValue = true)]
        public bool Lighting { get; set; }

        /// <summary>
        /// Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)
        /// </summary>
        /// <value>Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)</value>
        [DataMember(Name = "platform_number", EmitDefaultValue = false)]
        public int PlatformNumber { get; set; }

        /// <summary>
        /// Indicates if there is at least one audio customer information at the stop/platform
        /// </summary>
        /// <value>Indicates if there is at least one audio customer information at the stop/platform</value>
        [DataMember(Name = "audio_customer_information", EmitDefaultValue = true)]
        public bool AudioCustomerInformation { get; set; }

        /// <summary>
        /// Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
        /// </summary>
        /// <value>Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)</value>
        [DataMember(Name = "escalator", EmitDefaultValue = true)]
        public bool Escalator { get; set; }

        /// <summary>
        /// Indicates if there is a hearing loop facility at the stop/platform
        /// </summary>
        /// <value>Indicates if there is a hearing loop facility at the stop/platform</value>
        [DataMember(Name = "hearing_loop", EmitDefaultValue = true)]
        public bool HearingLoop { get; set; }

        /// <summary>
        /// Indicates if there is an elevator at the stop/platform
        /// </summary>
        /// <value>Indicates if there is an elevator at the stop/platform</value>
        [DataMember(Name = "lift", EmitDefaultValue = true)]
        public bool Lift { get; set; }

        /// <summary>
        /// Indicates if there are stairs available in the stop
        /// </summary>
        /// <value>Indicates if there are stairs available in the stop</value>
        [DataMember(Name = "stairs", EmitDefaultValue = true)]
        public bool Stairs { get; set; }

        /// <summary>
        /// Indicates if the stop is accessible
        /// </summary>
        /// <value>Indicates if the stop is accessible</value>
        [DataMember(Name = "stop_accessible", EmitDefaultValue = true)]
        public bool StopAccessible { get; set; }

        /// <summary>
        /// Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop
        /// </summary>
        /// <value>Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop</value>
        [DataMember(Name = "tactile_ground_surface_indicator", EmitDefaultValue = true)]
        public bool TactileGroundSurfaceIndicator { get; set; }

        /// <summary>
        /// Indicates if there is a general waiting area at the stop
        /// </summary>
        /// <value>Indicates if there is a general waiting area at the stop</value>
        [DataMember(Name = "waiting_room", EmitDefaultValue = true)]
        public bool WaitingRoom { get; set; }

        /// <summary>
        /// Gets or Sets Wheelchair
        /// </summary>
        [DataMember(Name = "wheelchair", EmitDefaultValue = false)]
        public V3StopAccessibilityWheelchair Wheelchair { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3StopAccessibility {\n");
            sb.Append("  Lighting: ").Append(Lighting).Append("\n");
            sb.Append("  PlatformNumber: ").Append(PlatformNumber).Append("\n");
            sb.Append("  AudioCustomerInformation: ").Append(AudioCustomerInformation).Append("\n");
            sb.Append("  Escalator: ").Append(Escalator).Append("\n");
            sb.Append("  HearingLoop: ").Append(HearingLoop).Append("\n");
            sb.Append("  Lift: ").Append(Lift).Append("\n");
            sb.Append("  Stairs: ").Append(Stairs).Append("\n");
            sb.Append("  StopAccessible: ").Append(StopAccessible).Append("\n");
            sb.Append("  TactileGroundSurfaceIndicator: ").Append(TactileGroundSurfaceIndicator).Append("\n");
            sb.Append("  WaitingRoom: ").Append(WaitingRoom).Append("\n");
            sb.Append("  Wheelchair: ").Append(Wheelchair).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
