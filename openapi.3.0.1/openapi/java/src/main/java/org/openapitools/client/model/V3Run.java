/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V3VehicleDescriptor;
import org.openapitools.client.model.V3VehiclePosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3Run
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:00:03.206044600+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3Run {
  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private Integer runId;

  public static final String SERIALIZED_NAME_RUN_REF = "run_ref";
  @SerializedName(SERIALIZED_NAME_RUN_REF)
  private String runRef;

  public static final String SERIALIZED_NAME_ROUTE_ID = "route_id";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  private Integer routeId;

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "route_type";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private Integer routeType;

  public static final String SERIALIZED_NAME_FINAL_STOP_ID = "final_stop_id";
  @SerializedName(SERIALIZED_NAME_FINAL_STOP_ID)
  private Integer finalStopId;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destination_name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DIRECTION_ID = "direction_id";
  @SerializedName(SERIALIZED_NAME_DIRECTION_ID)
  private Integer directionId;

  public static final String SERIALIZED_NAME_RUN_SEQUENCE = "run_sequence";
  @SerializedName(SERIALIZED_NAME_RUN_SEQUENCE)
  private Integer runSequence;

  public static final String SERIALIZED_NAME_EXPRESS_STOP_COUNT = "express_stop_count";
  @SerializedName(SERIALIZED_NAME_EXPRESS_STOP_COUNT)
  private Integer expressStopCount;

  public static final String SERIALIZED_NAME_VEHICLE_POSITION = "vehicle_position";
  @SerializedName(SERIALIZED_NAME_VEHICLE_POSITION)
  private V3VehiclePosition vehiclePosition;

  public static final String SERIALIZED_NAME_VEHICLE_DESCRIPTOR = "vehicle_descriptor";
  @SerializedName(SERIALIZED_NAME_VEHICLE_DESCRIPTOR)
  private V3VehicleDescriptor vehicleDescriptor;

  public static final String SERIALIZED_NAME_GEOPATH = "geopath";
  @SerializedName(SERIALIZED_NAME_GEOPATH)
  private List<Object> geopath = new ArrayList<>();

  public V3Run() {
  }

  public V3Run(
     Integer runId
  ) {
    this();
    this.runId = runId;
  }

   /**
   * Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
   * @return runId
  **/
  @javax.annotation.Nullable
  public Integer getRunId() {
    return runId;
  }



  public V3Run runRef(String runRef) {
    this.runRef = runRef;
    return this;
  }

   /**
   * Alphanumeric trip/service run identifier
   * @return runRef
  **/
  @javax.annotation.Nullable
  public String getRunRef() {
    return runRef;
  }

  public void setRunRef(String runRef) {
    this.runRef = runRef;
  }


  public V3Run routeId(Integer routeId) {
    this.routeId = routeId;
    return this;
  }

   /**
   * Route identifier
   * @return routeId
  **/
  @javax.annotation.Nullable
  public Integer getRouteId() {
    return routeId;
  }

  public void setRouteId(Integer routeId) {
    this.routeId = routeId;
  }


  public V3Run routeType(Integer routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Transport mode identifier
   * @return routeType
  **/
  @javax.annotation.Nullable
  public Integer getRouteType() {
    return routeType;
  }

  public void setRouteType(Integer routeType) {
    this.routeType = routeType;
  }


  public V3Run finalStopId(Integer finalStopId) {
    this.finalStopId = finalStopId;
    return this;
  }

   /**
   * stop_id of final stop of run
   * @return finalStopId
  **/
  @javax.annotation.Nullable
  public Integer getFinalStopId() {
    return finalStopId;
  }

  public void setFinalStopId(Integer finalStopId) {
    this.finalStopId = finalStopId;
  }


  public V3Run destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

   /**
   * Name of destination of run
   * @return destinationName
  **/
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public V3Run status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of metropolitan train run; returns \&quot;scheduled\&quot; for other modes
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public V3Run directionId(Integer directionId) {
    this.directionId = directionId;
    return this;
  }

   /**
   * Direction of travel identifier
   * @return directionId
  **/
  @javax.annotation.Nullable
  public Integer getDirectionId() {
    return directionId;
  }

  public void setDirectionId(Integer directionId) {
    this.directionId = directionId;
  }


  public V3Run runSequence(Integer runSequence) {
    this.runSequence = runSequence;
    return this;
  }

   /**
   * Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id.
   * @return runSequence
  **/
  @javax.annotation.Nullable
  public Integer getRunSequence() {
    return runSequence;
  }

  public void setRunSequence(Integer runSequence) {
    this.runSequence = runSequence;
  }


  public V3Run expressStopCount(Integer expressStopCount) {
    this.expressStopCount = expressStopCount;
    return this;
  }

   /**
   * The number of remaining skipped/express stations for the run/service from a stop
   * @return expressStopCount
  **/
  @javax.annotation.Nullable
  public Integer getExpressStopCount() {
    return expressStopCount;
  }

  public void setExpressStopCount(Integer expressStopCount) {
    this.expressStopCount = expressStopCount;
  }


  public V3Run vehiclePosition(V3VehiclePosition vehiclePosition) {
    this.vehiclePosition = vehiclePosition;
    return this;
  }

   /**
   * Get vehiclePosition
   * @return vehiclePosition
  **/
  @javax.annotation.Nullable
  public V3VehiclePosition getVehiclePosition() {
    return vehiclePosition;
  }

  public void setVehiclePosition(V3VehiclePosition vehiclePosition) {
    this.vehiclePosition = vehiclePosition;
  }


  public V3Run vehicleDescriptor(V3VehicleDescriptor vehicleDescriptor) {
    this.vehicleDescriptor = vehicleDescriptor;
    return this;
  }

   /**
   * Get vehicleDescriptor
   * @return vehicleDescriptor
  **/
  @javax.annotation.Nullable
  public V3VehicleDescriptor getVehicleDescriptor() {
    return vehicleDescriptor;
  }

  public void setVehicleDescriptor(V3VehicleDescriptor vehicleDescriptor) {
    this.vehicleDescriptor = vehicleDescriptor;
  }


  public V3Run geopath(List<Object> geopath) {
    this.geopath = geopath;
    return this;
  }

  public V3Run addGeopathItem(Object geopathItem) {
    if (this.geopath == null) {
      this.geopath = new ArrayList<>();
    }
    this.geopath.add(geopathItem);
    return this;
  }

   /**
   * Geopath of the route
   * @return geopath
  **/
  @javax.annotation.Nullable
  public List<Object> getGeopath() {
    return geopath;
  }

  public void setGeopath(List<Object> geopath) {
    this.geopath = geopath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3Run v3Run = (V3Run) o;
    return Objects.equals(this.runId, v3Run.runId) &&
        Objects.equals(this.runRef, v3Run.runRef) &&
        Objects.equals(this.routeId, v3Run.routeId) &&
        Objects.equals(this.routeType, v3Run.routeType) &&
        Objects.equals(this.finalStopId, v3Run.finalStopId) &&
        Objects.equals(this.destinationName, v3Run.destinationName) &&
        Objects.equals(this.status, v3Run.status) &&
        Objects.equals(this.directionId, v3Run.directionId) &&
        Objects.equals(this.runSequence, v3Run.runSequence) &&
        Objects.equals(this.expressStopCount, v3Run.expressStopCount) &&
        Objects.equals(this.vehiclePosition, v3Run.vehiclePosition) &&
        Objects.equals(this.vehicleDescriptor, v3Run.vehicleDescriptor) &&
        Objects.equals(this.geopath, v3Run.geopath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, runRef, routeId, routeType, finalStopId, destinationName, status, directionId, runSequence, expressStopCount, vehiclePosition, vehicleDescriptor, geopath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3Run {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    runRef: ").append(toIndentedString(runRef)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    finalStopId: ").append(toIndentedString(finalStopId)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    directionId: ").append(toIndentedString(directionId)).append("\n");
    sb.append("    runSequence: ").append(toIndentedString(runSequence)).append("\n");
    sb.append("    expressStopCount: ").append(toIndentedString(expressStopCount)).append("\n");
    sb.append("    vehiclePosition: ").append(toIndentedString(vehiclePosition)).append("\n");
    sb.append("    vehicleDescriptor: ").append(toIndentedString(vehicleDescriptor)).append("\n");
    sb.append("    geopath: ").append(toIndentedString(geopath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("run_id");
    openapiFields.add("run_ref");
    openapiFields.add("route_id");
    openapiFields.add("route_type");
    openapiFields.add("final_stop_id");
    openapiFields.add("destination_name");
    openapiFields.add("status");
    openapiFields.add("direction_id");
    openapiFields.add("run_sequence");
    openapiFields.add("express_stop_count");
    openapiFields.add("vehicle_position");
    openapiFields.add("vehicle_descriptor");
    openapiFields.add("geopath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3Run
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3Run.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3Run is not found in the empty JSON string", V3Run.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3Run.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3Run` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("run_ref") != null && !jsonObj.get("run_ref").isJsonNull()) && !jsonObj.get("run_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_ref").toString()));
      }
      if ((jsonObj.get("destination_name") != null && !jsonObj.get("destination_name").isJsonNull()) && !jsonObj.get("destination_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `vehicle_position`
      if (jsonObj.get("vehicle_position") != null && !jsonObj.get("vehicle_position").isJsonNull()) {
        V3VehiclePosition.validateJsonElement(jsonObj.get("vehicle_position"));
      }
      // validate the optional field `vehicle_descriptor`
      if (jsonObj.get("vehicle_descriptor") != null && !jsonObj.get("vehicle_descriptor").isJsonNull()) {
        V3VehicleDescriptor.validateJsonElement(jsonObj.get("vehicle_descriptor"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geopath") != null && !jsonObj.get("geopath").isJsonNull() && !jsonObj.get("geopath").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geopath` to be an array in the JSON string but got `%s`", jsonObj.get("geopath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3Run.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3Run' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3Run> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3Run.class));

       return (TypeAdapter<T>) new TypeAdapter<V3Run>() {
           @Override
           public void write(JsonWriter out, V3Run value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3Run read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3Run given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3Run
  * @throws IOException if the JSON string is invalid with respect to V3Run
  */
  public static V3Run fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3Run.class);
  }

 /**
  * Convert an instance of V3Run to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

