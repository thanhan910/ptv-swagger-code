/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.V3Direction;
import org.openapitools.client.model.V3Disruption;
import org.openapitools.client.model.V3PatternDeparture;
import org.openapitools.client.model.V3Run;
import org.openapitools.client.model.V3Status;
import org.openapitools.client.model.V3StoppingPatternStop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3StoppingPattern
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:00:03.206044600+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3StoppingPattern {
  public static final String SERIALIZED_NAME_DISRUPTIONS = "disruptions";
  @SerializedName(SERIALIZED_NAME_DISRUPTIONS)
  private List<V3Disruption> disruptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTURES = "departures";
  @SerializedName(SERIALIZED_NAME_DEPARTURES)
  private List<V3PatternDeparture> departures = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOPS = "stops";
  @SerializedName(SERIALIZED_NAME_STOPS)
  private Map<String, V3StoppingPatternStop> stops = new HashMap<>();

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private Map<String, Object> routes = new HashMap<>();

  public static final String SERIALIZED_NAME_RUNS = "runs";
  @SerializedName(SERIALIZED_NAME_RUNS)
  private Map<String, V3Run> runs = new HashMap<>();

  public static final String SERIALIZED_NAME_DIRECTIONS = "directions";
  @SerializedName(SERIALIZED_NAME_DIRECTIONS)
  private Map<String, V3Direction> directions = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private V3Status status;

  public V3StoppingPattern() {
  }

  public V3StoppingPattern disruptions(List<V3Disruption> disruptions) {
    this.disruptions = disruptions;
    return this;
  }

  public V3StoppingPattern addDisruptionsItem(V3Disruption disruptionsItem) {
    if (this.disruptions == null) {
      this.disruptions = new ArrayList<>();
    }
    this.disruptions.add(disruptionsItem);
    return this;
  }

   /**
   * Disruption information applicable to relevant routes or stops
   * @return disruptions
  **/
  @javax.annotation.Nullable
  public List<V3Disruption> getDisruptions() {
    return disruptions;
  }

  public void setDisruptions(List<V3Disruption> disruptions) {
    this.disruptions = disruptions;
  }


  public V3StoppingPattern departures(List<V3PatternDeparture> departures) {
    this.departures = departures;
    return this;
  }

  public V3StoppingPattern addDeparturesItem(V3PatternDeparture departuresItem) {
    if (this.departures == null) {
      this.departures = new ArrayList<>();
    }
    this.departures.add(departuresItem);
    return this;
  }

   /**
   * Timetabled and real-time service departures
   * @return departures
  **/
  @javax.annotation.Nullable
  public List<V3PatternDeparture> getDepartures() {
    return departures;
  }

  public void setDepartures(List<V3PatternDeparture> departures) {
    this.departures = departures;
  }


  public V3StoppingPattern stops(Map<String, V3StoppingPatternStop> stops) {
    this.stops = stops;
    return this;
  }

  public V3StoppingPattern putStopsItem(String key, V3StoppingPatternStop stopsItem) {
    if (this.stops == null) {
      this.stops = new HashMap<>();
    }
    this.stops.put(key, stopsItem);
    return this;
  }

   /**
   * A train station, tram stop, bus stop, regional coach stop or Night Bus stop
   * @return stops
  **/
  @javax.annotation.Nullable
  public Map<String, V3StoppingPatternStop> getStops() {
    return stops;
  }

  public void setStops(Map<String, V3StoppingPatternStop> stops) {
    this.stops = stops;
  }


  public V3StoppingPattern routes(Map<String, Object> routes) {
    this.routes = routes;
    return this;
  }

  public V3StoppingPattern putRoutesItem(String key, Object routesItem) {
    if (this.routes == null) {
      this.routes = new HashMap<>();
    }
    this.routes.put(key, routesItem);
    return this;
  }

   /**
   * Train lines, tram routes, bus routes, regional coach routes, Night Bus routes
   * @return routes
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getRoutes() {
    return routes;
  }

  public void setRoutes(Map<String, Object> routes) {
    this.routes = routes;
  }


  public V3StoppingPattern runs(Map<String, V3Run> runs) {
    this.runs = runs;
    return this;
  }

  public V3StoppingPattern putRunsItem(String key, V3Run runsItem) {
    if (this.runs == null) {
      this.runs = new HashMap<>();
    }
    this.runs.put(key, runsItem);
    return this;
  }

   /**
   * Individual trips/services of a route
   * @return runs
  **/
  @javax.annotation.Nullable
  public Map<String, V3Run> getRuns() {
    return runs;
  }

  public void setRuns(Map<String, V3Run> runs) {
    this.runs = runs;
  }


  public V3StoppingPattern directions(Map<String, V3Direction> directions) {
    this.directions = directions;
    return this;
  }

  public V3StoppingPattern putDirectionsItem(String key, V3Direction directionsItem) {
    if (this.directions == null) {
      this.directions = new HashMap<>();
    }
    this.directions.put(key, directionsItem);
    return this;
  }

   /**
   * Directions of travel of route
   * @return directions
  **/
  @javax.annotation.Nullable
  public Map<String, V3Direction> getDirections() {
    return directions;
  }

  public void setDirections(Map<String, V3Direction> directions) {
    this.directions = directions;
  }


  public V3StoppingPattern status(V3Status status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public V3Status getStatus() {
    return status;
  }

  public void setStatus(V3Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3StoppingPattern v3StoppingPattern = (V3StoppingPattern) o;
    return Objects.equals(this.disruptions, v3StoppingPattern.disruptions) &&
        Objects.equals(this.departures, v3StoppingPattern.departures) &&
        Objects.equals(this.stops, v3StoppingPattern.stops) &&
        Objects.equals(this.routes, v3StoppingPattern.routes) &&
        Objects.equals(this.runs, v3StoppingPattern.runs) &&
        Objects.equals(this.directions, v3StoppingPattern.directions) &&
        Objects.equals(this.status, v3StoppingPattern.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disruptions, departures, stops, routes, runs, directions, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3StoppingPattern {\n");
    sb.append("    disruptions: ").append(toIndentedString(disruptions)).append("\n");
    sb.append("    departures: ").append(toIndentedString(departures)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
    sb.append("    directions: ").append(toIndentedString(directions)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disruptions");
    openapiFields.add("departures");
    openapiFields.add("stops");
    openapiFields.add("routes");
    openapiFields.add("runs");
    openapiFields.add("directions");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3StoppingPattern
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3StoppingPattern.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3StoppingPattern is not found in the empty JSON string", V3StoppingPattern.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3StoppingPattern.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3StoppingPattern` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("disruptions") != null && !jsonObj.get("disruptions").isJsonNull()) {
        JsonArray jsonArraydisruptions = jsonObj.getAsJsonArray("disruptions");
        if (jsonArraydisruptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disruptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disruptions` to be an array in the JSON string but got `%s`", jsonObj.get("disruptions").toString()));
          }

          // validate the optional field `disruptions` (array)
          for (int i = 0; i < jsonArraydisruptions.size(); i++) {
            V3Disruption.validateJsonElement(jsonArraydisruptions.get(i));
          };
        }
      }
      if (jsonObj.get("departures") != null && !jsonObj.get("departures").isJsonNull()) {
        JsonArray jsonArraydepartures = jsonObj.getAsJsonArray("departures");
        if (jsonArraydepartures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("departures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `departures` to be an array in the JSON string but got `%s`", jsonObj.get("departures").toString()));
          }

          // validate the optional field `departures` (array)
          for (int i = 0; i < jsonArraydepartures.size(); i++) {
            V3PatternDeparture.validateJsonElement(jsonArraydepartures.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        V3Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3StoppingPattern.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3StoppingPattern' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3StoppingPattern> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3StoppingPattern.class));

       return (TypeAdapter<T>) new TypeAdapter<V3StoppingPattern>() {
           @Override
           public void write(JsonWriter out, V3StoppingPattern value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3StoppingPattern read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3StoppingPattern given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3StoppingPattern
  * @throws IOException if the JSON string is invalid with respect to V3StoppingPattern
  */
  public static V3StoppingPattern fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3StoppingPattern.class);
  }

 /**
  * Convert an instance of V3StoppingPattern to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

