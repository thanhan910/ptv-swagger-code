/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V3StopAccessibility;
import org.openapitools.client.model.V3StopAmenityDetails;
import org.openapitools.client.model.V3StopLocation;
import org.openapitools.client.model.V3StopStaffing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3StopDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:00:03.206044600+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3StopDetails {
  public static final String SERIALIZED_NAME_DISRUPTION_IDS = "disruption_ids";
  @SerializedName(SERIALIZED_NAME_DISRUPTION_IDS)
  private List<Long> disruptionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATION_TYPE = "station_type";
  @SerializedName(SERIALIZED_NAME_STATION_TYPE)
  private String stationType;

  public static final String SERIALIZED_NAME_STATION_DESCRIPTION = "station_description";
  @SerializedName(SERIALIZED_NAME_STATION_DESCRIPTION)
  private String stationDescription;

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "route_type";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private Integer routeType;

  public static final String SERIALIZED_NAME_STOP_LOCATION = "stop_location";
  @SerializedName(SERIALIZED_NAME_STOP_LOCATION)
  private V3StopLocation stopLocation;

  public static final String SERIALIZED_NAME_STOP_AMENITIES = "stop_amenities";
  @SerializedName(SERIALIZED_NAME_STOP_AMENITIES)
  private V3StopAmenityDetails stopAmenities;

  public static final String SERIALIZED_NAME_STOP_ACCESSIBILITY = "stop_accessibility";
  @SerializedName(SERIALIZED_NAME_STOP_ACCESSIBILITY)
  private V3StopAccessibility stopAccessibility;

  public static final String SERIALIZED_NAME_STOP_STAFFING = "stop_staffing";
  @SerializedName(SERIALIZED_NAME_STOP_STAFFING)
  private V3StopStaffing stopStaffing;

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private List<Object> routes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOP_ID = "stop_id";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  private Integer stopId;

  public static final String SERIALIZED_NAME_STOP_NAME = "stop_name";
  @SerializedName(SERIALIZED_NAME_STOP_NAME)
  private String stopName;

  public static final String SERIALIZED_NAME_STOP_LANDMARK = "stop_landmark";
  @SerializedName(SERIALIZED_NAME_STOP_LANDMARK)
  private String stopLandmark;

  public V3StopDetails() {
  }

  public V3StopDetails disruptionIds(List<Long> disruptionIds) {
    this.disruptionIds = disruptionIds;
    return this;
  }

  public V3StopDetails addDisruptionIdsItem(Long disruptionIdsItem) {
    if (this.disruptionIds == null) {
      this.disruptionIds = new ArrayList<>();
    }
    this.disruptionIds.add(disruptionIdsItem);
    return this;
  }

   /**
   * Disruption information identifier(s)
   * @return disruptionIds
  **/
  @javax.annotation.Nullable
  public List<Long> getDisruptionIds() {
    return disruptionIds;
  }

  public void setDisruptionIds(List<Long> disruptionIds) {
    this.disruptionIds = disruptionIds;
  }


  public V3StopDetails stationType(String stationType) {
    this.stationType = stationType;
    return this;
  }

   /**
   * Type of metropolitan train station (i.e. \&quot;Premium\&quot;, \&quot;Host\&quot; or \&quot;Unstaffed\&quot; station); returns null for V/Line train
   * @return stationType
  **/
  @javax.annotation.Nullable
  public String getStationType() {
    return stationType;
  }

  public void setStationType(String stationType) {
    this.stationType = stationType;
  }


  public V3StopDetails stationDescription(String stationDescription) {
    this.stationDescription = stationDescription;
    return this;
  }

   /**
   * The definition applicable to the station_type; returns null for V/Line train
   * @return stationDescription
  **/
  @javax.annotation.Nullable
  public String getStationDescription() {
    return stationDescription;
  }

  public void setStationDescription(String stationDescription) {
    this.stationDescription = stationDescription;
  }


  public V3StopDetails routeType(Integer routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Transport mode identifier
   * @return routeType
  **/
  @javax.annotation.Nullable
  public Integer getRouteType() {
    return routeType;
  }

  public void setRouteType(Integer routeType) {
    this.routeType = routeType;
  }


  public V3StopDetails stopLocation(V3StopLocation stopLocation) {
    this.stopLocation = stopLocation;
    return this;
  }

   /**
   * Get stopLocation
   * @return stopLocation
  **/
  @javax.annotation.Nullable
  public V3StopLocation getStopLocation() {
    return stopLocation;
  }

  public void setStopLocation(V3StopLocation stopLocation) {
    this.stopLocation = stopLocation;
  }


  public V3StopDetails stopAmenities(V3StopAmenityDetails stopAmenities) {
    this.stopAmenities = stopAmenities;
    return this;
  }

   /**
   * Get stopAmenities
   * @return stopAmenities
  **/
  @javax.annotation.Nullable
  public V3StopAmenityDetails getStopAmenities() {
    return stopAmenities;
  }

  public void setStopAmenities(V3StopAmenityDetails stopAmenities) {
    this.stopAmenities = stopAmenities;
  }


  public V3StopDetails stopAccessibility(V3StopAccessibility stopAccessibility) {
    this.stopAccessibility = stopAccessibility;
    return this;
  }

   /**
   * Get stopAccessibility
   * @return stopAccessibility
  **/
  @javax.annotation.Nullable
  public V3StopAccessibility getStopAccessibility() {
    return stopAccessibility;
  }

  public void setStopAccessibility(V3StopAccessibility stopAccessibility) {
    this.stopAccessibility = stopAccessibility;
  }


  public V3StopDetails stopStaffing(V3StopStaffing stopStaffing) {
    this.stopStaffing = stopStaffing;
    return this;
  }

   /**
   * Get stopStaffing
   * @return stopStaffing
  **/
  @javax.annotation.Nullable
  public V3StopStaffing getStopStaffing() {
    return stopStaffing;
  }

  public void setStopStaffing(V3StopStaffing stopStaffing) {
    this.stopStaffing = stopStaffing;
  }


  public V3StopDetails routes(List<Object> routes) {
    this.routes = routes;
    return this;
  }

  public V3StopDetails addRoutesItem(Object routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<>();
    }
    this.routes.add(routesItem);
    return this;
  }

   /**
   * Routes travelling through the stop
   * @return routes
  **/
  @javax.annotation.Nullable
  public List<Object> getRoutes() {
    return routes;
  }

  public void setRoutes(List<Object> routes) {
    this.routes = routes;
  }


  public V3StopDetails stopId(Integer stopId) {
    this.stopId = stopId;
    return this;
  }

   /**
   * Stop identifier
   * @return stopId
  **/
  @javax.annotation.Nullable
  public Integer getStopId() {
    return stopId;
  }

  public void setStopId(Integer stopId) {
    this.stopId = stopId;
  }


  public V3StopDetails stopName(String stopName) {
    this.stopName = stopName;
    return this;
  }

   /**
   * Name of stop
   * @return stopName
  **/
  @javax.annotation.Nullable
  public String getStopName() {
    return stopName;
  }

  public void setStopName(String stopName) {
    this.stopName = stopName;
  }


  public V3StopDetails stopLandmark(String stopLandmark) {
    this.stopLandmark = stopLandmark;
    return this;
  }

   /**
   * Landmark in proximity of stop
   * @return stopLandmark
  **/
  @javax.annotation.Nullable
  public String getStopLandmark() {
    return stopLandmark;
  }

  public void setStopLandmark(String stopLandmark) {
    this.stopLandmark = stopLandmark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3StopDetails v3StopDetails = (V3StopDetails) o;
    return Objects.equals(this.disruptionIds, v3StopDetails.disruptionIds) &&
        Objects.equals(this.stationType, v3StopDetails.stationType) &&
        Objects.equals(this.stationDescription, v3StopDetails.stationDescription) &&
        Objects.equals(this.routeType, v3StopDetails.routeType) &&
        Objects.equals(this.stopLocation, v3StopDetails.stopLocation) &&
        Objects.equals(this.stopAmenities, v3StopDetails.stopAmenities) &&
        Objects.equals(this.stopAccessibility, v3StopDetails.stopAccessibility) &&
        Objects.equals(this.stopStaffing, v3StopDetails.stopStaffing) &&
        Objects.equals(this.routes, v3StopDetails.routes) &&
        Objects.equals(this.stopId, v3StopDetails.stopId) &&
        Objects.equals(this.stopName, v3StopDetails.stopName) &&
        Objects.equals(this.stopLandmark, v3StopDetails.stopLandmark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disruptionIds, stationType, stationDescription, routeType, stopLocation, stopAmenities, stopAccessibility, stopStaffing, routes, stopId, stopName, stopLandmark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3StopDetails {\n");
    sb.append("    disruptionIds: ").append(toIndentedString(disruptionIds)).append("\n");
    sb.append("    stationType: ").append(toIndentedString(stationType)).append("\n");
    sb.append("    stationDescription: ").append(toIndentedString(stationDescription)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    stopLocation: ").append(toIndentedString(stopLocation)).append("\n");
    sb.append("    stopAmenities: ").append(toIndentedString(stopAmenities)).append("\n");
    sb.append("    stopAccessibility: ").append(toIndentedString(stopAccessibility)).append("\n");
    sb.append("    stopStaffing: ").append(toIndentedString(stopStaffing)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopName: ").append(toIndentedString(stopName)).append("\n");
    sb.append("    stopLandmark: ").append(toIndentedString(stopLandmark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disruption_ids");
    openapiFields.add("station_type");
    openapiFields.add("station_description");
    openapiFields.add("route_type");
    openapiFields.add("stop_location");
    openapiFields.add("stop_amenities");
    openapiFields.add("stop_accessibility");
    openapiFields.add("stop_staffing");
    openapiFields.add("routes");
    openapiFields.add("stop_id");
    openapiFields.add("stop_name");
    openapiFields.add("stop_landmark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3StopDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3StopDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3StopDetails is not found in the empty JSON string", V3StopDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3StopDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3StopDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("disruption_ids") != null && !jsonObj.get("disruption_ids").isJsonNull() && !jsonObj.get("disruption_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disruption_ids` to be an array in the JSON string but got `%s`", jsonObj.get("disruption_ids").toString()));
      }
      if ((jsonObj.get("station_type") != null && !jsonObj.get("station_type").isJsonNull()) && !jsonObj.get("station_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_type").toString()));
      }
      if ((jsonObj.get("station_description") != null && !jsonObj.get("station_description").isJsonNull()) && !jsonObj.get("station_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_description").toString()));
      }
      // validate the optional field `stop_location`
      if (jsonObj.get("stop_location") != null && !jsonObj.get("stop_location").isJsonNull()) {
        V3StopLocation.validateJsonElement(jsonObj.get("stop_location"));
      }
      // validate the optional field `stop_amenities`
      if (jsonObj.get("stop_amenities") != null && !jsonObj.get("stop_amenities").isJsonNull()) {
        V3StopAmenityDetails.validateJsonElement(jsonObj.get("stop_amenities"));
      }
      // validate the optional field `stop_accessibility`
      if (jsonObj.get("stop_accessibility") != null && !jsonObj.get("stop_accessibility").isJsonNull()) {
        V3StopAccessibility.validateJsonElement(jsonObj.get("stop_accessibility"));
      }
      // validate the optional field `stop_staffing`
      if (jsonObj.get("stop_staffing") != null && !jsonObj.get("stop_staffing").isJsonNull()) {
        V3StopStaffing.validateJsonElement(jsonObj.get("stop_staffing"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("routes") != null && !jsonObj.get("routes").isJsonNull() && !jsonObj.get("routes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routes` to be an array in the JSON string but got `%s`", jsonObj.get("routes").toString()));
      }
      if ((jsonObj.get("stop_name") != null && !jsonObj.get("stop_name").isJsonNull()) && !jsonObj.get("stop_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop_name").toString()));
      }
      if ((jsonObj.get("stop_landmark") != null && !jsonObj.get("stop_landmark").isJsonNull()) && !jsonObj.get("stop_landmark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_landmark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop_landmark").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3StopDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3StopDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3StopDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3StopDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<V3StopDetails>() {
           @Override
           public void write(JsonWriter out, V3StopDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3StopDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3StopDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3StopDetails
  * @throws IOException if the JSON string is invalid with respect to V3StopDetails
  */
  public static V3StopDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3StopDetails.class);
  }

 /**
  * Convert an instance of V3StopDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

