/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3StopAccessibilityWheelchair
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:00:03.206044600+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3StopAccessibilityWheelchair {
  public static final String SERIALIZED_NAME_ACCESSIBLE_RAMP = "accessible_ramp";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_RAMP)
  private Boolean accessibleRamp;

  public static final String SERIALIZED_NAME_PARKING = "parking";
  @SerializedName(SERIALIZED_NAME_PARKING)
  private Boolean parking;

  public static final String SERIALIZED_NAME_TELEPHONE = "telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private Boolean telephone;

  public static final String SERIALIZED_NAME_TOILET = "toilet";
  @SerializedName(SERIALIZED_NAME_TOILET)
  private Boolean toilet;

  public static final String SERIALIZED_NAME_LOW_TICKET_COUNTER = "low_ticket_counter";
  @SerializedName(SERIALIZED_NAME_LOW_TICKET_COUNTER)
  private Boolean lowTicketCounter;

  public static final String SERIALIZED_NAME_MANOUVERING = "manouvering";
  @SerializedName(SERIALIZED_NAME_MANOUVERING)
  private Boolean manouvering;

  public static final String SERIALIZED_NAME_RAISED_PLATFORM = "raised_platform";
  @SerializedName(SERIALIZED_NAME_RAISED_PLATFORM)
  private Boolean raisedPlatform;

  public static final String SERIALIZED_NAME_RAMP = "ramp";
  @SerializedName(SERIALIZED_NAME_RAMP)
  private Boolean ramp;

  public static final String SERIALIZED_NAME_SECONDARY_PATH = "secondary_path";
  @SerializedName(SERIALIZED_NAME_SECONDARY_PATH)
  private Boolean secondaryPath;

  public static final String SERIALIZED_NAME_RAISED_PLATFORM_SHELTHER = "raised_platform_shelther";
  @SerializedName(SERIALIZED_NAME_RAISED_PLATFORM_SHELTHER)
  private Boolean raisedPlatformShelther;

  public static final String SERIALIZED_NAME_STEEP_RAMP = "steep_ramp";
  @SerializedName(SERIALIZED_NAME_STEEP_RAMP)
  private Boolean steepRamp;

  public V3StopAccessibilityWheelchair() {
  }

  public V3StopAccessibilityWheelchair accessibleRamp(Boolean accessibleRamp) {
    this.accessibleRamp = accessibleRamp;
    return this;
  }

   /**
   * Get accessibleRamp
   * @return accessibleRamp
  **/
  @javax.annotation.Nullable
  public Boolean getAccessibleRamp() {
    return accessibleRamp;
  }

  public void setAccessibleRamp(Boolean accessibleRamp) {
    this.accessibleRamp = accessibleRamp;
  }


  public V3StopAccessibilityWheelchair parking(Boolean parking) {
    this.parking = parking;
    return this;
  }

   /**
   * Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
   * @return parking
  **/
  @javax.annotation.Nullable
  public Boolean getParking() {
    return parking;
  }

  public void setParking(Boolean parking) {
    this.parking = parking;
  }


  public V3StopAccessibilityWheelchair telephone(Boolean telephone) {
    this.telephone = telephone;
    return this;
  }

   /**
   * Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
   * @return telephone
  **/
  @javax.annotation.Nullable
  public Boolean getTelephone() {
    return telephone;
  }

  public void setTelephone(Boolean telephone) {
    this.telephone = telephone;
  }


  public V3StopAccessibilityWheelchair toilet(Boolean toilet) {
    this.toilet = toilet;
    return this;
  }

   /**
   * Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
   * @return toilet
  **/
  @javax.annotation.Nullable
  public Boolean getToilet() {
    return toilet;
  }

  public void setToilet(Boolean toilet) {
    this.toilet = toilet;
  }


  public V3StopAccessibilityWheelchair lowTicketCounter(Boolean lowTicketCounter) {
    this.lowTicketCounter = lowTicketCounter;
    return this;
  }

   /**
   * Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)
   * @return lowTicketCounter
  **/
  @javax.annotation.Nullable
  public Boolean getLowTicketCounter() {
    return lowTicketCounter;
  }

  public void setLowTicketCounter(Boolean lowTicketCounter) {
    this.lowTicketCounter = lowTicketCounter;
  }


  public V3StopAccessibilityWheelchair manouvering(Boolean manouvering) {
    this.manouvering = manouvering;
    return this;
  }

   /**
   * Indicates if there is a space for mobility device to board on or off a transport mode
   * @return manouvering
  **/
  @javax.annotation.Nullable
  public Boolean getManouvering() {
    return manouvering;
  }

  public void setManouvering(Boolean manouvering) {
    this.manouvering = manouvering;
  }


  public V3StopAccessibilityWheelchair raisedPlatform(Boolean raisedPlatform) {
    this.raisedPlatform = raisedPlatform;
    return this;
  }

   /**
   * Indicates if there is a raised platform to board a train
   * @return raisedPlatform
  **/
  @javax.annotation.Nullable
  public Boolean getRaisedPlatform() {
    return raisedPlatform;
  }

  public void setRaisedPlatform(Boolean raisedPlatform) {
    this.raisedPlatform = raisedPlatform;
  }


  public V3StopAccessibilityWheelchair ramp(Boolean ramp) {
    this.ramp = ramp;
    return this;
  }

   /**
   * Indicates if there are ramps (&amp;lt;1:14) at the stop/platform
   * @return ramp
  **/
  @javax.annotation.Nullable
  public Boolean getRamp() {
    return ramp;
  }

  public void setRamp(Boolean ramp) {
    this.ramp = ramp;
  }


  public V3StopAccessibilityWheelchair secondaryPath(Boolean secondaryPath) {
    this.secondaryPath = secondaryPath;
    return this;
  }

   /**
   * Indicates if there is a path beyond the stop which is accessible
   * @return secondaryPath
  **/
  @javax.annotation.Nullable
  public Boolean getSecondaryPath() {
    return secondaryPath;
  }

  public void setSecondaryPath(Boolean secondaryPath) {
    this.secondaryPath = secondaryPath;
  }


  public V3StopAccessibilityWheelchair raisedPlatformShelther(Boolean raisedPlatformShelther) {
    this.raisedPlatformShelther = raisedPlatformShelther;
    return this;
  }

   /**
   * Indicates if there is shelter near the raised platform
   * @return raisedPlatformShelther
  **/
  @javax.annotation.Nullable
  public Boolean getRaisedPlatformShelther() {
    return raisedPlatformShelther;
  }

  public void setRaisedPlatformShelther(Boolean raisedPlatformShelther) {
    this.raisedPlatformShelther = raisedPlatformShelther;
  }


  public V3StopAccessibilityWheelchair steepRamp(Boolean steepRamp) {
    this.steepRamp = steepRamp;
    return this;
  }

   /**
   * Indicates if there are ramps (&amp;gt;1:14) at the stop/platform
   * @return steepRamp
  **/
  @javax.annotation.Nullable
  public Boolean getSteepRamp() {
    return steepRamp;
  }

  public void setSteepRamp(Boolean steepRamp) {
    this.steepRamp = steepRamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3StopAccessibilityWheelchair v3StopAccessibilityWheelchair = (V3StopAccessibilityWheelchair) o;
    return Objects.equals(this.accessibleRamp, v3StopAccessibilityWheelchair.accessibleRamp) &&
        Objects.equals(this.parking, v3StopAccessibilityWheelchair.parking) &&
        Objects.equals(this.telephone, v3StopAccessibilityWheelchair.telephone) &&
        Objects.equals(this.toilet, v3StopAccessibilityWheelchair.toilet) &&
        Objects.equals(this.lowTicketCounter, v3StopAccessibilityWheelchair.lowTicketCounter) &&
        Objects.equals(this.manouvering, v3StopAccessibilityWheelchair.manouvering) &&
        Objects.equals(this.raisedPlatform, v3StopAccessibilityWheelchair.raisedPlatform) &&
        Objects.equals(this.ramp, v3StopAccessibilityWheelchair.ramp) &&
        Objects.equals(this.secondaryPath, v3StopAccessibilityWheelchair.secondaryPath) &&
        Objects.equals(this.raisedPlatformShelther, v3StopAccessibilityWheelchair.raisedPlatformShelther) &&
        Objects.equals(this.steepRamp, v3StopAccessibilityWheelchair.steepRamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibleRamp, parking, telephone, toilet, lowTicketCounter, manouvering, raisedPlatform, ramp, secondaryPath, raisedPlatformShelther, steepRamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3StopAccessibilityWheelchair {\n");
    sb.append("    accessibleRamp: ").append(toIndentedString(accessibleRamp)).append("\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    toilet: ").append(toIndentedString(toilet)).append("\n");
    sb.append("    lowTicketCounter: ").append(toIndentedString(lowTicketCounter)).append("\n");
    sb.append("    manouvering: ").append(toIndentedString(manouvering)).append("\n");
    sb.append("    raisedPlatform: ").append(toIndentedString(raisedPlatform)).append("\n");
    sb.append("    ramp: ").append(toIndentedString(ramp)).append("\n");
    sb.append("    secondaryPath: ").append(toIndentedString(secondaryPath)).append("\n");
    sb.append("    raisedPlatformShelther: ").append(toIndentedString(raisedPlatformShelther)).append("\n");
    sb.append("    steepRamp: ").append(toIndentedString(steepRamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessible_ramp");
    openapiFields.add("parking");
    openapiFields.add("telephone");
    openapiFields.add("toilet");
    openapiFields.add("low_ticket_counter");
    openapiFields.add("manouvering");
    openapiFields.add("raised_platform");
    openapiFields.add("ramp");
    openapiFields.add("secondary_path");
    openapiFields.add("raised_platform_shelther");
    openapiFields.add("steep_ramp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3StopAccessibilityWheelchair
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3StopAccessibilityWheelchair.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3StopAccessibilityWheelchair is not found in the empty JSON string", V3StopAccessibilityWheelchair.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3StopAccessibilityWheelchair.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3StopAccessibilityWheelchair` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3StopAccessibilityWheelchair.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3StopAccessibilityWheelchair' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3StopAccessibilityWheelchair> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3StopAccessibilityWheelchair.class));

       return (TypeAdapter<T>) new TypeAdapter<V3StopAccessibilityWheelchair>() {
           @Override
           public void write(JsonWriter out, V3StopAccessibilityWheelchair value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3StopAccessibilityWheelchair read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3StopAccessibilityWheelchair given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3StopAccessibilityWheelchair
  * @throws IOException if the JSON string is invalid with respect to V3StopAccessibilityWheelchair
  */
  public static V3StopAccessibilityWheelchair fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3StopAccessibilityWheelchair.class);
  }

 /**
  * Convert an instance of V3StopAccessibilityWheelchair to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

