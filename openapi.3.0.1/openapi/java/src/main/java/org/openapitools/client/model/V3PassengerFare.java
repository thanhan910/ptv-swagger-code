/*
 * PTV Timetable API - Version 3
 * The PTV Timetable API provides direct access to Public Transport Victoria's public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V3PassengerFare
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T22:00:03.206044600+10:00[Australia/Sydney]", comments = "Generator version: 7.5.0")
public class V3PassengerFare {
  public static final String SERIALIZED_NAME_PASSENGER_TYPE = "PassengerType";
  @SerializedName(SERIALIZED_NAME_PASSENGER_TYPE)
  private String passengerType;

  public static final String SERIALIZED_NAME_FARE2_HOUR_PEAK = "Fare2HourPeak";
  @SerializedName(SERIALIZED_NAME_FARE2_HOUR_PEAK)
  private BigDecimal fare2HourPeak;

  public static final String SERIALIZED_NAME_FARE2_HOUR_OFF_PEAK = "Fare2HourOffPeak";
  @SerializedName(SERIALIZED_NAME_FARE2_HOUR_OFF_PEAK)
  private BigDecimal fare2HourOffPeak;

  public static final String SERIALIZED_NAME_FARE_DAILY_PEAK = "FareDailyPeak";
  @SerializedName(SERIALIZED_NAME_FARE_DAILY_PEAK)
  private BigDecimal fareDailyPeak;

  public static final String SERIALIZED_NAME_FARE_DAILY_OFF_PEAK = "FareDailyOffPeak";
  @SerializedName(SERIALIZED_NAME_FARE_DAILY_OFF_PEAK)
  private BigDecimal fareDailyOffPeak;

  public static final String SERIALIZED_NAME_PASS7_DAYS = "Pass7Days";
  @SerializedName(SERIALIZED_NAME_PASS7_DAYS)
  private BigDecimal pass7Days;

  public static final String SERIALIZED_NAME_PASS28_TO69_DAY_PER_DAY = "Pass28To69DayPerDay";
  @SerializedName(SERIALIZED_NAME_PASS28_TO69_DAY_PER_DAY)
  private BigDecimal pass28To69DayPerDay;

  public static final String SERIALIZED_NAME_PASS70_PLUS_DAY_PER_DAY = "Pass70PlusDayPerDay";
  @SerializedName(SERIALIZED_NAME_PASS70_PLUS_DAY_PER_DAY)
  private BigDecimal pass70PlusDayPerDay;

  public static final String SERIALIZED_NAME_WEEKEND_CAP = "WeekendCap";
  @SerializedName(SERIALIZED_NAME_WEEKEND_CAP)
  private BigDecimal weekendCap;

  public static final String SERIALIZED_NAME_HOLIDAY_CAP = "HolidayCap";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CAP)
  private BigDecimal holidayCap;

  public V3PassengerFare() {
  }

  public V3PassengerFare passengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

   /**
   * Get passengerType
   * @return passengerType
  **/
  @javax.annotation.Nullable
  public String getPassengerType() {
    return passengerType;
  }

  public void setPassengerType(String passengerType) {
    this.passengerType = passengerType;
  }


  public V3PassengerFare fare2HourPeak(BigDecimal fare2HourPeak) {
    this.fare2HourPeak = fare2HourPeak;
    return this;
  }

   /**
   * Get fare2HourPeak
   * @return fare2HourPeak
  **/
  @javax.annotation.Nullable
  public BigDecimal getFare2HourPeak() {
    return fare2HourPeak;
  }

  public void setFare2HourPeak(BigDecimal fare2HourPeak) {
    this.fare2HourPeak = fare2HourPeak;
  }


  public V3PassengerFare fare2HourOffPeak(BigDecimal fare2HourOffPeak) {
    this.fare2HourOffPeak = fare2HourOffPeak;
    return this;
  }

   /**
   * Get fare2HourOffPeak
   * @return fare2HourOffPeak
  **/
  @javax.annotation.Nullable
  public BigDecimal getFare2HourOffPeak() {
    return fare2HourOffPeak;
  }

  public void setFare2HourOffPeak(BigDecimal fare2HourOffPeak) {
    this.fare2HourOffPeak = fare2HourOffPeak;
  }


  public V3PassengerFare fareDailyPeak(BigDecimal fareDailyPeak) {
    this.fareDailyPeak = fareDailyPeak;
    return this;
  }

   /**
   * Get fareDailyPeak
   * @return fareDailyPeak
  **/
  @javax.annotation.Nullable
  public BigDecimal getFareDailyPeak() {
    return fareDailyPeak;
  }

  public void setFareDailyPeak(BigDecimal fareDailyPeak) {
    this.fareDailyPeak = fareDailyPeak;
  }


  public V3PassengerFare fareDailyOffPeak(BigDecimal fareDailyOffPeak) {
    this.fareDailyOffPeak = fareDailyOffPeak;
    return this;
  }

   /**
   * Get fareDailyOffPeak
   * @return fareDailyOffPeak
  **/
  @javax.annotation.Nullable
  public BigDecimal getFareDailyOffPeak() {
    return fareDailyOffPeak;
  }

  public void setFareDailyOffPeak(BigDecimal fareDailyOffPeak) {
    this.fareDailyOffPeak = fareDailyOffPeak;
  }


  public V3PassengerFare pass7Days(BigDecimal pass7Days) {
    this.pass7Days = pass7Days;
    return this;
  }

   /**
   * Get pass7Days
   * @return pass7Days
  **/
  @javax.annotation.Nullable
  public BigDecimal getPass7Days() {
    return pass7Days;
  }

  public void setPass7Days(BigDecimal pass7Days) {
    this.pass7Days = pass7Days;
  }


  public V3PassengerFare pass28To69DayPerDay(BigDecimal pass28To69DayPerDay) {
    this.pass28To69DayPerDay = pass28To69DayPerDay;
    return this;
  }

   /**
   * Get pass28To69DayPerDay
   * @return pass28To69DayPerDay
  **/
  @javax.annotation.Nullable
  public BigDecimal getPass28To69DayPerDay() {
    return pass28To69DayPerDay;
  }

  public void setPass28To69DayPerDay(BigDecimal pass28To69DayPerDay) {
    this.pass28To69DayPerDay = pass28To69DayPerDay;
  }


  public V3PassengerFare pass70PlusDayPerDay(BigDecimal pass70PlusDayPerDay) {
    this.pass70PlusDayPerDay = pass70PlusDayPerDay;
    return this;
  }

   /**
   * Get pass70PlusDayPerDay
   * @return pass70PlusDayPerDay
  **/
  @javax.annotation.Nullable
  public BigDecimal getPass70PlusDayPerDay() {
    return pass70PlusDayPerDay;
  }

  public void setPass70PlusDayPerDay(BigDecimal pass70PlusDayPerDay) {
    this.pass70PlusDayPerDay = pass70PlusDayPerDay;
  }


  public V3PassengerFare weekendCap(BigDecimal weekendCap) {
    this.weekendCap = weekendCap;
    return this;
  }

   /**
   * Get weekendCap
   * @return weekendCap
  **/
  @javax.annotation.Nullable
  public BigDecimal getWeekendCap() {
    return weekendCap;
  }

  public void setWeekendCap(BigDecimal weekendCap) {
    this.weekendCap = weekendCap;
  }


  public V3PassengerFare holidayCap(BigDecimal holidayCap) {
    this.holidayCap = holidayCap;
    return this;
  }

   /**
   * Get holidayCap
   * @return holidayCap
  **/
  @javax.annotation.Nullable
  public BigDecimal getHolidayCap() {
    return holidayCap;
  }

  public void setHolidayCap(BigDecimal holidayCap) {
    this.holidayCap = holidayCap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3PassengerFare v3PassengerFare = (V3PassengerFare) o;
    return Objects.equals(this.passengerType, v3PassengerFare.passengerType) &&
        Objects.equals(this.fare2HourPeak, v3PassengerFare.fare2HourPeak) &&
        Objects.equals(this.fare2HourOffPeak, v3PassengerFare.fare2HourOffPeak) &&
        Objects.equals(this.fareDailyPeak, v3PassengerFare.fareDailyPeak) &&
        Objects.equals(this.fareDailyOffPeak, v3PassengerFare.fareDailyOffPeak) &&
        Objects.equals(this.pass7Days, v3PassengerFare.pass7Days) &&
        Objects.equals(this.pass28To69DayPerDay, v3PassengerFare.pass28To69DayPerDay) &&
        Objects.equals(this.pass70PlusDayPerDay, v3PassengerFare.pass70PlusDayPerDay) &&
        Objects.equals(this.weekendCap, v3PassengerFare.weekendCap) &&
        Objects.equals(this.holidayCap, v3PassengerFare.holidayCap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passengerType, fare2HourPeak, fare2HourOffPeak, fareDailyPeak, fareDailyOffPeak, pass7Days, pass28To69DayPerDay, pass70PlusDayPerDay, weekendCap, holidayCap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3PassengerFare {\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    fare2HourPeak: ").append(toIndentedString(fare2HourPeak)).append("\n");
    sb.append("    fare2HourOffPeak: ").append(toIndentedString(fare2HourOffPeak)).append("\n");
    sb.append("    fareDailyPeak: ").append(toIndentedString(fareDailyPeak)).append("\n");
    sb.append("    fareDailyOffPeak: ").append(toIndentedString(fareDailyOffPeak)).append("\n");
    sb.append("    pass7Days: ").append(toIndentedString(pass7Days)).append("\n");
    sb.append("    pass28To69DayPerDay: ").append(toIndentedString(pass28To69DayPerDay)).append("\n");
    sb.append("    pass70PlusDayPerDay: ").append(toIndentedString(pass70PlusDayPerDay)).append("\n");
    sb.append("    weekendCap: ").append(toIndentedString(weekendCap)).append("\n");
    sb.append("    holidayCap: ").append(toIndentedString(holidayCap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PassengerType");
    openapiFields.add("Fare2HourPeak");
    openapiFields.add("Fare2HourOffPeak");
    openapiFields.add("FareDailyPeak");
    openapiFields.add("FareDailyOffPeak");
    openapiFields.add("Pass7Days");
    openapiFields.add("Pass28To69DayPerDay");
    openapiFields.add("Pass70PlusDayPerDay");
    openapiFields.add("WeekendCap");
    openapiFields.add("HolidayCap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V3PassengerFare
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V3PassengerFare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V3PassengerFare is not found in the empty JSON string", V3PassengerFare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V3PassengerFare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V3PassengerFare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PassengerType") != null && !jsonObj.get("PassengerType").isJsonNull()) && !jsonObj.get("PassengerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PassengerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PassengerType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V3PassengerFare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V3PassengerFare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V3PassengerFare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V3PassengerFare.class));

       return (TypeAdapter<T>) new TypeAdapter<V3PassengerFare>() {
           @Override
           public void write(JsonWriter out, V3PassengerFare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V3PassengerFare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V3PassengerFare given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V3PassengerFare
  * @throws IOException if the JSON string is invalid with respect to V3PassengerFare
  */
  public static V3PassengerFare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V3PassengerFare.class);
  }

 /**
  * Convert an instance of V3PassengerFare to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

