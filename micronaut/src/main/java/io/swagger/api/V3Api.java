/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.V3DeparturesResponse;
import io.swagger.model.V3DirectionsResponse;
import io.swagger.model.V3DisruptionModesResponse;
import io.swagger.model.V3DisruptionResponse;
import io.swagger.model.V3DisruptionsResponse;
import io.swagger.model.V3ErrorResponse;
import io.swagger.model.V3FareEstimateResponse;
import io.swagger.model.V3OutletGeolocationResponse;
import io.swagger.model.V3OutletResponse;
import io.swagger.model.V3RouteResponse;
import io.swagger.model.V3RouteTypesResponse;
import io.swagger.model.V3RunResponse;
import io.swagger.model.V3RunsResponse;
import io.swagger.model.V3SearchResult;
import io.swagger.model.V3StopResponse;
import io.swagger.model.V3StoppingPattern;
import io.swagger.model.V3StopsByDistanceResponse;
import io.swagger.model.V3StopsOnRouteResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.reactivex.rxjava3.core.Single;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;

import javax.annotation.Nullable;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.MicronautCodegen", date = "2024-04-14T03:36:01.894111500+10:00[Australia/Sydney]")
public interface V3Api {


    @Operation(summary = "View departures for all routes from a stop", operationId = "departuresGetForStop", description = "" , tags = {"Departures"})
    @ApiResponse(responseCode = "200", description = "Service departures from the specified stop for all routes of the specified route type; departures are timetabled and real-time (if applicable).")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/departures/route_type/{route_type}/stop/{stop_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DeparturesResponse>> departuresGetForStop(@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@Parameter(description = "Identifier of stop; values returned by Stops API") @PathVariable("stop_id") Integer stopId,@Nullable @Parameter(description = "Filter by platform number at stop") @QueryValue(value = "platform_numbers") List<Integer> platformNumbers,@Nullable @Parameter(description = "Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}") @QueryValue(value = "direction_id") Integer directionId,@Nullable @Parameter(description = "Indicates that stop_id parameter will accept \"GTFS stop_id\" data") @QueryValue(value = "gtfs") Boolean gtfs,@Nullable @Parameter(description = "Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Maximum number of results returned") @QueryValue(value = "max_results") Integer maxResults,@Nullable @Parameter(description = "Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only") @QueryValue(value = "include_cancelled") Boolean includeCancelled,@Nullable @Parameter(description = "Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.") @QueryValue(value = "look_backwards") Boolean lookBackwards,@Nullable @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Indicates if the route geopath should be returned") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View departures for a specific route from a stop", operationId = "departuresGetForStopAndRoute", description = "" , tags = {"Departures"})
    @ApiResponse(responseCode = "200", description = "Service departures from the specified stop for the specified route (and route type); departures are timetabled and real-time (if applicable).")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/departures/route_type/{route_type}/stop/{stop_id}/route/{route_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DeparturesResponse>> departuresGetForStopAndRoute(@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@Parameter(description = "Identifier of stop; values returned by Stops API") @PathVariable("stop_id") Integer stopId,@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes") @PathVariable("route_id") String routeId,@Nullable @Parameter(description = "Filter by identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}") @QueryValue(value = "direction_id") Integer directionId,@Nullable @Parameter(description = "Indicates that stop_id parameter will accept \"GTFS stop_id\" data") @QueryValue(value = "gtfs") Boolean gtfs,@Nullable @Parameter(description = "Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Maximum number of results returned") @QueryValue(value = "max_results") Integer maxResults,@Nullable @Parameter(description = "Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only") @QueryValue(value = "include_cancelled") Boolean includeCancelled,@Nullable @Parameter(description = "Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.") @QueryValue(value = "look_backwards") Boolean lookBackwards,@Nullable @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor or None.  Run must be expanded to receive VehiclePosition and VehicleDescriptor information.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Indicates if the route geopath should be returned") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all routes for a direction of travel", operationId = "directionsForDirection", description = "" , tags = {"Directions"})
    @ApiResponse(responseCode = "200", description = "All routes that travel in the specified direction.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/directions/{direction_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DirectionsResponse>> directionsForDirection(@Parameter(description = "Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}") @PathVariable("direction_id") Integer directionId,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all routes of a particular type for a direction of travel", operationId = "directionsForDirectionAndType", description = "" , tags = {"Directions"})
    @ApiResponse(responseCode = "200", description = "All routes of the specified route type that travel in the specified direction.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/directions/{direction_id}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DirectionsResponse>> directionsForDirectionAndType(@Parameter(description = "Identifier of direction of travel; values returned by Directions API - /v3/directions/route/{route_id}") @PathVariable("direction_id") Integer directionId,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View directions that a route travels in", operationId = "directionsForRoute", description = "" , tags = {"Directions"})
    @ApiResponse(responseCode = "200", description = "The directions that a specified route travels in.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/directions/route/{route_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DirectionsResponse>> directionsForRoute(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes") @PathVariable("route_id") Integer routeId,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all disruptions for all route types", operationId = "disruptionsGetAllDisruptions", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "All disruption information for all route types.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionsResponse>> disruptionsGetAllDisruptions(@Nullable @Parameter(description = "Filter by route_type; values returned via RouteTypes API") @QueryValue(value = "route_types") List<Integer> routeTypes,@Nullable @Parameter(description = "Filter by disruption_mode; values returned via v3/disruptions/modes API") @QueryValue(value = "disruption_modes") List<Integer> disruptionModes,@Nullable @Parameter(description = "Filter by status of disruption") @QueryValue(value = "disruption_status") String disruptionStatus,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View a specific disruption", operationId = "disruptionsGetDisruptionById", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "Disruption information for the specified disruption ID.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions/{disruption_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionResponse>> disruptionsGetDisruptionById(@Parameter(description = "Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}") @PathVariable("disruption_id") Long disruptionId,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get all disruption modes", operationId = "disruptionsGetDisruptionModes", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "Disruption specific modes")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions/modes", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionModesResponse>> disruptionsGetDisruptionModes(@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all disruptions for a particular route", operationId = "disruptionsGetDisruptionsByRoute", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified route.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions/route/{route_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionsResponse>> disruptionsGetDisruptionsByRoute(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes") @PathVariable("route_id") Integer routeId,@Nullable @Parameter(description = "Filter by status of disruption") @QueryValue(value = "disruption_status") String disruptionStatus,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all disruptions for a particular route and stop", operationId = "disruptionsGetDisruptionsByRouteAndStop", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified route and stop.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions/route/{route_id}/stop/{stop_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionsResponse>> disruptionsGetDisruptionsByRouteAndStop(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes") @PathVariable("route_id") Integer routeId,@Parameter(description = "Identifier of stop; values returned by Stops API - v3/stops") @PathVariable("stop_id") Integer stopId,@Nullable @Parameter(description = "Filter by status of disruption") @QueryValue(value = "disruption_status") String disruptionStatus,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all disruptions for a particular stop", operationId = "disruptionsGetDisruptionsByStop", description = "" , tags = {"Disruptions"})
    @ApiResponse(responseCode = "200", description = "All disruption information (if any exists) for the specified stop.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/disruptions/stop/{stop_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3DisruptionsResponse>> disruptionsGetDisruptionsByStop(@Parameter(description = "Identifier of stop; values returned by Stops API - v3/stops") @PathVariable("stop_id") Integer stopId,@Nullable @Parameter(description = "Filter by status of disruption") @QueryValue(value = "disruption_status") String disruptionStatus,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Estimate a fare by zone", operationId = "fareEstimateGetFareEstimateByZone", description = "" , tags = {"FareEstimate"})
    @ApiResponse(responseCode = "200", description = "Resultant set fare estimates")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/fare_estimate/min_zone/{minZone}/max_zone/{maxZone}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3FareEstimateResponse>> fareEstimateGetFareEstimateByZone(@Parameter(description = "Minimum Zone travelled through ie. 1") @PathVariable("minZone") Integer minZone,@Parameter(description = "Maximum Zone travelled through id. 6") @PathVariable("maxZone") Integer maxZone,@Nullable @Parameter(description = "JourneyTouchOnUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).") @QueryValue(value = "journey_touch_on_utc") OffsetDateTime journeyTouchOnUtc,@Nullable @Parameter(description = "JourneyTouchOffUtc in format yyyy-M-d h:m (e.g 2016-5-31 16:53).") @QueryValue(value = "journey_touch_off_utc") OffsetDateTime journeyTouchOffUtc,@Nullable @Parameter(description = "") @QueryValue(value = "is_journey_in_free_tram_zone") Boolean isJourneyInFreeTramZone,@Nullable @Parameter(description = "") @QueryValue(value = "travelled_route_types") List<Integer> travelledRouteTypes,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "List all ticket outlets", operationId = "outletsGetAllOutlets", description = "" , tags = {"Outlets"})
    @ApiResponse(responseCode = "200", description = "Ticket outlets.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/outlets", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3OutletResponse>> outletsGetAllOutlets(@Nullable @Parameter(description = "Maximum number of results returned (default = 30)") @QueryValue(value = "max_results") Integer maxResults,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "List ticket outlets near a specific location", operationId = "outletsGetOutletsByGeolocation", description = "" , tags = {"Outlets"})
    @ApiResponse(responseCode = "200", description = "Ticket outlets near the specified location.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/outlets/location/{latitude},{longitude}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3OutletGeolocationResponse>> outletsGetOutletsByGeolocation(@Parameter(description = "Geographic coordinate of latitude") @PathVariable("latitude") Float latitude,@Parameter(description = "Geographic coordinate of longitude") @PathVariable("longitude") Float longitude,@Nullable @Parameter(description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)") @QueryValue(value = "max_distance") Double maxDistance,@Nullable @Parameter(description = "Maximum number of results returned (default = 30)") @QueryValue(value = "max_results") Integer maxResults,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View the stopping pattern for a specific trip/service run", operationId = "patternsGetPatternByRun", description = "" , tags = {"Patterns"})
    @ApiResponse(responseCode = "200", description = "The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/pattern/run/{run_ref}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3StoppingPattern>> patternsGetPatternByRun(@Parameter(description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.") @PathVariable("run_ref") String runRef,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@NotNull @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Filter by stop_id; values returned by Stops API") @QueryValue(value = "stop_id") Integer stopId,@Nullable @Parameter(description = "Filter by the date and time of the request (ISO 8601 UTC format)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Include any skipped stops in a stopping pattern. Defaults to false.") @QueryValue(value = "include_skipped_stops") Boolean includeSkippedStops,@Nullable @Parameter(description = "Indicates if geopath data will be returned (default = false)") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all route types and their names", operationId = "routeTypesGetRouteTypes", description = "" , tags = {"RouteTypes"})
    @ApiResponse(responseCode = "200", description = "All route types (i.e. identifiers of transport modes) and their names.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/route_types", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RouteTypesResponse>> routeTypesGetRouteTypes(@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View route names and numbers for all routes", operationId = "routesOneOrMoreRoutes", description = "" , tags = {"Routes"})
    @ApiResponse(responseCode = "200", description = "Route names and numbers for all routes of all route types.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/routes", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RouteResponse>> routesOneOrMoreRoutes(@Nullable @Parameter(description = "Filter by route_type; values returned via RouteTypes API") @QueryValue(value = "route_types") List<Integer> routeTypes,@Nullable @Parameter(description = "Filter by name  of route (accepts partial route name matches)") @QueryValue(value = "route_name") String routeName,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View route name and number for specific route ID", operationId = "routesRouteFromId", description = "" , tags = {"Routes"})
    @ApiResponse(responseCode = "200", description = "The route name and number for the specified route ID.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/routes/{route_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RouteResponse>> routesRouteFromId(@Parameter(description = "Identifier of route; values returned by Departures, Directions and Disruptions APIs") @PathVariable("route_id") Integer routeId,@Nullable @Parameter(description = "Indicates kif geopath data will be returned (default = false)") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Filter geopaths by date (ISO 8601 UTC format) (default = current date)") @QueryValue(value = "geopath_utc") OffsetDateTime geopathUtc,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all trip/service runs for a specific route ID", operationId = "runsForRoute", description = "" , tags = {"Runs"})
    @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified route ID.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/runs/route/{route_id}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RunsResponse>> runsForRoute(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes.") @PathVariable("route_id") Integer routeId,@Nullable @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Date of the request. (optional - defaults to now)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all trip/service runs for a specific route ID and route type", operationId = "runsForRouteAndRouteType", description = "" , tags = {"Runs"})
    @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified route ID and route type.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/runs/route/{route_id}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RunsResponse>> runsForRouteAndRouteType(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes.") @PathVariable("route_id") Integer routeId,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@NotNull @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is All.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Date of the request. (optional - defaults to now)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all trip/service runs for a specific run_ref", operationId = "runsForRun", description = "" , tags = {"Runs"})
    @ApiResponse(responseCode = "200", description = "All trip/service run details for the specified run_ref.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/runs/{run_ref}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RunsResponse>> runsForRun(@Parameter(description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.") @PathVariable("run_ref") String runRef,@NotNull @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Date of the request. (optional - defaults to now)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Indicates if geopath data will be returned (default = false)") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View the trip/service run for a specific run_ref and route type", operationId = "runsForRunAndRouteType", description = "" , tags = {"Runs"})
    @ApiResponse(responseCode = "200", description = "The trip/service run details for the run_ref and route type specified.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/runs/{run_ref}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3RunResponse>> runsForRunAndRouteType(@Parameter(description = "The run_ref is the identifier of a run as returned by the departures/_* and runs/_* endpoints. WARNING, run_id is deprecated. Use run_ref instead.") @PathVariable("run_ref") String runRef,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@NotNull @Parameter(description = "List of objects to be returned in full (i.e. expanded) - options include: All, VehiclePosition, VehicleDescriptor, or None. Default is None.") @QueryValue(value = "expand") List<String> expand,@Nullable @Parameter(description = "Date of the request. (optional - defaults to now)") @QueryValue(value = "date_utc") OffsetDateTime dateUtc,@Nullable @Parameter(description = "Indicates if geopath data will be returned (default = false)") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View stops, routes and myki ticket outlets that match the search term", operationId = "searchSearch", description = "" , tags = {"Search"})
    @ApiResponse(responseCode = "200", description = "Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default).")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/search/{search_term}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3SearchResult>> searchSearch(@Parameter(description = "Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)") @PathVariable("search_term") String searchTerm,@Nullable @Parameter(description = "Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)") @QueryValue(value = "route_types") List<Integer> routeTypes,@Nullable @Parameter(description = "Filter by geographic coordinate of latitude") @QueryValue(value = "latitude") Float latitude,@Nullable @Parameter(description = "Filter by geographic coordinate of longitude") @QueryValue(value = "longitude") Float longitude,@Nullable @Parameter(description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters") @QueryValue(value = "max_distance") Float maxDistance,@Nullable @Parameter(description = "Placeholder for future development; currently unavailable") @QueryValue(value = "include_addresses") Boolean includeAddresses,@Nullable @Parameter(description = "Indicates if outlets will be returned in response (default = true)") @QueryValue(value = "include_outlets") Boolean includeOutlets,@Nullable @Parameter(description = "Indicates whether to find stops by suburbs in the search term (default = true)") @QueryValue(value = "match_stop_by_suburb") Boolean matchStopBySuburb,@Nullable @Parameter(description = "Indicates whether to find routes by suburbs in the search term (default = true)") @QueryValue(value = "match_route_by_suburb") Boolean matchRouteBySuburb,@Nullable @Parameter(description = "Indicates whether to search for stops according to a metlink stop ID (default = false)") @QueryValue(value = "match_stop_by_gtfs_stop_id") Boolean matchStopByGtfsStopId,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View facilities at a specific stop (Metro and V/Line stations only)", operationId = "stopsStopDetails", description = "" , tags = {"Stops"})
    @ApiResponse(responseCode = "200", description = "Stop location, amenity and accessibility facility information for the specified stop (metropolitan and V/Line stations only).")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/stops/{stop_id}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3StopResponse>> stopsStopDetails(@Parameter(description = "Identifier of stop; values returned by Stops API") @PathVariable("stop_id") Integer stopId,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@Nullable @Parameter(description = "Indicates if stop location information will be returned (default = false)") @QueryValue(value = "stop_location") Boolean stopLocation,@Nullable @Parameter(description = "Indicates if stop amenity information will be returned (default = false)") @QueryValue(value = "stop_amenities") Boolean stopAmenities,@Nullable @Parameter(description = "Indicates if stop accessibility information will be returned (default = false)") @QueryValue(value = "stop_accessibility") Boolean stopAccessibility,@Nullable @Parameter(description = "Indicates if stop contact information will be returned (default = false)") @QueryValue(value = "stop_contact") Boolean stopContact,@Nullable @Parameter(description = "Indicates if stop ticket information will be returned (default = false)") @QueryValue(value = "stop_ticket") Boolean stopTicket,@Nullable @Parameter(description = "Incdicates whether the stop_id is a GTFS ID or not") @QueryValue(value = "gtfs") Boolean gtfs,@Nullable @Parameter(description = "Indicates if stop staffing information will be returned (default = false)") @QueryValue(value = "stop_staffing") Boolean stopStaffing,@Nullable @Parameter(description = "Indicates if stop disruption information will be returned (default = false)") @QueryValue(value = "stop_disruptions") Boolean stopDisruptions,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all stops near a specific location", operationId = "stopsStopsByGeolocation", description = "" , tags = {"Stops"})
    @ApiResponse(responseCode = "200", description = "All stops near the specified location.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/stops/location/{latitude},{longitude}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3StopsByDistanceResponse>> stopsStopsByGeolocation(@Parameter(description = "Geographic coordinate of latitude") @PathVariable("latitude") Float latitude,@Parameter(description = "Geographic coordinate of longitude") @PathVariable("longitude") Float longitude,@Nullable @Parameter(description = "Filter by route_type; values returned via RouteTypes API") @QueryValue(value = "route_types") List<Integer> routeTypes,@Nullable @Parameter(description = "Maximum number of results returned (default = 30)") @QueryValue(value = "max_results") Integer maxResults,@Nullable @Parameter(description = "Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)") @QueryValue(value = "max_distance") Double maxDistance,@Nullable @Parameter(description = "Indicates if stop disruption information will be returned (default = false)") @QueryValue(value = "stop_disruptions") Boolean stopDisruptions,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all stops on a specific route", operationId = "stopsStopsForRoute", description = "" , tags = {"Stops"})
    @ApiResponse(responseCode = "200", description = "All stops on the specified route.")
    @ApiResponse(responseCode = "400", description = "Invalid Request")
    @ApiResponse(responseCode = "403", description = "Access Denied")
    @Get(value = "/v3/stops/route/{route_id}/route_type/{route_type}", produces = { "application/json", "text/json", "text/html" })
    default Single<HttpResponse<V3StopsOnRouteResponse>> stopsStopsForRoute(@Parameter(description = "Identifier of route; values returned by Routes API - v3/routes") @PathVariable("route_id") Integer routeId,@Parameter(description = "Number identifying transport mode; values returned via RouteTypes API") @PathVariable("route_type") Integer routeType,@Nullable @Parameter(description = "An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.") @QueryValue(value = "direction_id") Integer directionId,@Nullable @Parameter(description = "Indicates if stop disruption information will be returned (default = false)") @QueryValue(value = "stop_disruptions") Boolean stopDisruptions,@Nullable @Parameter(description = "Indicates if geopath data will be returned (default = false)") @QueryValue(value = "include_geopath") Boolean includeGeopath,@Nullable @Parameter(description = "Filter geopaths by date (ISO 8601 UTC format) (default = current date)") @QueryValue(value = "geopath_utc") OffsetDateTime geopathUtc,@Nullable @Parameter(description = "Please ignore") @QueryValue(value = "token") String token,@Nullable @Parameter(description = "Your developer id") @QueryValue(value = "devid") String devid,@Nullable @Parameter(description = "Authentication signature for request") @QueryValue(value = "signature") String signature) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}
